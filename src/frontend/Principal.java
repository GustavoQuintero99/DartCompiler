/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frontend;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Bryan.Ramos
 */
public class Principal extends javax.swing.JFrame {

    private Editor editor;

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        dialogoChooser = new javax.swing.JFileChooser();
        jToolBar1 = new javax.swing.JToolBar();
        btnNuevo = new javax.swing.JButton();
        btnAbrir = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnGComo = new javax.swing.JButton();
        btnGTodo = new javax.swing.JButton();
        btnCerrar = new javax.swing.JButton();
        btnCTodo = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        tpnFuentes = new javax.swing.JTabbedPane();
        tpnSalidas = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        itmMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Compilatron");
        setPreferredSize(new java.awt.Dimension(1000, 1000));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jToolBar1.setRollover(true);

        btnNuevo.setText("Nuevo Archivo");
        btnNuevo.setFocusable(false);
        btnNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNuevo);

        btnAbrir.setText("Abrir");
        btnAbrir.setFocusable(false);
        btnAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAbrir);

        btnGuardar.setText("Guardar");
        btnGuardar.setFocusable(false);
        btnGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnGuardar);

        btnGComo.setText("Guardar como...");
        btnGComo.setFocusable(false);
        btnGComo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGComo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGComoActionPerformed(evt);
            }
        });
        jToolBar1.add(btnGComo);

        btnGTodo.setText("Guardar todo");
        btnGTodo.setFocusable(false);
        btnGTodo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGTodo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGTodoActionPerformed(evt);
            }
        });
        jToolBar1.add(btnGTodo);

        btnCerrar.setText("Cerrar");
        btnCerrar.setFocusable(false);
        btnCerrar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCerrar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCerrar);

        btnCTodo.setText("Cerrar todo");
        btnCTodo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCTodo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCTodoActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCTodo);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setDividerSize(1);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setPreferredSize(new java.awt.Dimension(300, 600));

        tpnFuentes.setPreferredSize(new java.awt.Dimension(300, 600));
        jSplitPane1.setLeftComponent(tpnFuentes);
        jSplitPane1.setRightComponent(tpnSalidas);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        itmMenu.setMnemonic('N');
        itmMenu.setText("Nuevo");
        itmMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmMenuActionPerformed(evt);
            }
        });
        fileMenu.add(itmMenu);

        jMenuBar1.add(fileMenu);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void itmMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmMenuActionPerformed

        dialogoChooser.showSaveDialog(this);
        File archivo = dialogoChooser.getSelectedFile();
        editor = new Editor(archivo);
        tpnFuentes.addTab(archivo.getName(), editor);
        tpnFuentes.setSelectedComponent(editor);

    }//GEN-LAST:event_itmMenuActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed

        try {
            int response = dialogoChooser.showSaveDialog(this);
            if (response == dialogoChooser.APPROVE_OPTION) {
                File archivo = dialogoChooser.getSelectedFile();
                if (archivo != null) {
                    if (!archivo.exists()) {
                        editor = new Editor(archivo);
                        tpnFuentes.addTab(archivo.getName(), editor);
                        tpnFuentes.setSelectedComponent(editor);
                    } else {
                        String[] options = {"Si", "No"};
                        int x = JOptionPane.showOptionDialog(this, "Si acepta, se soobrescribira el archivo y perdera la informacion contenida en el archivo",
                                "Â¿Desea reemplazar el archivo " + archivo.getName() + "?",
                                JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
                        switch (x) {
                            case 0:
                                editor = new Editor(archivo);
                                tpnFuentes.addTab(archivo.getName(), editor);
                                tpnFuentes.setSelectedComponent(editor);
                                break;
                            case 1:
                            default:
                                break;
                        }
                    }
                }
            }

        } catch (Error e) {
        }
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        int response = dialogoChooser.showOpenDialog(this);
        if (response == dialogoChooser.APPROVE_OPTION) {
            File archivo = dialogoChooser.getSelectedFile();
            boolean opened = false;
            for (int i = 0; i < tpnFuentes.getComponentCount(); i++) {
                Editor editor = (Editor) tpnFuentes.getComponentAt(i);
                System.out.println(editor.getArchivo().getPath() + "\n" + archivo.getPath());
                String comparation1 = editor.getArchivo().getPath();
                String comparation2 = archivo.getPath();
                if (comparation2.equals(comparation1)) {
                    opened = true;
                }
            }
            if (archivo.exists() && opened == false) {
                editor = new Editor(archivo);
                try {
                    editor.leerArchivo();
                } catch (IOException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                tpnFuentes.addTab(archivo.getName(), editor);
                tpnFuentes.setSelectedComponent(editor);
            } else {
                JOptionPane.showMessageDialog(this, "No se puede abrir el archivo");

            }

        }
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

        editor = (Editor) tpnFuentes.getSelectedComponent();
        if (editor != null) {
            try {
                editor.guardar();
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnGTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGTodoActionPerformed
        // TODO add your handling code here:
        saveAll();
    }//GEN-LAST:event_btnGTodoActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed

        editor = (Editor) tpnFuentes.getSelectedComponent();
        if (editor != null) {
            closeAndLoad(editor);
            tpnFuentes.remove(tpnFuentes.getSelectedComponent());
        }


    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnCTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCTodoActionPerformed
        // TODO add your handling code here:
        while (tpnFuentes.getComponentCount() > 0) {
            editor = (Editor) tpnFuentes.getComponentAt(0);
            closeAndLoad(editor);
            tpnFuentes.remove(tpnFuentes.getSelectedComponent());

        }
    }//GEN-LAST:event_btnCTodoActionPerformed

    private void btnGComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGComoActionPerformed
        if (tpnFuentes.getSelectedComponent() != null) {
            int response = dialogoChooser.showSaveDialog(this);
            if (response == dialogoChooser.APPROVE_OPTION) {
                File archivo = dialogoChooser.getSelectedFile();
                if (!archivo.exists()) {
                    load(archivo, false);
                } else {
                    String[] options = {"Si", "No"};
                    int x = JOptionPane.showOptionDialog(this, "Si acepta, se soobrescribira el archivo y perdera la informacion contenida en el archivo",
                            "Â¿Desea reemplazar el archivo " + archivo.getName() + "?",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
                    switch (x) {
                        case 0:
                            load(archivo, true);
                            break;
                        case 1:
                        default:
                            break;
                    }

                }

            }
        }


    }//GEN-LAST:event_btnGComoActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if(tpnFuentes.getSelectedComponent()==null){
            System.exit(0);
        }
        String[] options = {"Si", "No", "Cancelar"};
        int x = JOptionPane.showOptionDialog(this, "Â¿Desea guardar antes de salir?",
                "Se cerrara el editor",
                JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
        switch (x) {
            case 0:
                saveAll();
                System.exit(0);
                break;
            case 1:
                System.exit(0);
                break;
            case 2:
                break;
            default:
                break;
        }
    }//GEN-LAST:event_formWindowClosing
    public void load(File archivo, boolean remove) {
        editor = (Editor) tpnFuentes.getSelectedComponent();
        String information = editor.getText();
        editor = new Editor(archivo);
        editor.setearTexto(information);
        try {
            editor.guardar();
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (remove == true) {
            tpnFuentes.remove(tpnFuentes.getSelectedComponent());
        }
        tpnFuentes.add(editor.getArchivo().getName(), editor);
        tpnFuentes.setSelectedComponent(editor);
    }

    public void closeAndLoad(Editor editor) {
        File archivo = editor.getArchivo();
        String[] options = {"Si", "No"};
        int x = JOptionPane.showOptionDialog(this, "Si no lo guarda, se perderan los cambios",
                "Â¿Desea guardar el archivo " + archivo.getName() + "?",
                JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
        System.out.println(x);
        switch (x) {
            case 0: {
                try {
                    editor.guardar();
                } catch (IOException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case 1:
                break;
            default:
                System.out.println("Ocurrio algo jaja alchile");
        }
    }

    public void saveAll() {
        for (int i = 0; i < tpnFuentes.getComponentCount(); i++) {
            editor = (Editor) tpnFuentes.getComponentAt(i);
            try {
                editor.guardar();
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnCTodo;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnGComo;
    private javax.swing.JButton btnGTodo;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JFileChooser dialogoChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem itmMenu;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTabbedPane tpnFuentes;
    private javax.swing.JTabbedPane tpnSalidas;
    // End of variables declaration//GEN-END:variables
}
