/* The following code was generated by JFlex 1.6.1 */

/* JFlex example: partial Java language lexer specification */
package lexico;


import java_cup.runtime.*;
import lexico.DartReservedWords;
import lexico.DartOperators;
import lexico.DartBuiltInWords;
import java_cup.sym;
/**
 * Dart Lexer
 */

class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\2\1\0\1\0\1\1\16\0\4\0\1\12\1\0"+
    "\1\47\1\0\1\0\1\11\1\7\1\0\1\15\1\16\1\3\1\5"+
    "\1\0\1\6\1\0\1\0\1\0\11\0\1\0\1\17\1\0\1\4"+
    "\3\0\32\0\1\0\1\50\2\0\1\0\1\0\1\20\1\25\1\27"+
    "\1\36\1\22\1\37\1\46\1\30\1\34\1\0\1\26\1\31\1\40"+
    "\1\33\1\32\1\44\1\0\1\23\1\21\1\24\1\35\1\45\1\43"+
    "\1\41\1\42\1\0\1\13\1\10\1\14\1\0\6\0\1\0\32\0"+
    "\2\0\4\0\4\0\1\0\2\0\1\0\7\0\1\0\4\0\1\0"+
    "\5\0\27\0\1\0\37\0\1\0\u01ca\0\4\0\14\0\16\0\5\0"+
    "\7\0\1\0\1\0\1\0\21\0\160\0\5\0\1\0\2\0\2\0"+
    "\4\0\1\0\1\0\6\0\1\0\1\0\3\0\1\0\1\0\1\0"+
    "\24\0\1\0\123\0\1\0\213\0\1\0\5\0\2\0\246\0\1\0"+
    "\46\0\2\0\1\0\6\0\51\0\6\0\1\0\1\0\55\0\1\0"+
    "\1\0\1\0\2\0\1\0\2\0\1\0\1\0\10\0\33\0\4\0"+
    "\4\0\15\0\6\0\5\0\1\0\4\0\13\0\1\0\1\0\3\0"+
    "\53\0\37\0\4\0\2\0\1\0\143\0\1\0\1\0\10\0\1\0"+
    "\6\0\2\0\2\0\1\0\4\0\2\0\12\0\3\0\2\0\1\0"+
    "\17\0\1\0\1\0\1\0\36\0\33\0\2\0\131\0\13\0\1\0"+
    "\16\0\12\0\41\0\11\0\2\0\4\0\1\0\2\0\1\0\30\0"+
    "\4\0\1\0\11\0\1\0\3\0\1\0\5\0\22\0\31\0\3\0"+
    "\4\0\13\0\5\0\30\0\1\0\6\0\1\0\2\0\6\0\10\0"+
    "\52\0\72\0\66\0\3\0\1\0\22\0\1\0\7\0\12\0\2\0"+
    "\2\0\12\0\1\0\20\0\3\0\1\0\10\0\2\0\2\0\2\0"+
    "\26\0\1\0\7\0\1\0\1\0\3\0\4\0\2\0\1\0\1\0"+
    "\7\0\2\0\2\0\2\0\3\0\1\0\10\0\1\0\4\0\2\0"+
    "\1\0\3\0\2\0\2\0\12\0\4\0\7\0\2\0\1\0\1\0"+
    "\2\0\3\0\1\0\6\0\4\0\2\0\2\0\26\0\1\0\7\0"+
    "\1\0\2\0\1\0\2\0\1\0\2\0\2\0\1\0\1\0\5\0"+
    "\4\0\2\0\2\0\3\0\3\0\1\0\7\0\4\0\1\0\1\0"+
    "\7\0\14\0\3\0\1\0\13\0\3\0\1\0\11\0\1\0\3\0"+
    "\1\0\26\0\1\0\7\0\1\0\2\0\1\0\5\0\2\0\1\0"+
    "\1\0\10\0\1\0\3\0\1\0\3\0\2\0\1\0\17\0\2\0"+
    "\2\0\2\0\12\0\1\0\1\0\7\0\1\0\6\0\1\0\3\0"+
    "\1\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0\2\0"+
    "\1\0\5\0\2\0\1\0\1\0\7\0\2\0\2\0\2\0\3\0"+
    "\7\0\3\0\4\0\2\0\1\0\3\0\2\0\2\0\12\0\1\0"+
    "\1\0\20\0\1\0\1\0\1\0\6\0\3\0\3\0\1\0\4\0"+
    "\3\0\2\0\1\0\1\0\1\0\2\0\3\0\2\0\3\0\3\0"+
    "\3\0\14\0\4\0\5\0\3\0\3\0\1\0\4\0\2\0\1\0"+
    "\6\0\1\0\16\0\12\0\11\0\1\0\6\0\5\0\10\0\1\0"+
    "\3\0\1\0\27\0\1\0\20\0\2\0\1\0\1\0\7\0\1\0"+
    "\3\0\1\0\4\0\7\0\2\0\1\0\3\0\2\0\1\0\2\0"+
    "\2\0\2\0\2\0\12\0\20\0\1\0\3\0\1\0\10\0\1\0"+
    "\3\0\1\0\27\0\1\0\12\0\1\0\5\0\2\0\1\0\1\0"+
    "\7\0\1\0\3\0\1\0\4\0\7\0\2\0\6\0\2\0\1\0"+
    "\2\0\2\0\2\0\12\0\1\0\2\0\15\0\4\0\11\0\1\0"+
    "\3\0\1\0\51\0\2\0\1\0\7\0\1\0\3\0\1\0\4\0"+
    "\1\0\5\0\3\0\1\0\7\0\3\0\2\0\2\0\12\0\12\0"+
    "\6\0\1\0\3\0\1\0\22\0\3\0\30\0\1\0\11\0\1\0"+
    "\1\0\2\0\7\0\3\0\1\0\4\0\6\0\1\0\1\0\1\0"+
    "\10\0\6\0\12\0\2\0\2\0\15\0\60\0\1\0\2\0\7\0"+
    "\4\0\10\0\10\0\1\0\12\0\47\0\2\0\1\0\1\0\1\0"+
    "\5\0\1\0\30\0\1\0\1\0\1\0\12\0\1\0\2\0\11\0"+
    "\1\0\2\0\5\0\1\0\1\0\1\0\6\0\2\0\12\0\2\0"+
    "\4\0\40\0\1\0\27\0\2\0\6\0\12\0\13\0\1\0\1\0"+
    "\1\0\1\0\1\0\4\0\2\0\10\0\1\0\44\0\4\0\24\0"+
    "\1\0\2\0\5\0\13\0\1\0\44\0\11\0\1\0\71\0\53\0"+
    "\24\0\1\0\12\0\6\0\6\0\4\0\4\0\3\0\1\0\3\0"+
    "\2\0\7\0\3\0\4\0\15\0\14\0\1\0\17\0\2\0\46\0"+
    "\1\0\1\0\5\0\1\0\2\0\53\0\1\0\u014d\0\1\0\4\0"+
    "\2\0\7\0\1\0\1\0\1\0\4\0\2\0\51\0\1\0\4\0"+
    "\2\0\41\0\1\0\4\0\2\0\7\0\1\0\1\0\1\0\4\0"+
    "\2\0\17\0\1\0\71\0\1\0\4\0\2\0\103\0\2\0\3\0"+
    "\40\0\20\0\20\0\126\0\2\0\6\0\3\0\u026c\0\2\0\21\0"+
    "\1\0\32\0\5\0\113\0\3\0\13\0\7\0\22\0\4\0\11\0"+
    "\23\0\3\0\13\0\22\0\2\0\14\0\15\0\1\0\3\0\1\0"+
    "\2\0\14\0\64\0\40\0\3\0\1\0\3\0\2\0\1\0\2\0"+
    "\12\0\41\0\17\0\6\0\131\0\7\0\5\0\2\0\42\0\1\0"+
    "\1\0\5\0\106\0\12\0\37\0\1\0\14\0\4\0\14\0\12\0"+
    "\12\0\36\0\2\0\5\0\13\0\54\0\4\0\32\0\6\0\12\0"+
    "\46\0\27\0\5\0\4\0\65\0\12\0\1\0\35\0\2\0\13\0"+
    "\6\0\12\0\15\0\1\0\10\0\16\0\1\0\20\0\61\0\5\0"+
    "\57\0\21\0\10\0\3\0\12\0\21\0\11\0\14\0\3\0\36\0"+
    "\15\0\2\0\12\0\54\0\16\0\14\0\44\0\24\0\10\0\12\0"+
    "\3\0\3\0\12\0\44\0\2\0\11\0\7\0\53\0\2\0\3\0"+
    "\20\0\3\0\1\0\25\0\4\0\1\0\6\0\1\0\2\0\3\0"+
    "\1\0\5\0\300\0\100\0\u0116\0\2\0\6\0\2\0\46\0\2\0"+
    "\6\0\2\0\10\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\37\0\2\0\65\0\1\0\7\0\1\0\1\0\3\0\3\0\1\0"+
    "\7\0\3\0\4\0\2\0\6\0\4\0\15\0\5\0\3\0\1\0"+
    "\7\0\16\0\5\0\30\0\1\0\1\0\5\0\20\0\2\0\23\0"+
    "\1\0\13\0\5\0\1\0\12\0\1\0\1\0\15\0\1\0\20\0"+
    "\15\0\3\0\41\0\17\0\15\0\4\0\1\0\3\0\14\0\21\0"+
    "\1\0\4\0\1\0\2\0\12\0\1\0\1\0\3\0\5\0\6\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\4\0\1\0\13\0\2\0"+
    "\4\0\5\0\5\0\4\0\1\0\21\0\51\0\u0a77\0\345\0\6\0"+
    "\4\0\3\0\2\0\14\0\46\0\1\0\1\0\5\0\1\0\2\0"+
    "\70\0\7\0\1\0\17\0\1\0\27\0\11\0\7\0\1\0\7\0"+
    "\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0"+
    "\1\0\7\0\1\0\40\0\57\0\1\0\u01d5\0\3\0\31\0\11\0"+
    "\6\0\1\0\5\0\2\0\5\0\4\0\126\0\2\0\2\0\2\0"+
    "\3\0\1\0\132\0\1\0\4\0\5\0\53\0\1\0\136\0\21\0"+
    "\40\0\60\0\20\0\u0200\0\u19c0\0\100\0\u568d\0\103\0\56\0\2\0"+
    "\u010d\0\3\0\20\0\12\0\2\0\24\0\57\0\1\0\4\0\12\0"+
    "\1\0\37\0\2\0\120\0\2\0\45\0\11\0\2\0\147\0\2\0"+
    "\100\0\5\0\2\0\1\0\1\0\1\0\5\0\30\0\20\0\1\0"+
    "\3\0\1\0\4\0\1\0\27\0\5\0\4\0\1\0\13\0\1\0"+
    "\7\0\64\0\14\0\2\0\62\0\22\0\12\0\12\0\6\0\22\0"+
    "\6\0\3\0\1\0\1\0\2\0\13\0\34\0\10\0\2\0\27\0"+
    "\15\0\14\0\35\0\3\0\4\0\57\0\16\0\16\0\1\0\12\0"+
    "\6\0\5\0\1\0\12\0\12\0\5\0\1\0\51\0\16\0\11\0"+
    "\3\0\1\0\10\0\2\0\2\0\12\0\6\0\27\0\3\0\1\0"+
    "\3\0\62\0\1\0\1\0\3\0\2\0\2\0\5\0\2\0\1\0"+
    "\1\0\1\0\30\0\3\0\2\0\13\0\5\0\2\0\3\0\2\0"+
    "\12\0\6\0\2\0\6\0\2\0\6\0\11\0\7\0\1\0\7\0"+
    "\1\0\53\0\1\0\16\0\6\0\163\0\10\0\1\0\2\0\2\0"+
    "\12\0\6\0\u2ba4\0\14\0\27\0\4\0\61\0\u2104\0\u016e\0\2\0"+
    "\152\0\46\0\7\0\14\0\5\0\5\0\1\0\1\0\12\0\1\0"+
    "\15\0\1\0\5\0\1\0\1\0\1\0\2\0\1\0\2\0\1\0"+
    "\154\0\41\0\u016b\0\22\0\100\0\2\0\66\0\50\0\15\0\3\0"+
    "\20\0\20\0\20\0\3\0\2\0\30\0\3\0\31\0\1\0\6\0"+
    "\5\0\1\0\207\0\2\0\1\0\4\0\1\0\13\0\12\0\7\0"+
    "\32\0\4\0\1\0\1\0\32\0\13\0\131\0\3\0\6\0\2\0"+
    "\6\0\2\0\6\0\2\0\3\0\3\0\2\0\3\0\2\0\22\0"+
    "\3\0\4\0\14\0\1\0\32\0\1\0\23\0\1\0\2\0\1\0"+
    "\17\0\2\0\16\0\42\0\173\0\105\0\65\0\210\0\1\0\202\0"+
    "\35\0\3\0\61\0\17\0\1\0\37\0\40\0\15\0\36\0\5\0"+
    "\46\0\5\0\5\0\36\0\2\0\44\0\4\0\10\0\1\0\5\0"+
    "\52\0\236\0\2\0\12\0\6\0\44\0\4\0\44\0\4\0\50\0"+
    "\10\0\64\0\14\0\13\0\1\0\17\0\1\0\7\0\1\0\2\0"+
    "\1\0\13\0\1\0\17\0\1\0\7\0\1\0\2\0\103\0\u0137\0"+
    "\11\0\26\0\12\0\10\0\30\0\6\0\1\0\52\0\1\0\11\0"+
    "\105\0\6\0\2\0\1\0\1\0\54\0\1\0\2\0\3\0\1\0"+
    "\2\0\27\0\12\0\27\0\11\0\37\0\101\0\23\0\1\0\2\0"+
    "\12\0\26\0\12\0\32\0\106\0\70\0\6\0\2\0\100\0\1\0"+
    "\3\0\1\0\2\0\5\0\4\0\4\0\1\0\3\0\1\0\35\0"+
    "\2\0\3\0\4\0\1\0\40\0\35\0\3\0\35\0\43\0\10\0"+
    "\1\0\34\0\2\0\31\0\66\0\12\0\26\0\12\0\23\0\15\0"+
    "\22\0\156\0\111\0\67\0\63\0\15\0\63\0\15\0\44\0\4\0"+
    "\10\0\12\0\u0146\0\52\0\1\0\2\0\3\0\2\0\116\0\35\0"+
    "\12\0\1\0\10\0\26\0\13\0\37\0\22\0\4\0\52\0\25\0"+
    "\33\0\27\0\11\0\3\0\65\0\17\0\37\0\13\0\2\0\2\0"+
    "\1\0\11\0\4\0\55\0\13\0\2\0\1\0\4\0\1\0\12\0"+
    "\1\0\2\0\31\0\7\0\12\0\6\0\3\0\44\0\16\0\1\0"+
    "\12\0\4\0\1\0\2\0\1\0\10\0\43\0\1\0\2\0\1\0"+
    "\11\0\3\0\60\0\16\0\4\0\4\0\4\0\1\0\14\0\1\0"+
    "\1\0\1\0\43\0\22\0\1\0\31\0\14\0\6\0\1\0\101\0"+
    "\7\0\1\0\1\0\1\0\4\0\1\0\17\0\1\0\12\0\7\0"+
    "\57\0\14\0\5\0\12\0\6\0\4\0\1\0\10\0\2\0\2\0"+
    "\2\0\26\0\1\0\7\0\1\0\2\0\1\0\5\0\1\0\2\0"+
    "\1\0\7\0\2\0\2\0\2\0\3\0\2\0\1\0\6\0\1\0"+
    "\5\0\5\0\2\0\2\0\7\0\3\0\5\0\213\0\65\0\22\0"+
    "\4\0\5\0\12\0\4\0\1\0\3\0\36\0\60\0\24\0\2\0"+
    "\1\0\1\0\10\0\12\0\246\0\57\0\7\0\2\0\11\0\27\0"+
    "\4\0\2\0\42\0\60\0\21\0\3\0\1\0\13\0\12\0\46\0"+
    "\53\0\15\0\1\0\7\0\12\0\66\0\33\0\2\0\17\0\4\0"+
    "\12\0\6\0\7\0\271\0\54\0\17\0\145\0\100\0\12\0\25\0"+
    "\10\0\2\0\1\0\2\0\10\0\1\0\2\0\1\0\30\0\6\0"+
    "\1\0\2\0\2\0\4\0\1\0\1\0\1\0\2\0\14\0\12\0"+
    "\106\0\10\0\2\0\47\0\7\0\2\0\7\0\1\0\1\0\1\0"+
    "\1\0\33\0\1\0\12\0\50\0\7\0\1\0\4\0\10\0\1\0"+
    "\10\0\1\0\13\0\56\0\20\0\3\0\1\0\22\0\111\0\u0107\0"+
    "\11\0\1\0\45\0\10\0\1\0\10\0\1\0\17\0\12\0\30\0"+
    "\36\0\2\0\26\0\1\0\16\0\111\0\7\0\1\0\2\0\1\0"+
    "\46\0\6\0\3\0\1\0\1\0\2\0\1\0\7\0\1\0\1\0"+
    "\10\0\12\0\6\0\6\0\1\0\2\0\1\0\40\0\5\0\1\0"+
    "\2\0\1\0\5\0\1\0\7\0\12\0\u0136\0\23\0\4\0\271\0"+
    "\1\0\54\0\4\0\37\0\u039a\0\146\0\157\0\21\0\304\0\u0a4c\0"+
    "\141\0\17\0\u042f\0\1\0\11\0\u0fc7\0\u0247\0\u21b9\0\u0239\0\7\0"+
    "\37\0\1\0\12\0\6\0\117\0\1\0\12\0\6\0\36\0\2\0"+
    "\5\0\13\0\60\0\7\0\11\0\4\0\14\0\12\0\11\0\25\0"+
    "\5\0\23\0\u02b0\0\100\0\200\0\113\0\4\0\1\0\1\0\67\0"+
    "\7\0\4\0\15\0\100\0\2\0\1\0\1\0\1\0\13\0\2\0"+
    "\16\0\u17f8\0\10\0\u04d6\0\52\0\11\0\u22e7\0\4\0\1\0\7\0"+
    "\1\0\2\0\1\0\u0123\0\55\0\3\0\21\0\4\0\10\0\u018c\0"+
    "\u0904\0\153\0\5\0\15\0\3\0\11\0\7\0\12\0\3\0\2\0"+
    "\1\0\4\0\u125c\0\56\0\2\0\27\0\u021e\0\5\0\3\0\26\0"+
    "\2\0\7\0\36\0\4\0\224\0\3\0\u01bb\0\125\0\1\0\107\0"+
    "\1\0\2\0\2\0\1\0\2\0\2\0\2\0\4\0\1\0\14\0"+
    "\1\0\1\0\1\0\7\0\1\0\101\0\1\0\4\0\2\0\10\0"+
    "\1\0\7\0\1\0\34\0\1\0\4\0\1\0\5\0\1\0\1\0"+
    "\3\0\7\0\1\0\u0154\0\2\0\31\0\1\0\31\0\1\0\37\0"+
    "\1\0\31\0\1\0\37\0\1\0\31\0\1\0\37\0\1\0\31\0"+
    "\1\0\37\0\1\0\31\0\1\0\10\0\2\0\62\0\u0200\0\67\0"+
    "\4\0\62\0\10\0\1\0\16\0\1\0\26\0\5\0\1\0\17\0"+
    "\u0450\0\37\0\341\0\7\0\1\0\21\0\2\0\7\0\1\0\2\0"+
    "\1\0\5\0\325\0\55\0\3\0\7\0\7\0\2\0\12\0\4\0"+
    "\1\0\u0141\0\36\0\1\0\21\0\54\0\16\0\5\0\1\0\u04e0\0"+
    "\7\0\1\0\4\0\1\0\2\0\1\0\17\0\1\0\305\0\13\0"+
    "\7\0\51\0\104\0\7\0\1\0\4\0\12\0\u0356\0\1\0\u014f\0"+
    "\4\0\1\0\33\0\1\0\2\0\1\0\1\0\2\0\1\0\1\0"+
    "\12\0\1\0\4\0\1\0\1\0\1\0\1\0\6\0\1\0\4\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\3\0\1\0\2\0\1\0"+
    "\1\0\2\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\2\0\1\0\1\0\2\0\4\0\1\0\7\0\1\0"+
    "\4\0\1\0\4\0\1\0\1\0\1\0\12\0\1\0\21\0\5\0"+
    "\3\0\1\0\5\0\1\0\21\0\u0d34\0\12\0\u0406\0\ua6e0\0\40\0"+
    "\u1039\0\7\0\336\0\2\0\u1682\0\16\0\u1d31\0\u0c1f\0\u021e\0\u05e2\0"+
    "\u134b\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uecc0\0"+
    "\1\0\36\0\140\0\200\0\360\0\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\2\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\25\1"+
    "\1\16\1\3\1\4\1\5\1\6\2\16\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\25\0\1\32\3\0\1\33\1\34\1\35\2\0\1\36"+
    "\20\0\1\37\1\0\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\40\1\41\1\42\1\43\4\0"+
    "\1\44\13\0\1\45\14\0\1\46\7\0\1\47\11\0"+
    "\1\50\1\0\1\51\1\37\5\0\1\52\1\0\1\53"+
    "\1\0\1\54\1\55\4\0\1\56\1\0\1\57\2\0"+
    "\1\60\5\0\1\61\2\0\1\62\12\0\1\63\3\0"+
    "\1\64\1\65\1\0\1\66\1\0\1\67\1\0\1\70"+
    "\1\0\1\71\6\0\1\72\1\0\1\73\1\74\1\75"+
    "\1\76\13\0\1\77\1\100\1\0\1\101\1\102\1\103"+
    "\1\104\1\105\1\0\1\106\1\107\3\0\1\110\1\0"+
    "\1\111\7\0\1\112\11\0\1\113\1\114\1\115\2\0"+
    "\1\116\3\0\1\117\1\0\1\120\1\121\1\122\1\0"+
    "\1\123\1\124\1\0\1\125\1\0\1\126\2\0\1\127"+
    "\1\130\1\131\1\132\1\133\1\0\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\122\0\173\0\244\0\315\0\366"+
    "\0\u011f\0\u0148\0\122\0\122\0\122\0\122\0\122\0\122"+
    "\0\122\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267"+
    "\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386\0\u03af"+
    "\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5\0\u04ce\0\u04f7"+
    "\0\u0520\0\u0549\0\u0572\0\u059b\0\u05c4\0\u04ce\0\u04ce\0\u04ce"+
    "\0\u04ce\0\u04ce\0\u04ce\0\u04ce\0\122\0\u05ed\0\122\0\122"+
    "\0\122\0\122\0\122\0\122\0\122\0\122\0\u0616\0\u063f"+
    "\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787"+
    "\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf"+
    "\0\u08f8\0\u0921\0\u094a\0\u0973\0\122\0\u099c\0\u09c5\0\u09ee"+
    "\0\122\0\u0a17\0\122\0\u0a40\0\u0a69\0\122\0\u0a92\0\u0abb"+
    "\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\u0c03"+
    "\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u04a5\0\122\0\u0cf9"+
    "\0\u04ce\0\u04ce\0\u04ce\0\u04ce\0\u04ce\0\u04ce\0\u04ce\0\u04ce"+
    "\0\122\0\122\0\122\0\122\0\u0d22\0\u0d4b\0\u0d74\0\u0d9d"+
    "\0\122\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc"+
    "\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\122\0\u0f89\0\u0fb2\0\u0fdb"+
    "\0\u1004\0\u102d\0\u1056\0\u107f\0\u10a8\0\u10d1\0\u10fa\0\u1123"+
    "\0\u114c\0\122\0\u1175\0\u119e\0\u11c7\0\u11f0\0\u1219\0\u1242"+
    "\0\u126b\0\122\0\u1294\0\u12bd\0\u12e6\0\u130f\0\u1338\0\u1361"+
    "\0\u138a\0\u13b3\0\u13dc\0\122\0\u1405\0\122\0\u04a5\0\u142e"+
    "\0\u1457\0\u1480\0\u14a9\0\u14d2\0\122\0\u14fb\0\122\0\u1524"+
    "\0\122\0\122\0\u154d\0\u1576\0\u159f\0\u15c8\0\122\0\u15f1"+
    "\0\122\0\u161a\0\u1643\0\122\0\u166c\0\u1695\0\u16be\0\u16e7"+
    "\0\u1710\0\122\0\u1739\0\u1762\0\122\0\u178b\0\u17b4\0\u17dd"+
    "\0\u1806\0\u182f\0\u1858\0\u1881\0\u18aa\0\u18d3\0\u18fc\0\122"+
    "\0\u1925\0\u194e\0\u1977\0\122\0\122\0\u19a0\0\122\0\u19c9"+
    "\0\122\0\u19f2\0\122\0\u1a1b\0\122\0\u1a44\0\u1a6d\0\u1a96"+
    "\0\u1abf\0\u1ae8\0\u1b11\0\122\0\u1b3a\0\122\0\122\0\122"+
    "\0\122\0\u1b63\0\u1b8c\0\u1bb5\0\u1bde\0\u1c07\0\u1c30\0\u1c59"+
    "\0\u1c82\0\u1cab\0\u1cd4\0\u1cfd\0\122\0\u1d26\0\u1d4f\0\122"+
    "\0\122\0\122\0\122\0\122\0\u1d78\0\122\0\122\0\u1da1"+
    "\0\u1dca\0\u1df3\0\122\0\u1e1c\0\122\0\u1e45\0\u1e6e\0\u1e97"+
    "\0\u1ec0\0\u1ee9\0\u1f12\0\u1f3b\0\122\0\u1f64\0\u1f8d\0\u1fb6"+
    "\0\u1fdf\0\u2008\0\u2031\0\u205a\0\u2083\0\u20ac\0\122\0\122"+
    "\0\122\0\u20d5\0\u20fe\0\122\0\u2127\0\u2150\0\u2179\0\122"+
    "\0\u21a2\0\122\0\122\0\122\0\u21cb\0\122\0\122\0\u21f4"+
    "\0\122\0\u221d\0\122\0\u2246\0\u226f\0\122\0\122\0\122"+
    "\0\122\0\122\0\u2298\0\122";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\3\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\3\1\36\1\37\1\40"+
    "\1\3\1\41\1\42\1\43\1\44\1\45\1\46\1\3"+
    "\1\47\1\3\1\4\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\27\47\1\65\1\66\54\0\1\67\51\0\1\70\50\0"+
    "\1\71\1\72\47\0\1\73\1\0\1\74\51\0\1\75"+
    "\51\0\1\76\61\0\1\77\3\0\1\100\15\0\1\101"+
    "\27\0\1\102\1\0\1\103\3\0\1\104\4\0\1\105"+
    "\4\0\1\106\1\107\36\0\1\110\1\0\1\111\5\0"+
    "\1\112\31\0\1\113\51\0\1\114\4\0\1\115\11\0"+
    "\1\116\31\0\1\117\45\0\1\120\10\0\1\121\1\122"+
    "\52\0\1\123\50\0\1\124\47\0\1\125\10\0\1\126"+
    "\26\0\1\127\12\0\1\130\34\0\1\131\11\0\1\132"+
    "\3\0\1\133\1\134\32\0\1\135\7\0\1\136\7\0"+
    "\1\137\26\0\1\140\11\0\1\141\1\0\1\142\1\143"+
    "\33\0\1\144\13\0\1\145\50\0\1\146\44\0\1\147"+
    "\3\0\1\150\34\0\1\151\2\0\1\152\45\0\1\153"+
    "\11\0\1\154\40\0\1\155\26\0\47\156\1\157\1\160"+
    "\1\47\2\0\44\47\2\0\1\47\2\0\1\161\43\47"+
    "\2\0\1\47\2\0\1\47\1\162\42\47\2\0\1\47"+
    "\2\0\1\47\1\163\1\164\41\47\2\0\1\47\2\0"+
    "\1\47\1\165\1\47\1\166\40\47\2\0\1\47\2\0"+
    "\4\47\1\167\37\47\2\0\1\47\2\0\5\47\1\170"+
    "\36\47\25\0\1\171\1\172\6\0\1\173\13\0\1\174"+
    "\22\0\1\175\20\0\1\176\27\0\1\177\47\0\1\200"+
    "\54\0\1\201\44\0\1\202\62\0\1\203\62\0\1\204"+
    "\37\0\1\205\51\0\1\206\35\0\1\207\64\0\1\210"+
    "\37\0\1\211\17\0\1\212\30\0\1\213\61\0\1\214"+
    "\4\0\1\215\31\0\1\216\10\0\1\217\60\0\1\220"+
    "\26\0\1\221\47\0\1\222\2\0\1\223\44\0\1\224"+
    "\63\0\1\225\11\0\1\226\41\0\1\227\37\0\1\230"+
    "\45\0\1\231\71\0\1\232\36\0\1\233\43\0\1\234"+
    "\70\0\1\235\43\0\1\236\44\0\1\237\44\0\1\240"+
    "\1\0\1\241\42\0\1\242\60\0\1\243\50\0\1\244"+
    "\51\0\1\245\55\0\1\246\31\0\1\247\62\0\1\250"+
    "\40\0\1\251\47\0\1\252\61\0\1\253\37\0\1\254"+
    "\61\0\1\255\40\0\1\256\24\0\47\156\1\257\1\160"+
    "\22\0\1\260\61\0\1\261\41\0\1\262\60\0\1\263"+
    "\40\0\1\264\67\0\1\265\27\0\1\266\55\0\1\267"+
    "\45\0\1\270\46\0\1\271\66\0\1\272\32\0\1\273"+
    "\60\0\1\274\46\0\1\275\4\0\1\276\35\0\1\277"+
    "\60\0\1\300\37\0\1\301\51\0\1\302\46\0\1\303"+
    "\52\0\1\304\55\0\1\305\42\0\1\306\50\0\1\307"+
    "\2\0\1\310\44\0\1\311\52\0\1\312\51\0\1\313"+
    "\50\0\1\314\56\0\1\315\41\0\1\316\57\0\1\317"+
    "\1\320\36\0\1\321\1\0\1\322\46\0\1\323\54\0"+
    "\1\324\45\0\1\325\47\0\1\326\57\0\1\327\54\0"+
    "\1\330\51\0\1\331\45\0\1\332\50\0\1\333\47\0"+
    "\1\334\44\0\1\335\57\0\1\336\53\0\1\337\35\0"+
    "\1\340\54\0\1\341\44\0\1\342\51\0\1\343\60\0"+
    "\1\344\37\0\1\345\54\0\1\346\44\0\1\347\7\0"+
    "\1\350\40\0\1\351\50\0\1\352\50\0\1\353\70\0"+
    "\1\354\43\0\1\355\40\0\1\356\52\0\1\357\41\0"+
    "\1\360\53\0\1\361\60\0\1\362\37\0\1\363\45\0"+
    "\1\364\50\0\1\365\53\0\1\366\47\0\1\367\51\0"+
    "\1\370\62\0\1\371\36\0\1\372\65\0\1\373\42\0"+
    "\1\374\40\0\1\375\57\0\1\376\43\0\1\377\57\0"+
    "\1\u0100\53\0\1\u0101\34\0\1\u0102\52\0\1\u0103\50\0"+
    "\1\u0104\44\0\1\u0105\57\0\1\u0106\51\0\1\u0107\53\0"+
    "\1\u0108\36\0\1\u0109\14\0\1\u010a\36\0\1\u010b\56\0"+
    "\1\u010c\51\0\1\u010d\37\0\1\u010e\61\0\1\u010f\51\0"+
    "\1\u0110\37\0\1\u0111\51\0\1\u0112\63\0\1\u0113\51\0"+
    "\1\u0114\34\0\1\u0115\55\0\1\u0116\42\0\1\u0117\61\0"+
    "\1\u0118\37\0\1\u0119\56\0\1\u011a\53\0\1\u011b\43\0"+
    "\1\u011c\41\0\1\u011d\64\0\1\u011e\35\0\1\u011f\72\0"+
    "\1\u0120\44\0\1\u0121\46\0\1\u0122\33\0\1\u0123\72\0"+
    "\1\u0124\40\0\1\u0125\36\0\1\u0126\52\0\1\u0127\52\0"+
    "\1\u0128\46\0\1\u0129\55\0\1\u012a\63\0\1\u012b\50\0"+
    "\1\u012c\40\0\1\u012d\42\0\1\u012e\55\0\1\u012f\51\0"+
    "\1\u0130\40\0\1\u0131\61\0\1\u0132\40\0\1\u0133\54\0"+
    "\1\u0134\54\0\1\u0135\53\0\1\u0136\45\0\1\u0137\50\0"+
    "\1\u0138\41\0\1\u0139\46\0\1\u013a\52\0\1\u013b\45\0"+
    "\1\u013c\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8897];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\6\1\7\11\43\1\1\11\1\1\10\11"+
    "\1\1\25\0\1\11\3\0\1\11\1\1\1\11\2\0"+
    "\1\11\20\0\1\11\1\0\10\1\4\11\4\0\1\11"+
    "\13\0\1\11\14\0\1\11\7\0\1\11\11\0\1\11"+
    "\1\0\1\11\1\1\5\0\1\11\1\0\1\11\1\0"+
    "\2\11\4\0\1\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\2\0\1\11\12\0\1\11\3\0\2\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\6\0"+
    "\1\11\1\0\4\11\13\0\1\11\1\1\1\0\5\11"+
    "\1\0\2\11\3\0\1\11\1\0\1\11\7\0\1\11"+
    "\11\0\3\11\2\0\1\11\3\0\1\11\1\0\3\11"+
    "\1\0\2\11\1\0\1\11\1\0\1\11\2\0\5\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3800) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <"+
                                                    yytext()+">");
            }
          case 93: break;
          case 2: 
            { return symbol(DartOperators.LINEABREAK.value, yytext());
            }
          case 94: break;
          case 3: 
            { return symbol(DartOperators.POW.value, yytext());
            }
          case 95: break;
          case 4: 
            { return symbol(DartOperators.EQ.value, yytext());
            }
          case 96: break;
          case 5: 
            { return symbol(DartOperators.PLUS.value, yytext());
            }
          case 97: break;
          case 6: 
            { return symbol(DartOperators.MINUS.value, yytext());
            }
          case 98: break;
          case 7: 
            { return symbol(DartOperators.RESID.value, yytext());
            }
          case 99: break;
          case 8: 
            { return symbol(DartOperators.SPACE.value, yytext());
            }
          case 100: break;
          case 9: 
            { return symbol(DartOperators.OPENCODE.value, yytext());
            }
          case 101: break;
          case 10: 
            { return symbol(DartOperators.CLOSECODE.value, yytext());
            }
          case 102: break;
          case 11: 
            { return symbol(DartOperators.OPENPARENT.value, yytext());
            }
          case 103: break;
          case 12: 
            { return symbol(DartOperators.CLOSEPARENT.value, yytext());
            }
          case 104: break;
          case 13: 
            { return symbol(DartOperators.SEMICOLON.value, yytext());
            }
          case 105: break;
          case 14: 
            { string.append( yytext() );
            }
          case 106: break;
          case 15: 
            { yybegin(YYINITIAL); 
                                   return symbol(DartOperators.STRINGLITERAL.value, 
                                   string.toString());
            }
          case 107: break;
          case 16: 
            { string.append('\\');
            }
          case 108: break;
          case 17: 
            { return symbol(DartOperators.POWPOW.value, yytext());
            }
          case 109: break;
          case 18: 
            { return symbol(DartOperators.EQEQ.value, yytext());
            }
          case 110: break;
          case 19: 
            { return symbol(DartOperators.PLUSEQ.value, yytext());
            }
          case 111: break;
          case 20: 
            { return symbol(DartOperators.PLUSPLUS.value, yytext());
            }
          case 112: break;
          case 21: 
            { return symbol(DartOperators.MINUSEQ.value, yytext());
            }
          case 113: break;
          case 22: 
            { return symbol(DartOperators.MINUSMINUS.value, yytext());
            }
          case 114: break;
          case 23: 
            { return symbol(DartOperators.AND.value, yytext());
            }
          case 115: break;
          case 24: 
            { return symbol(DartOperators.OR.value, yytext());
            }
          case 116: break;
          case 25: 
            { return symbol(DartBuiltInWords.AS.value, yytext());
            }
          case 117: break;
          case 26: 
            { return symbol(DartReservedWords.ON.value, yytext());
            }
          case 118: break;
          case 27: 
            { return symbol(DartReservedWords.IS.value, yytext());
            }
          case 119: break;
          case 28: 
            { return symbol(DartReservedWords.IN.value, yytext());
            }
          case 120: break;
          case 29: 
            { return symbol(DartReservedWords.IF.value, yytext());
            }
          case 121: break;
          case 30: 
            { return symbol(DartReservedWords.DO.value, yytext());
            }
          case 122: break;
          case 31: 
            { return symbol(DartOperators.STRINGLITERAL.value, yytext());
            }
          case 123: break;
          case 32: 
            { string.append('\r');
            }
          case 124: break;
          case 33: 
            { string.append('\t');
            }
          case 125: break;
          case 34: 
            { string.append('\n');
            }
          case 126: break;
          case 35: 
            { string.append('\"');
            }
          case 127: break;
          case 36: 
            { return symbol(DartBuiltInWords.SET.value, yytext());
            }
          case 128: break;
          case 37: 
            { return symbol(DartReservedWords.TRY.value, yytext());
            }
          case 129: break;
          case 38: 
            { return symbol(DartReservedWords.NEW.value, yytext());
            }
          case 130: break;
          case 39: 
            { return symbol(DartReservedWords.FOR.value, yytext());
            }
          case 131: break;
          case 40: 
            { return symbol(DartReservedWords.VAR.value, yytext());
            }
          case 132: break;
          case 41: 
            { return symbol(DartBuiltInWords.GET.value, yytext());
            }
          case 133: break;
          case 42: 
            { return symbol(DartReservedWords.SHOW.value, yytext());
            }
          case 134: break;
          case 43: 
            { return symbol(DartReservedWords.SYNC.value, yytext());
            }
          case 135: break;
          case 44: 
            { return symbol(DartReservedWords.ELSE.value, yytext());
            }
          case 136: break;
          case 45: 
            { return symbol(DartReservedWords.ENUM.value, yytext());
            }
          case 137: break;
          case 46: 
            { return symbol(DartReservedWords.TRUE.value, yytext());
            }
          case 138: break;
          case 47: 
            { return symbol(DartReservedWords.THIS.value, yytext());
            }
          case 139: break;
          case 48: 
            { return symbol(DartReservedWords.CASE.value, yytext());
            }
          case 140: break;
          case 49: 
            { return symbol(DartReservedWords.HIDE.value, yytext());
            }
          case 141: break;
          case 50: 
            { return symbol(DartReservedWords.NULL.value, yytext());
            }
          case 142: break;
          case 51: 
            { return symbol(DartReservedWords.MAIN.value, yytext());
            }
          case 143: break;
          case 52: 
            { return symbol(DartReservedWords.WITH.value, yytext());
            }
          case 144: break;
          case 53: 
            { return symbol(DartBuiltInWords.PART.value, yytext());
            }
          case 145: break;
          case 54: 
            { return symbol(DartReservedWords.VOID.value, yytext());
            }
          case 146: break;
          case 55: 
            { return symbol(DartReservedWords.ASYNC.value, yytext());
            }
          case 147: break;
          case 56: 
            { return symbol(DartReservedWords.AWAIT.value, yytext());
            }
          case 148: break;
          case 57: 
            { return symbol(DartReservedWords.SUPER.value, yytext());
            }
          case 149: break;
          case 58: 
            { return symbol(DartReservedWords.THROW.value, yytext());
            }
          case 150: break;
          case 59: 
            { return symbol(DartReservedWords.BREAK.value, yytext());
            }
          case 151: break;
          case 60: 
            { return symbol(DartReservedWords.CATCH.value, yytext());
            }
          case 152: break;
          case 61: 
            { return symbol(DartReservedWords.CLASS.value, yytext());
            }
          case 153: break;
          case 62: 
            { return symbol(DartReservedWords.CONST.value, yytext());
            }
          case 154: break;
          case 63: 
            { return symbol(DartReservedWords.FALSE.value, yytext());
            }
          case 155: break;
          case 64: 
            { return symbol(DartReservedWords.FINAL.value, yytext());
            }
          case 156: break;
          case 65: 
            { return symbol(DartBuiltInWords.MIXIN.value, yytext());
            }
          case 157: break;
          case 66: 
            { return symbol(DartReservedWords.YIELD.value, yytext());
            }
          case 158: break;
          case 67: 
            { return symbol(DartReservedWords.WHILE.value, yytext());
            }
          case 159: break;
          case 68: 
            { return symbol(DartReservedWords.PRINT.value, yytext());
            }
          case 160: break;
          case 69: 
            { return symbol(DartReservedWords.ASSERT.value, yytext());
            }
          case 161: break;
          case 70: 
            { return symbol(DartBuiltInWords.STATIC.value, yytext());
            }
          case 162: break;
          case 71: 
            { return symbol(DartReservedWords.SWITCH.value, yytext());
            }
          case 163: break;
          case 72: 
            { return symbol(DartBuiltInWords.EXPORT.value, yytext());
            }
          case 164: break;
          case 73: 
            { return symbol(DartReservedWords.RETURN.value, yytext());
            }
          case 165: break;
          case 74: 
            { return symbol(DartBuiltInWords.IMPORT.value, yytext());
            }
          case 166: break;
          case 75: 
            { return symbol(DartReservedWords.EXTENDS.value, yytext());
            }
          case 167: break;
          case 76: 
            { return symbol(DartReservedWords.RETHROW.value, yytext());
            }
          case 168: break;
          case 77: 
            { return symbol(DartBuiltInWords.TYPEDEF.value, yytext());
            }
          case 169: break;
          case 78: 
            { return symbol(DartBuiltInWords.LIBRARY.value, yytext());
            }
          case 170: break;
          case 79: 
            { return symbol(DartReservedWords.DEFAULT.value, yytext());
            }
          case 171: break;
          case 80: 
            { return symbol(DartBuiltInWords.DYNAMIC.value, yytext());
            }
          case 172: break;
          case 81: 
            { return symbol(DartBuiltInWords.FACTORY.value, yytext());
            }
          case 173: break;
          case 82: 
            { return symbol(DartReservedWords.FINALLY.value, yytext());
            }
          case 174: break;
          case 83: 
            { return symbol(DartBuiltInWords.ABSTRACT.value, yytext());
            }
          case 175: break;
          case 84: 
            { return symbol(DartBuiltInWords.EXTERNAL.value, yytext());
            }
          case 176: break;
          case 85: 
            { return symbol(DartReservedWords.CONTINUE.value, yytext());
            }
          case 177: break;
          case 86: 
            { return symbol(DartBuiltInWords.OPERATOR.value, yytext());
            }
          case 178: break;
          case 87: 
            { return symbol(DartBuiltInWords.DEFERRED.value, yytext());
            }
          case 179: break;
          case 88: 
            { return symbol(DartBuiltInWords.FUNCTION.value, yytext());
            }
          case 180: break;
          case 89: 
            { return symbol(DartBuiltInWords.EXTENSION.value, yytext());
            }
          case 181: break;
          case 90: 
            { return symbol(DartBuiltInWords.COVARIANT.value, yytext());
            }
          case 182: break;
          case 91: 
            { return symbol(DartBuiltInWords.INTERFACE.value, yytext());
            }
          case 183: break;
          case 92: 
            { return symbol(DartBuiltInWords.IMPLEMENTS.value, yytext());
            }
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
