/* The following code was generated by JFlex 1.6.1 */

/* JFlex example: partial Java language lexer specification */
package lexico;


import java_cup.runtime.*;
import lexico.sym;
/**
 * Dart Lexer
 */

class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\6\1\1\2\0\1\1\16\5\4\0\1\6\1\11\1\46"+
    "\1\0\1\4\1\17\1\15\1\47\1\22\1\23\1\3\1\13\1\27"+
    "\1\14\1\0\1\2\1\7\11\10\1\0\1\24\1\11\1\12\1\11"+
    "\2\0\22\4\1\50\7\4\1\25\1\62\1\26\1\0\1\4\1\0"+
    "\1\35\1\45\1\53\1\43\1\33\1\34\1\51\1\54\1\41\1\4"+
    "\1\52\1\36\1\55\1\42\1\44\1\61\1\4\1\31\1\37\1\30"+
    "\1\32\1\40\1\60\1\56\1\57\1\4\1\20\1\16\1\21\1\0"+
    "\41\5\2\0\4\4\4\0\1\4\2\0\1\5\7\0\1\4\4\0"+
    "\1\4\5\0\27\4\1\0\37\4\1\0\u01ca\4\4\0\14\4\16\0"+
    "\5\4\7\0\1\4\1\0\1\4\21\0\160\5\5\4\1\0\2\4"+
    "\2\0\4\4\1\0\1\4\6\0\1\4\1\0\3\4\1\0\1\4"+
    "\1\0\24\4\1\0\123\4\1\0\213\4\1\0\5\5\2\0\246\4"+
    "\1\0\46\4\2\0\1\4\6\0\51\4\6\0\1\4\1\0\55\5"+
    "\1\0\1\5\1\0\2\5\1\0\2\5\1\0\1\5\10\0\33\4"+
    "\4\0\4\4\15\0\6\5\5\0\1\4\4\0\13\5\1\0\1\5"+
    "\3\0\53\4\37\5\4\0\2\4\1\5\143\4\1\0\1\4\10\5"+
    "\1\0\6\5\2\4\2\5\1\0\4\5\2\4\12\5\3\4\2\0"+
    "\1\4\17\0\1\5\1\4\1\5\36\4\33\5\2\0\131\4\13\5"+
    "\1\4\16\0\12\5\41\4\11\5\2\4\4\0\1\4\2\0\1\5"+
    "\30\4\4\5\1\4\11\5\1\4\3\5\1\4\5\5\22\0\31\4"+
    "\3\5\4\0\13\4\65\0\25\4\1\0\22\4\13\0\61\5\66\4"+
    "\3\5\1\4\22\5\1\4\7\5\12\4\2\5\2\0\12\5\1\0"+
    "\20\4\3\5\1\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4"+
    "\1\0\1\4\3\0\4\4\2\0\1\5\1\4\7\5\2\0\2\5"+
    "\2\0\3\5\1\4\10\0\1\5\4\0\2\4\1\0\3\4\2\5"+
    "\2\0\12\5\4\4\7\0\2\4\1\0\1\5\2\0\3\5\1\0"+
    "\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0"+
    "\2\4\1\0\2\4\2\0\1\5\1\0\5\5\4\0\2\5\2\0"+
    "\3\5\3\0\1\5\7\0\4\4\1\0\1\4\7\0\14\5\3\4"+
    "\1\5\13\0\3\5\1\0\11\4\1\0\3\4\1\0\26\4\1\0"+
    "\7\4\1\0\2\4\1\0\5\4\2\0\1\5\1\4\10\5\1\0"+
    "\3\5\1\0\3\5\2\0\1\4\17\0\2\4\2\5\2\0\12\5"+
    "\1\0\1\4\7\0\1\4\6\5\1\0\3\5\1\0\10\4\2\0"+
    "\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0"+
    "\1\5\1\4\7\5\2\0\2\5\2\0\3\5\7\0\3\5\4\0"+
    "\2\4\1\0\3\4\2\5\2\0\12\5\1\0\1\4\20\0\1\5"+
    "\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0"+
    "\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0\14\4\4\0"+
    "\5\5\3\0\3\5\1\0\4\5\2\0\1\4\6\0\1\5\16\0"+
    "\12\5\11\0\1\4\6\0\5\5\10\4\1\0\3\4\1\0\27\4"+
    "\1\0\20\4\3\0\1\4\7\5\1\0\3\5\1\0\4\5\7\0"+
    "\2\5\1\0\3\4\5\0\2\4\2\5\2\0\12\5\20\0\1\4"+
    "\3\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0"+
    "\5\4\2\0\1\5\1\4\7\5\1\0\3\5\1\0\4\5\7\0"+
    "\2\5\7\0\1\4\1\0\2\4\2\5\2\0\12\5\1\0\2\4"+
    "\15\0\4\5\11\4\1\0\3\4\1\0\51\4\2\5\1\4\7\5"+
    "\1\0\3\5\1\0\4\5\1\4\5\0\3\4\1\5\7\0\3\4"+
    "\2\5\2\0\12\5\12\0\6\4\1\0\3\5\1\0\22\4\3\0"+
    "\30\4\1\0\11\4\1\0\1\4\2\0\7\4\3\0\1\5\4\0"+
    "\6\5\1\0\1\5\1\0\10\5\6\0\12\5\2\0\2\5\15\0"+
    "\60\4\1\5\2\4\7\5\4\0\10\4\10\5\1\0\12\5\47\0"+
    "\2\4\1\0\1\4\1\0\5\4\1\0\30\4\1\0\1\4\1\0"+
    "\12\4\1\5\2\4\11\5\1\4\2\0\5\4\1\0\1\4\1\0"+
    "\6\5\2\0\12\5\2\0\4\4\40\0\1\4\27\0\2\5\6\0"+
    "\12\5\13\0\1\5\1\0\1\5\1\0\1\5\4\0\2\5\10\4"+
    "\1\0\44\4\4\0\24\5\1\0\2\5\5\4\13\5\1\0\44\5"+
    "\11\0\1\5\71\0\53\4\24\5\1\4\12\5\6\0\6\4\4\5"+
    "\4\4\3\5\1\4\3\5\2\4\7\5\3\4\4\5\15\4\14\5"+
    "\1\4\17\5\2\0\46\4\1\0\1\4\5\0\1\4\2\0\53\4"+
    "\1\0\u014d\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4"+
    "\2\0\51\4\1\0\4\4\2\0\41\4\1\0\4\4\2\0\7\4"+
    "\1\0\1\4\1\0\4\4\2\0\17\4\1\0\71\4\1\0\4\4"+
    "\2\0\103\4\2\0\3\5\40\0\20\4\20\0\126\4\2\0\6\4"+
    "\3\0\u026c\4\2\0\21\4\1\0\32\4\5\0\113\4\3\0\13\4"+
    "\7\0\15\4\1\0\4\4\3\5\13\0\22\4\3\5\13\0\22\4"+
    "\2\5\14\0\15\4\1\0\3\4\1\0\2\5\14\0\64\4\40\5"+
    "\3\0\1\4\3\0\2\4\1\5\2\0\12\5\41\0\4\5\1\0"+
    "\12\5\6\0\131\4\7\0\5\4\2\5\42\4\1\5\1\4\5\0"+
    "\106\4\12\0\37\4\1\0\14\5\4\0\14\5\12\0\12\5\36\4"+
    "\2\0\5\4\13\0\54\4\4\0\32\4\6\0\12\5\46\0\27\4"+
    "\5\5\4\0\65\4\12\5\1\0\35\5\2\0\13\5\6\0\12\5"+
    "\15\0\1\4\10\0\16\5\1\0\2\5\77\0\5\5\57\4\21\5"+
    "\7\4\4\0\12\5\21\0\11\5\14\0\3\5\36\4\15\5\2\4"+
    "\12\5\54\4\16\5\14\0\44\4\24\5\10\0\12\5\3\0\3\4"+
    "\12\5\44\4\2\0\11\4\7\0\53\4\2\0\3\4\20\0\3\5"+
    "\1\0\25\5\4\4\1\5\6\4\1\5\2\4\3\5\1\4\5\0"+
    "\300\4\72\5\1\0\5\5\u0116\4\2\0\6\4\2\0\46\4\2\0"+
    "\6\4\2\0\10\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\37\4\2\0\65\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0"+
    "\7\4\3\0\4\4\2\0\6\4\4\0\15\4\5\0\3\4\1\0"+
    "\7\4\16\0\5\5\32\0\5\5\20\0\2\4\23\0\1\4\13\0"+
    "\5\5\1\0\12\5\1\0\1\4\15\0\1\4\20\0\15\4\3\0"+
    "\40\4\20\0\15\5\4\0\1\5\3\0\14\5\21\0\1\4\4\0"+
    "\1\4\2\0\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\4\4\1\0\13\4\2\0\4\4\5\0"+
    "\5\4\4\0\1\4\21\0\51\4\u0a77\0\57\4\1\0\57\4\1\0"+
    "\205\4\6\0\4\4\3\5\2\4\14\0\46\4\1\0\1\4\5\0"+
    "\1\4\2\0\70\4\7\0\1\4\17\0\1\5\27\4\11\0\7\4"+
    "\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4"+
    "\1\0\7\4\1\0\7\4\1\0\40\5\57\0\1\4\u01d5\0\3\4"+
    "\31\0\11\4\6\5\1\0\5\4\2\0\5\4\4\0\126\4\2\0"+
    "\2\5\2\0\3\4\1\0\132\4\1\0\4\4\5\0\53\4\1\0"+
    "\136\4\21\0\40\4\60\0\20\4\u0200\0\u19c0\4\100\0\u51fd\4\3\0"+
    "\u048d\4\103\0\56\4\2\0\u010d\4\3\0\20\4\12\5\2\4\24\0"+
    "\57\4\1\5\4\0\12\5\1\0\37\4\2\5\120\4\2\5\45\0"+
    "\11\4\2\0\147\4\2\0\65\4\2\0\11\4\52\0\15\4\1\5"+
    "\3\4\1\5\4\4\1\5\27\4\5\5\4\0\1\5\13\0\1\4"+
    "\7\0\64\4\14\0\2\5\62\4\22\5\12\0\12\5\6\0\22\5"+
    "\6\4\3\0\1\4\1\0\2\4\13\5\34\4\10\5\2\0\27\4"+
    "\15\5\14\0\35\4\3\0\4\5\57\4\16\5\16\0\1\4\12\5"+
    "\6\0\5\4\1\5\12\4\12\5\5\4\1\0\51\4\16\5\11\0"+
    "\3\4\1\5\10\4\2\5\2\0\12\5\6\0\27\4\3\0\1\4"+
    "\3\5\62\4\1\5\1\4\3\5\2\4\2\5\5\4\2\5\1\4"+
    "\1\5\1\4\30\0\3\4\2\0\13\4\5\5\2\0\3\4\2\5"+
    "\12\0\6\4\2\0\6\4\2\0\6\4\11\0\7\4\1\0\7\4"+
    "\1\0\53\4\1\0\16\4\6\0\163\4\10\5\1\0\2\5\2\0"+
    "\12\5\6\0\u2ba4\4\14\0\27\4\4\0\61\4\u2104\0\u016e\4\2\0"+
    "\152\4\46\0\7\4\14\0\5\4\5\0\1\4\1\5\12\4\1\0"+
    "\15\4\1\0\5\4\1\0\1\4\1\0\2\4\1\0\2\4\1\0"+
    "\154\4\41\0\u016b\4\22\0\100\4\2\0\66\4\50\0\15\4\3\0"+
    "\20\5\20\0\20\5\3\0\2\4\30\0\3\4\31\0\1\4\6\0"+
    "\5\4\1\0\207\4\2\0\1\5\4\0\1\4\13\0\12\5\7\0"+
    "\32\4\4\0\1\4\1\0\32\4\13\0\131\4\3\0\6\4\2\0"+
    "\6\4\2\0\6\4\2\0\3\4\3\0\2\4\3\0\2\4\22\0"+
    "\3\5\4\0\14\4\1\0\32\4\1\0\23\4\1\0\2\4\1\0"+
    "\17\4\2\0\16\4\42\0\173\4\105\0\65\4\210\0\1\5\202\0"+
    "\35\4\3\0\61\4\17\0\1\5\37\0\40\4\15\0\36\4\5\0"+
    "\46\4\5\5\5\0\36\4\2\0\44\4\4\0\10\4\1\0\5\4"+
    "\52\0\236\4\2\0\12\5\6\0\44\4\4\0\44\4\4\0\50\4"+
    "\10\0\64\4\234\0\u0137\4\11\0\26\4\12\0\10\4\230\0\6\4"+
    "\2\0\1\4\1\0\54\4\1\0\2\4\3\0\1\4\2\0\27\4"+
    "\12\0\27\4\11\0\37\4\101\0\23\4\1\0\2\4\12\0\26\4"+
    "\12\0\32\4\106\0\70\4\6\0\2\4\100\0\1\4\3\5\1\0"+
    "\2\5\5\0\4\5\4\4\1\0\3\4\1\0\35\4\2\0\3\5"+
    "\4\0\1\5\40\0\35\4\3\0\35\4\43\0\10\4\1\0\34\4"+
    "\2\5\31\0\66\4\12\0\26\4\12\0\23\4\15\0\22\4\156\0"+
    "\111\4\67\0\63\4\15\0\63\4\15\0\44\4\4\5\10\0\12\5"+
    "\u0146\0\52\4\1\0\2\5\3\0\2\4\116\0\35\4\12\0\1\4"+
    "\10\0\26\4\13\5\137\0\25\4\33\0\27\4\11\0\3\5\65\4"+
    "\17\5\37\0\12\5\17\0\4\5\55\4\13\5\2\0\1\5\17\0"+
    "\1\5\2\0\31\4\7\0\12\5\6\0\3\5\44\4\16\5\1\0"+
    "\12\5\4\0\1\4\2\5\1\4\10\0\43\4\1\5\2\0\1\4"+
    "\11\0\3\5\60\4\16\5\4\4\4\0\4\5\1\0\14\5\1\4"+
    "\1\0\1\4\43\0\22\4\1\0\31\4\14\5\6\0\1\5\101\0"+
    "\7\4\1\0\1\4\1\0\4\4\1\0\17\4\1\0\12\4\7\0"+
    "\57\4\14\5\5\0\12\5\6\0\4\5\1\0\10\4\2\0\2\4"+
    "\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\1\0\2\5"+
    "\1\4\7\5\2\0\2\5\2\0\3\5\2\0\1\4\6\0\1\5"+
    "\5\0\5\4\2\5\2\0\7\5\3\0\5\5\213\0\65\4\22\5"+
    "\4\4\5\0\12\5\4\0\1\5\3\4\36\0\60\4\24\5\2\4"+
    "\1\0\1\4\10\0\12\5\246\0\57\4\7\5\2\0\11\5\27\0"+
    "\4\4\2\5\42\0\60\4\21\5\3\0\1\4\13\0\12\5\46\0"+
    "\53\4\15\5\1\4\7\0\12\5\66\0\33\4\2\0\17\5\4\0"+
    "\12\5\306\0\54\4\17\5\145\0\100\4\12\5\25\0\10\4\2\0"+
    "\1\4\2\0\10\4\1\0\2\4\1\0\30\4\6\5\1\0\2\5"+
    "\2\0\4\5\1\4\1\5\1\4\2\5\14\0\12\5\106\0\10\4"+
    "\2\0\47\4\7\5\2\0\7\5\1\4\1\0\1\4\1\5\33\0"+
    "\1\4\12\5\50\4\7\5\1\4\4\5\10\0\1\5\10\0\1\4"+
    "\13\5\56\4\20\5\3\0\1\4\42\0\71\4\u0107\0\11\4\1\0"+
    "\45\4\10\5\1\0\10\5\1\4\17\0\12\5\30\0\36\4\2\0"+
    "\26\5\1\0\16\5\111\0\7\4\1\0\2\4\1\0\46\4\6\5"+
    "\3\0\1\5\1\0\2\5\1\0\7\5\1\4\1\5\10\0\12\5"+
    "\6\0\6\4\1\0\2\4\1\0\40\4\5\5\1\0\2\5\1\0"+
    "\5\5\1\4\7\0\12\5\u0136\0\23\4\4\5\271\0\1\4\54\0"+
    "\4\4\37\0\u039a\4\146\0\157\4\21\0\304\4\u0abc\0\u042f\4\1\0"+
    "\11\5\u0fc7\0\u0247\4\u21b9\0\u0239\4\7\0\37\4\1\0\12\5\146\0"+
    "\36\4\2\0\5\5\13\0\60\4\7\5\11\0\4\4\14\0\12\5"+
    "\11\0\25\4\5\0\23\4\u02b0\0\100\4\200\0\113\4\4\0\1\5"+
    "\1\4\67\5\7\0\4\5\15\4\100\0\2\4\1\0\1\4\1\5"+
    "\13\0\2\5\16\0\u17f8\4\10\0\u04d6\4\52\0\11\4\u22f7\0\u011f\4"+
    "\61\0\3\4\21\0\4\4\10\0\u018c\4\u0904\0\153\4\5\0\15\4"+
    "\3\0\11\4\7\0\12\4\3\0\2\5\1\0\4\5\u14c1\0\5\5"+
    "\3\0\26\5\2\0\7\5\36\0\4\5\224\0\3\5\u01bb\0\125\4"+
    "\1\0\107\4\1\0\2\4\2\0\1\4\2\0\2\4\2\0\4\4"+
    "\1\0\14\4\1\0\1\4\1\0\7\4\1\0\101\4\1\0\4\4"+
    "\2\0\10\4\1\0\7\4\1\0\34\4\1\0\4\4\1\0\5\4"+
    "\1\0\1\4\3\0\7\4\1\0\u0154\4\2\0\31\4\1\0\31\4"+
    "\1\0\37\4\1\0\31\4\1\0\37\4\1\0\31\4\1\0\37\4"+
    "\1\0\31\4\1\0\37\4\1\0\31\4\1\0\10\4\2\0\62\5"+
    "\u0200\0\67\5\4\0\62\5\10\0\1\5\16\0\1\5\26\0\5\5"+
    "\1\0\17\5\u0550\0\7\5\1\0\21\5\2\0\7\5\1\0\2\5"+
    "\1\0\5\5\325\0\55\4\3\0\7\5\7\4\2\0\12\5\4\0"+
    "\1\4\u0171\0\54\4\16\5\5\0\1\4\u0500\0\305\4\13\0\7\5"+
    "\51\0\104\4\7\5\1\4\4\0\12\5\u0356\0\1\4\u014f\0\4\4"+
    "\1\0\33\4\1\0\2\4\1\0\1\4\2\0\1\4\1\0\12\4"+
    "\1\0\4\4\1\0\1\4\1\0\1\4\6\0\1\4\4\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\3\4\1\0\2\4\1\0\1\4"+
    "\2\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\2\4\1\0\1\4\2\0\4\4\1\0\7\4\1\0\4\4"+
    "\1\0\4\4\1\0\1\4\1\0\12\4\1\0\21\4\5\0\3\4"+
    "\1\0\5\4\1\0\21\4\u0d34\0\12\5\u0406\0\ua6de\4\42\0\u1035\4"+
    "\13\0\336\4\2\0\u1682\4\16\0\u1d31\4\u0c1f\0\u021e\4\u05e2\0\u134b\4"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uecc0\0"+
    "\1\5\36\0\140\5\200\0\360\5\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\2\1\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\15\5\1\24\10\5"+
    "\1\25\1\3\1\4\1\5\1\2\2\6\1\7\1\10"+
    "\1\11\1\12\2\25\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\6\5\1\24\1\5\1\26"+
    "\1\27\1\0\1\30\1\7\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\13\5\1\37\13\5\1\40\1\41\1\42"+
    "\4\5\1\43\1\5\1\44\20\5\1\27\1\25\1\30"+
    "\1\7\1\31\1\32\1\33\1\34\1\35\1\36\7\5"+
    "\1\45\1\46\1\47\1\50\2\0\1\5\1\51\14\5"+
    "\1\52\7\5\1\53\3\5\1\54\1\5\1\54\2\5"+
    "\1\55\7\5\1\56\15\5\2\25\2\5\1\54\3\5"+
    "\1\0\1\27\1\57\1\5\1\60\3\5\1\61\1\62"+
    "\14\5\1\63\1\64\1\5\1\65\3\5\1\66\6\5"+
    "\1\67\2\5\1\70\4\5\1\71\1\72\2\5\1\73"+
    "\2\5\1\74\1\25\1\27\1\57\1\5\1\67\1\5"+
    "\1\75\10\5\1\76\1\5\1\77\1\5\1\100\2\5"+
    "\1\101\11\5\1\102\1\5\1\103\1\104\2\5\1\105"+
    "\1\106\1\107\1\110\1\111\3\5\1\112\4\5\1\113"+
    "\3\5\1\114\2\5\1\115\1\116\2\5\1\117\4\5"+
    "\1\120\2\5\1\120\1\121\1\122\2\5\1\123\1\5"+
    "\1\124\1\125\1\5\1\126\3\5\1\127\1\130\3\5"+
    "\1\131\1\5\1\132\1\133\2\5\1\134\1\135\1\5"+
    "\1\136\1\137\1\140\1\5\1\141\1\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[376];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\146\0\231\0\314\0\377\0\146"+
    "\0\u0132\0\u0165\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\146"+
    "\0\146\0\146\0\146\0\146\0\146\0\146\0\146\0\146"+
    "\0\u0264\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9"+
    "\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\146\0\u04fb\0\u052e"+
    "\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6"+
    "\0\u06f9\0\u072c\0\u0693\0\u0693\0\u075f\0\u0792\0\u0792\0\u07c5"+
    "\0\u07f8\0\u082b\0\u085e\0\u0693\0\u0693\0\u0693\0\u0693\0\u0693"+
    "\0\u0693\0\u0693\0\u0693\0\u0693\0\u0891\0\u08c4\0\u08f7\0\u092a"+
    "\0\u095d\0\u0990\0\u0693\0\u09c3\0\u09f6\0\146\0\u0a29\0\146"+
    "\0\146\0\146\0\146\0\146\0\146\0\146\0\146\0\u0a5c"+
    "\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4"+
    "\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c"+
    "\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\377\0\377"+
    "\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\377"+
    "\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb"+
    "\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353"+
    "\0\u0693\0\u1386\0\u0693\0\u0693\0\u0693\0\u0693\0\u0693\0\u0693"+
    "\0\u0693\0\u0693\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8"+
    "\0\u14eb\0\146\0\146\0\146\0\146\0\u151e\0\u1551\0\u1584"+
    "\0\377\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9"+
    "\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\377\0\u181b\0\u184e"+
    "\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d\0\377\0\u1980\0\u19b3"+
    "\0\u19e6\0\377\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\377\0\u1ae5"+
    "\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\377\0\u1c4a"+
    "\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2"+
    "\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a"+
    "\0\u072c\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u151e\0\377\0\u2079"+
    "\0\377\0\u20ac\0\u20df\0\u2112\0\377\0\377\0\u2145\0\u2178"+
    "\0\u21ab\0\u21de\0\u2211\0\u2244\0\u2277\0\u22aa\0\u22dd\0\u2310"+
    "\0\u2343\0\u2376\0\377\0\377\0\u23a9\0\377\0\u23dc\0\u240f"+
    "\0\u2442\0\377\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574"+
    "\0\377\0\u25a7\0\u25da\0\377\0\u260d\0\u2640\0\u2673\0\u26a6"+
    "\0\377\0\377\0\u26d9\0\u270c\0\377\0\u273f\0\u2772\0\377"+
    "\0\u27a5\0\u1ee1\0\u072c\0\u27d8\0\u072c\0\u280b\0\377\0\u283e"+
    "\0\u2871\0\u28a4\0\u28d7\0\u290a\0\u293d\0\u2970\0\u29a3\0\u29d6"+
    "\0\u2a09\0\377\0\u2a3c\0\377\0\u2a6f\0\u2aa2\0\377\0\u2ad5"+
    "\0\u2b08\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d"+
    "\0\377\0\u2ca0\0\377\0\377\0\u2cd3\0\u2d06\0\377\0\377"+
    "\0\377\0\377\0\377\0\u2d39\0\u2d6c\0\u2d9f\0\377\0\u2dd2"+
    "\0\u2e05\0\u2e38\0\u2e6b\0\377\0\u2e9e\0\u2ed1\0\u2f04\0\377"+
    "\0\u2f37\0\u2f6a\0\377\0\377\0\u2f9d\0\u2fd0\0\377\0\u3003"+
    "\0\u3036\0\u3069\0\u309c\0\377\0\u30cf\0\u3102\0\u072c\0\377"+
    "\0\377\0\u3135\0\u3168\0\377\0\u319b\0\377\0\377\0\u31ce"+
    "\0\377\0\u3201\0\u3234\0\u3267\0\377\0\377\0\u329a\0\u32cd"+
    "\0\u3300\0\377\0\u3333\0\377\0\377\0\u3366\0\u3399\0\377"+
    "\0\377\0\u33cc\0\377\0\377\0\377\0\u33ff\0\377\0\377";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[376];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\3\1\4\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\7\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\2\46\1\47"+
    "\1\50\1\7\1\51\1\52\1\53\1\7\1\54\1\55"+
    "\1\56\1\3\1\57\1\4\1\60\1\61\1\62\1\57"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\3\62\1\106\3\62\1\107\1\110"+
    "\1\62\1\111\1\62\1\112\1\46\1\113\1\114\11\62"+
    "\1\115\65\0\1\116\1\117\62\0\1\120\63\0\2\7"+
    "\1\0\2\7\17\0\16\7\2\0\12\7\10\0\2\11"+
    "\64\0\1\121\62\0\1\122\1\123\61\0\1\124\1\0"+
    "\1\125\63\0\1\126\63\0\1\127\50\0\2\7\1\0"+
    "\2\7\17\0\1\7\1\130\14\7\2\0\4\7\1\131"+
    "\2\7\1\132\2\7\5\0\2\7\1\0\2\7\17\0"+
    "\3\7\1\133\12\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\6\7\1\134\3\7\1\135\3\7\2\0"+
    "\6\7\1\136\3\7\5\0\2\7\1\0\2\7\17\0"+
    "\2\7\1\137\2\7\1\140\3\7\1\141\2\7\1\142"+
    "\1\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\7\7\1\143\5\7\1\144\2\0\10\7\1\145\1\7"+
    "\5\0\2\7\1\0\2\7\17\0\11\7\1\146\4\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\1\147"+
    "\1\7\1\150\1\151\12\7\2\0\4\7\1\152\2\7"+
    "\1\153\1\154\1\7\5\0\2\7\1\0\2\7\17\0"+
    "\5\7\1\155\6\7\1\156\1\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\4\7\1\157\2\7\1\160"+
    "\2\7\1\161\3\7\2\0\5\7\1\162\4\7\5\0"+
    "\2\7\1\0\2\7\17\0\2\7\1\163\1\164\12\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\3\7"+
    "\1\165\10\7\1\166\1\7\2\0\7\7\1\167\2\7"+
    "\5\0\2\7\1\0\2\7\17\0\12\7\1\170\3\7"+
    "\2\0\11\7\1\171\5\0\2\7\1\0\2\7\17\0"+
    "\1\7\1\172\12\7\1\173\1\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\1\174\15\7\2\0\12\7"+
    "\5\0\2\7\1\0\2\7\17\0\3\7\1\175\12\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\5\7"+
    "\1\176\1\177\5\7\1\200\1\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\11\7\1\201\4\7\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\5\7\1\202"+
    "\3\7\1\203\4\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\11\7\1\204\4\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\11\7\1\205\4\7\2\0"+
    "\4\7\1\206\5\7\5\0\2\7\1\0\2\7\17\0"+
    "\1\7\1\207\3\7\1\210\10\7\2\0\12\7\1\0"+
    "\1\57\1\0\44\57\1\0\13\57\1\0\1\57\1\0"+
    "\1\211\1\212\42\57\1\0\13\57\1\0\1\57\1\0"+
    "\1\57\1\213\42\57\1\0\13\57\1\0\1\57\1\0"+
    "\2\57\2\62\1\57\2\62\17\57\16\62\1\0\1\57"+
    "\12\62\1\0\1\57\1\0\5\57\2\65\35\57\1\0"+
    "\13\57\1\0\1\57\1\0\10\57\1\214\33\57\1\0"+
    "\13\57\1\0\1\57\1\0\10\57\1\215\1\216\32\57"+
    "\1\0\13\57\1\0\1\57\1\0\10\57\1\217\1\57"+
    "\1\220\31\57\1\0\13\57\1\0\1\57\1\0\13\57"+
    "\1\221\30\57\1\0\13\57\1\0\1\57\1\0\14\57"+
    "\1\222\27\57\1\0\13\57\1\0\1\57\1\0\2\57"+
    "\2\62\1\57\2\62\17\57\1\62\1\223\14\62\1\0"+
    "\1\57\12\62\1\0\1\57\1\0\2\57\2\62\1\57"+
    "\2\62\17\57\5\62\1\224\10\62\1\0\1\57\12\62"+
    "\1\0\1\57\1\0\2\57\2\62\1\57\2\62\17\57"+
    "\5\62\1\225\10\62\1\0\1\57\12\62\1\0\1\57"+
    "\1\0\2\57\2\62\1\57\2\62\17\57\12\62\1\226"+
    "\3\62\1\0\1\57\12\62\1\0\1\57\1\0\2\57"+
    "\2\62\1\57\2\62\17\57\14\62\1\227\1\62\1\0"+
    "\1\57\12\62\1\0\1\57\1\0\2\57\2\62\1\57"+
    "\2\62\17\57\14\62\1\230\1\62\1\0\1\57\12\62"+
    "\1\0\1\57\1\0\2\57\2\62\1\57\2\62\17\57"+
    "\1\231\15\62\1\0\1\57\12\62\31\0\1\232\1\233"+
    "\10\0\1\234\3\0\1\235\14\0\3\236\1\237\57\236"+
    "\4\0\2\7\1\0\2\7\17\0\2\7\1\240\13\7"+
    "\2\0\7\7\1\241\2\7\5\0\2\7\1\0\2\7"+
    "\17\0\1\7\1\242\7\7\1\243\4\7\2\0\12\7"+
    "\5\0\2\7\1\0\2\7\17\0\16\7\2\0\11\7"+
    "\1\244\5\0\2\7\1\0\2\7\17\0\1\245\15\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\7\7"+
    "\1\246\6\7\2\0\12\7\5\0\2\7\1\0\2\7"+
    "\17\0\2\7\1\247\13\7\2\0\12\7\5\0\2\7"+
    "\1\0\2\7\17\0\1\250\15\7\2\0\11\7\1\251"+
    "\5\0\2\7\1\0\2\7\17\0\12\7\1\252\3\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\6\7"+
    "\1\253\7\7\2\0\3\7\1\254\6\7\5\0\2\7"+
    "\1\0\2\7\17\0\12\7\1\255\3\7\2\0\12\7"+
    "\5\0\2\7\1\0\2\7\17\0\1\7\1\256\14\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\7\7"+
    "\1\257\6\7\2\0\7\7\1\260\2\7\5\0\2\7"+
    "\1\0\2\7\17\0\7\7\1\261\6\7\2\0\12\7"+
    "\5\0\2\7\1\0\2\7\17\0\5\7\1\262\10\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\15\7"+
    "\1\263\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\5\7\1\264\10\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\16\7\2\0\11\7\1\265\5\0\2\7"+
    "\1\0\2\7\17\0\1\266\15\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\14\7\1\267\1\7\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\12\7\1\270"+
    "\3\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\11\7\1\271\4\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\1\7\1\272\14\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\11\7\1\273\4\7\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\1\274\15\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\16\7"+
    "\2\0\11\7\1\275\5\0\2\7\1\0\2\7\17\0"+
    "\6\7\1\276\7\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\16\7\2\0\10\7\1\277\1\7\5\0"+
    "\2\7\1\0\2\7\17\0\4\7\1\300\11\7\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\2\7\1\301"+
    "\13\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\12\7\1\302\3\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\3\7\1\303\12\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\3\7\1\304\12\7\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\14\7\1\305"+
    "\1\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\1\7\1\306\14\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\1\307\15\7\2\0\12\7\5\0\2\7"+
    "\1\0\2\7\17\0\1\310\6\7\1\311\6\7\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\5\7\1\312"+
    "\10\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\10\7\1\313\1\7\1\314\3\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\13\7\1\315\2\7\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\11\7\1\316"+
    "\4\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\16\7\2\0\6\7\1\317\3\7\5\0\2\7\1\0"+
    "\2\7\17\0\3\7\1\320\12\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\1\321\15\7\2\0\12\7"+
    "\5\0\2\7\1\0\2\7\17\0\11\7\1\322\4\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\11\7"+
    "\1\323\4\7\2\0\12\7\5\0\2\7\1\0\2\7"+
    "\17\0\1\7\1\324\14\7\2\0\12\7\1\0\1\325"+
    "\1\236\1\325\1\326\42\325\1\236\13\325\1\236\1\57"+
    "\1\0\2\57\2\62\1\57\2\62\17\57\2\62\1\327"+
    "\13\62\1\0\1\57\12\62\1\0\1\57\1\0\2\57"+
    "\2\62\1\57\2\62\17\57\6\62\1\330\7\62\1\0"+
    "\1\57\12\62\1\0\1\57\1\0\2\57\2\62\1\57"+
    "\2\62\17\57\1\62\1\331\14\62\1\0\1\57\12\62"+
    "\1\0\1\57\1\0\2\57\2\62\1\57\2\62\17\57"+
    "\1\331\15\62\1\0\1\57\12\62\1\0\1\57\1\0"+
    "\2\57\2\62\1\57\2\62\17\57\2\62\1\332\13\62"+
    "\1\0\1\57\12\62\1\0\1\57\1\0\2\57\2\62"+
    "\1\57\2\62\17\57\14\62\1\333\1\62\1\0\1\57"+
    "\12\62\1\0\1\57\1\0\2\57\2\62\1\57\2\62"+
    "\17\57\1\62\1\334\14\62\1\0\1\57\12\62\1\0"+
    "\3\236\1\335\61\236\1\336\1\335\57\236\4\0\2\7"+
    "\1\0\2\7\17\0\3\7\1\337\12\7\2\0\12\7"+
    "\5\0\2\7\1\0\2\7\17\0\14\7\1\340\1\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\7\7"+
    "\1\341\6\7\2\0\12\7\5\0\2\7\1\0\2\7"+
    "\17\0\3\7\1\342\12\7\2\0\12\7\5\0\2\7"+
    "\1\0\2\7\17\0\2\7\1\343\13\7\2\0\4\7"+
    "\1\344\5\7\5\0\2\7\1\0\2\7\17\0\3\7"+
    "\1\345\12\7\2\0\12\7\5\0\2\7\1\0\2\7"+
    "\17\0\16\7\2\0\5\7\1\346\4\7\5\0\2\7"+
    "\1\0\2\7\17\0\3\7\1\347\12\7\2\0\12\7"+
    "\5\0\2\7\1\0\2\7\17\0\14\7\1\350\1\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\16\7"+
    "\2\0\3\7\1\351\6\7\5\0\2\7\1\0\2\7"+
    "\17\0\7\7\1\240\6\7\2\0\12\7\5\0\2\7"+
    "\1\0\2\7\17\0\1\352\15\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\5\7\1\353\10\7\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\3\7\1\354"+
    "\12\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\12\7\1\355\3\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\1\356\15\7\2\0\12\7\5\0\2\7"+
    "\1\0\2\7\17\0\11\7\1\357\4\7\2\0\12\7"+
    "\5\0\2\7\1\0\2\7\17\0\1\7\1\360\14\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\1\361"+
    "\15\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\3\7\1\362\12\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\16\7\2\0\10\7\1\363\1\7\5\0"+
    "\2\7\1\0\2\7\17\0\16\7\2\0\3\7\1\364"+
    "\6\7\5\0\2\7\1\0\2\7\17\0\1\365\15\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\13\7"+
    "\1\366\2\7\2\0\12\7\5\0\2\7\1\0\2\7"+
    "\17\0\3\7\1\367\12\7\2\0\12\7\5\0\2\7"+
    "\1\0\2\7\17\0\6\7\1\370\5\7\1\371\1\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\6\7"+
    "\1\372\7\7\2\0\12\7\5\0\2\7\1\0\2\7"+
    "\17\0\3\7\1\373\1\7\1\374\10\7\2\0\12\7"+
    "\5\0\2\7\1\0\2\7\17\0\15\7\1\375\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\5\7\1\376"+
    "\10\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\1\7\1\377\14\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\5\7\1\u0100\10\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\6\7\1\u0101\7\7\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\11\7\1\u0102"+
    "\4\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\16\7\2\0\3\7\1\u0103\6\7\5\0\2\7\1\0"+
    "\2\7\17\0\3\7\1\u0104\12\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\7\7\1\u0105\6\7\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\5\7\1\u0106"+
    "\10\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\1\u0107\6\7\1\u0108\6\7\2\0\12\7\5\0\2\7"+
    "\1\0\2\7\17\0\3\7\1\u0109\12\7\2\0\12\7"+
    "\5\0\2\7\1\0\2\7\17\0\12\7\1\u010a\3\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\11\7"+
    "\1\u010b\4\7\2\0\12\7\5\0\2\7\1\0\2\7"+
    "\17\0\6\7\1\u010c\7\7\2\0\12\7\5\0\2\7"+
    "\1\0\2\7\17\0\16\7\2\0\4\7\1\u010d\5\7"+
    "\5\0\2\7\1\0\2\7\17\0\6\7\1\u010e\7\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\12\7"+
    "\1\u010f\3\7\2\0\12\7\5\0\2\7\1\0\2\7"+
    "\17\0\1\u0110\15\7\2\0\12\7\1\0\1\325\1\236"+
    "\1\325\1\u0111\42\325\1\236\13\325\1\236\1\325\1\236"+
    "\1\u0112\1\u0111\42\325\1\236\13\325\1\236\1\57\1\0"+
    "\2\57\2\62\1\57\2\62\17\57\3\62\1\u0113\12\62"+
    "\1\0\1\57\12\62\1\0\1\57\1\0\2\57\2\62"+
    "\1\57\2\62\17\57\7\62\1\327\6\62\1\0\1\57"+
    "\12\62\1\0\1\57\1\0\2\57\2\62\1\57\2\62"+
    "\17\57\15\62\1\u0114\1\0\1\57\12\62\1\0\1\57"+
    "\1\0\2\57\2\62\1\57\2\62\17\57\6\62\1\u0115"+
    "\7\62\1\0\1\57\12\62\1\0\1\57\1\0\2\57"+
    "\2\62\1\57\2\62\17\57\11\62\1\u0116\4\62\1\0"+
    "\1\57\12\62\1\0\2\236\1\116\1\335\57\236\4\0"+
    "\2\7\1\0\2\7\17\0\16\7\2\0\10\7\1\u0117"+
    "\1\7\5\0\2\7\1\0\2\7\17\0\13\7\1\u0118"+
    "\2\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\1\7\1\u0119\14\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\1\7\1\u011a\14\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\1\7\1\u011b\10\7\1\u011c"+
    "\3\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\1\7\1\u011d\14\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\1\u011e\15\7\2\0\12\7\5\0\2\7"+
    "\1\0\2\7\17\0\14\7\1\u011f\1\7\2\0\12\7"+
    "\5\0\2\7\1\0\2\7\17\0\6\7\1\u0120\7\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\1\7"+
    "\1\u0121\14\7\2\0\12\7\5\0\2\7\1\0\2\7"+
    "\17\0\16\7\2\0\3\7\1\u0122\6\7\5\0\2\7"+
    "\1\0\2\7\17\0\1\7\1\u0123\14\7\2\0\12\7"+
    "\5\0\2\7\1\0\2\7\17\0\1\u0124\15\7\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\5\7\1\u0125"+
    "\10\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\11\7\1\u0126\4\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\1\7\1\u0127\14\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\16\7\2\0\3\7\1\u0128"+
    "\6\7\5\0\2\7\1\0\2\7\17\0\1\7\1\u0129"+
    "\14\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\3\7\1\u012a\12\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\1\7\1\u012b\14\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\1\7\1\u012c\14\7\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\2\7\1\u012d"+
    "\13\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\6\7\1\u012e\7\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\16\7\2\0\5\7\1\u012f\4\7\5\0"+
    "\2\7\1\0\2\7\17\0\5\7\1\u0130\10\7\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\16\7\2\0"+
    "\2\7\1\u0131\7\7\5\0\2\7\1\0\2\7\17\0"+
    "\12\7\1\u0132\3\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\16\7\2\0\4\7\1\u0133\5\7\5\0"+
    "\2\7\1\0\2\7\17\0\7\7\1\u0134\6\7\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\1\7\1\u0135"+
    "\14\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\11\7\1\u0136\4\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\1\u0137\15\7\2\0\12\7\5\0\2\7"+
    "\1\0\2\7\17\0\12\7\1\u0138\3\7\2\0\12\7"+
    "\5\0\2\7\1\0\2\7\17\0\13\7\1\u0139\2\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\3\7"+
    "\1\u013a\12\7\2\0\12\7\5\0\2\7\1\0\2\7"+
    "\17\0\1\u013b\15\7\2\0\12\7\1\0\1\325\1\236"+
    "\1\211\1\u0111\42\325\1\236\13\325\1\236\1\57\1\0"+
    "\2\57\2\62\1\57\2\62\17\57\6\62\1\u013c\7\62"+
    "\1\0\1\57\12\62\1\0\1\57\1\0\2\57\2\62"+
    "\1\57\2\62\17\57\12\62\1\u013d\3\62\1\0\1\57"+
    "\12\62\5\0\2\7\1\0\2\7\17\0\3\7\1\u013e"+
    "\12\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\12\7\1\u013f\3\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\14\7\1\u0140\1\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\12\7\1\u0141\3\7\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\7\7\1\u0142"+
    "\3\7\1\u0143\2\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\1\u0144\15\7\2\0\12\7\5\0\2\7"+
    "\1\0\2\7\17\0\11\7\1\u0145\4\7\2\0\12\7"+
    "\5\0\2\7\1\0\2\7\17\0\1\7\1\u0146\14\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\6\7"+
    "\1\u0147\7\7\2\0\12\7\5\0\2\7\1\0\2\7"+
    "\17\0\1\u0148\15\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\5\7\1\u0149\10\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\1\7\1\u014a\14\7\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\16\7\2\0"+
    "\3\7\1\u014b\6\7\5\0\2\7\1\0\2\7\17\0"+
    "\16\7\2\0\4\7\1\u014c\5\7\5\0\2\7\1\0"+
    "\2\7\17\0\4\7\1\u014d\11\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\16\7\2\0\5\7\1\u014e"+
    "\4\7\5\0\2\7\1\0\2\7\17\0\1\u014f\15\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\1\7"+
    "\1\u0150\14\7\2\0\12\7\5\0\2\7\1\0\2\7"+
    "\17\0\6\7\1\u0151\7\7\2\0\12\7\5\0\2\7"+
    "\1\0\2\7\17\0\3\7\1\272\12\7\2\0\12\7"+
    "\5\0\2\7\1\0\2\7\17\0\11\7\1\u0152\4\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\1\u0153"+
    "\15\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\16\7\2\0\1\7\1\u0154\10\7\5\0\2\7\1\0"+
    "\2\7\17\0\11\7\1\u0155\4\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\12\7\1\u0156\3\7\2\0"+
    "\12\7\1\0\1\57\1\0\2\57\2\62\1\57\2\62"+
    "\17\57\3\62\1\331\12\62\1\0\1\57\12\62\1\0"+
    "\1\57\1\0\2\57\2\62\1\57\2\62\17\57\16\62"+
    "\1\0\1\57\1\62\1\u0157\10\62\5\0\2\7\1\0"+
    "\2\7\17\0\4\7\1\u0158\11\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\16\7\2\0\10\7\1\u0159"+
    "\1\7\5\0\2\7\1\0\2\7\17\0\5\7\1\u015a"+
    "\10\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\11\7\1\u015b\4\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\7\7\1\u015c\6\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\14\7\1\u015d\1\7\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\16\7\2\0"+
    "\7\7\1\u015e\2\7\5\0\2\7\1\0\2\7\17\0"+
    "\16\7\2\0\7\7\1\u015f\2\7\5\0\2\7\1\0"+
    "\2\7\17\0\16\7\2\0\3\7\1\u0160\6\7\5\0"+
    "\2\7\1\0\2\7\17\0\16\7\2\0\7\7\1\u0161"+
    "\2\7\5\0\2\7\1\0\2\7\17\0\5\7\1\u0162"+
    "\10\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\3\7\1\u0163\12\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\3\7\1\u0164\12\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\1\u0165\15\7\2\0\12\7"+
    "\5\0\2\7\1\0\2\7\17\0\16\7\2\0\3\7"+
    "\1\u0166\6\7\5\0\2\7\1\0\2\7\17\0\14\7"+
    "\1\u0167\1\7\2\0\12\7\5\0\2\7\1\0\2\7"+
    "\17\0\5\7\1\u0168\10\7\2\0\12\7\5\0\2\7"+
    "\1\0\2\7\17\0\2\7\1\u0169\13\7\2\0\12\7"+
    "\5\0\2\7\1\0\2\7\17\0\6\7\1\u016a\7\7"+
    "\2\0\12\7\5\0\2\7\1\0\2\7\17\0\14\7"+
    "\1\u016b\1\7\2\0\12\7\5\0\2\7\1\0\2\7"+
    "\17\0\12\7\1\u016c\3\7\2\0\12\7\5\0\2\7"+
    "\1\0\2\7\17\0\1\u016d\15\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\16\7\2\0\3\7\1\u016e"+
    "\6\7\5\0\2\7\1\0\2\7\17\0\12\7\1\u016f"+
    "\3\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\13\7\1\u0170\2\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\1\7\1\u0171\14\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\12\7\1\u0172\3\7\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\3\7\1\u0173"+
    "\12\7\2\0\12\7\5\0\2\7\1\0\2\7\17\0"+
    "\12\7\1\u0174\3\7\2\0\12\7\5\0\2\7\1\0"+
    "\2\7\17\0\3\7\1\u0175\12\7\2\0\12\7\5\0"+
    "\2\7\1\0\2\7\17\0\1\u0176\15\7\2\0\12\7"+
    "\5\0\2\7\1\0\2\7\17\0\1\u0177\15\7\2\0"+
    "\12\7\5\0\2\7\1\0\2\7\17\0\7\7\1\u0178"+
    "\6\7\2\0\12\7\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13362];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\3\1\1\11\7\1\11\11\15\1\1\11"+
    "\47\1\1\11\1\0\10\11\102\1\4\11\2\0\75\1"+
    "\1\0\233\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[376];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3678) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <"+
                                                    yytext()+">");
            }
          case 99: break;
          case 2: 
            { 
            }
          case 100: break;
          case 3: 
            { return symbol(sym.DIVISION, yytext());
            }
          case 101: break;
          case 4: 
            { return symbol(sym.POW, yytext());
            }
          case 102: break;
          case 5: 
            { return symbol(sym.IDENTIFIER, yytext());
            }
          case 103: break;
          case 6: 
            { return symbol(sym.DECINTEGERLITERAL, yytext());
            }
          case 104: break;
          case 7: 
            { return symbol(sym.RELATIONAL_OPERATOR, yytext());
            }
          case 105: break;
          case 8: 
            { return symbol(sym.EQ, yytext());
            }
          case 106: break;
          case 9: 
            { return symbol(sym.PLUS, yytext());
            }
          case 107: break;
          case 10: 
            { return symbol(sym.MINUS, yytext());
            }
          case 108: break;
          case 11: 
            { return symbol(sym.RESID, yytext());
            }
          case 109: break;
          case 12: 
            { return symbol(sym.OPENING_KEY, yytext());
            }
          case 110: break;
          case 13: 
            { return symbol(sym.CLOSING_KEY, yytext());
            }
          case 111: break;
          case 14: 
            { return symbol(sym.OPENING_PARENT, yytext());
            }
          case 112: break;
          case 15: 
            { return symbol(sym.CLOSING_PARENT, yytext());
            }
          case 113: break;
          case 16: 
            { return symbol(sym.SEMICOLON, yytext());
            }
          case 114: break;
          case 17: 
            { return symbol(sym.OPENING_BRACKET, yytext());
            }
          case 115: break;
          case 18: 
            { return symbol(sym.CLOSING_BRACKET, yytext());
            }
          case 116: break;
          case 19: 
            { return symbol(sym.COMMA, yytext());
            }
          case 117: break;
          case 20: 
            { return symbol(sym.QUOTES,yytext());
            }
          case 118: break;
          case 21: 
            { string.append( yytext() );
            }
          case 119: break;
          case 22: 
            { string.append('\\');
            }
          case 120: break;
          case 23: 
            { return symbol(sym.COMMENT, yytext());
            }
          case 121: break;
          case 24: 
            { return symbol(sym.POWPOW, yytext());
            }
          case 122: break;
          case 25: 
            { return symbol(sym.PLUSEQ, yytext());
            }
          case 123: break;
          case 26: 
            { return symbol(sym.PLUSPLUS, yytext());
            }
          case 124: break;
          case 27: 
            { return symbol(sym.MINUSEQ, yytext());
            }
          case 125: break;
          case 28: 
            { return symbol(sym.MINUSMINUS, yytext());
            }
          case 126: break;
          case 29: 
            { return symbol(sym.AND, yytext());
            }
          case 127: break;
          case 30: 
            { return symbol(sym.OR, yytext());
            }
          case 128: break;
          case 31: 
            { return symbol(sym.AS, yytext());
            }
          case 129: break;
          case 32: 
            { return symbol(sym.IF, yytext());
            }
          case 130: break;
          case 33: 
            { return symbol(sym.IS, yytext());
            }
          case 131: break;
          case 34: 
            { return symbol(sym.IN, yytext());
            }
          case 132: break;
          case 35: 
            { return symbol(sym.DO, yytext());
            }
          case 133: break;
          case 36: 
            { return symbol(sym.ON, yytext());
            }
          case 134: break;
          case 37: 
            { string.append('\t');
            }
          case 135: break;
          case 38: 
            { string.append('\r');
            }
          case 136: break;
          case 39: 
            { string.append('\n');
            }
          case 137: break;
          case 40: 
            { string.append('\"');
            }
          case 138: break;
          case 41: 
            { return symbol(sym.TRY, yytext());
            }
          case 139: break;
          case 42: 
            { return symbol(sym.FOR, yytext());
            }
          case 140: break;
          case 43: 
            { return symbol(sym.SET, yytext());
            }
          case 141: break;
          case 44: 
            { return symbol(sym.DATA_TYPE,yytext());
            }
          case 142: break;
          case 45: 
            { return symbol(sym.NEW, yytext());
            }
          case 143: break;
          case 46: 
            { return symbol(sym.GET, yytext());
            }
          case 144: break;
          case 47: 
            { return symbol(sym.BOOLEAN_OPERATOR, yytext());
            }
          case 145: break;
          case 48: 
            { return symbol(sym.THIS, yytext());
            }
          case 146: break;
          case 49: 
            { return symbol(sym.ELSE, yytext());
            }
          case 147: break;
          case 50: 
            { return symbol(sym.ENUM, yytext());
            }
          case 148: break;
          case 51: 
            { return symbol(sym.SHOW, yytext());
            }
          case 149: break;
          case 52: 
            { return symbol(sym.SYNC, yytext());
            }
          case 150: break;
          case 53: 
            { return symbol(sym.VOID, yytext());
            }
          case 151: break;
          case 54: 
            { return symbol(sym.NULL, yytext());
            }
          case 152: break;
          case 55: 
            { return symbol(sym.BOOL, yytext());
            }
          case 153: break;
          case 56: 
            { return symbol(sym.CASE, yytext());
            }
          case 154: break;
          case 57: 
            { return symbol(sym.HIDE, yytext());
            }
          case 155: break;
          case 58: 
            { return symbol(sym.MAIN, yytext());
            }
          case 156: break;
          case 59: 
            { return symbol(sym.WITH, yytext());
            }
          case 157: break;
          case 60: 
            { return symbol(sym.PART, yytext());
            }
          case 158: break;
          case 61: 
            { return symbol(sym.THROW, yytext());
            }
          case 159: break;
          case 62: 
            { return symbol(sym.FINAL, yytext());
            }
          case 160: break;
          case 63: 
            { return symbol(sym.ASYNC, yytext());
            }
          case 161: break;
          case 64: 
            { return symbol(sym.AWAIT, yytext());
            }
          case 162: break;
          case 65: 
            { return symbol(sym.SUPER, yytext());
            }
          case 163: break;
          case 66: 
            { return symbol(sym.BREAK, yytext());
            }
          case 164: break;
          case 67: 
            { return symbol(sym.CATCH, yytext());
            }
          case 165: break;
          case 68: 
            { return symbol(sym.CLASS, yytext());
            }
          case 166: break;
          case 69: 
            { return symbol(sym.CONST, yytext());
            }
          case 167: break;
          case 70: 
            { return symbol(sym.MIXIN, yytext());
            }
          case 168: break;
          case 71: 
            { return symbol(sym.YIELD, yytext());
            }
          case 169: break;
          case 72: 
            { return symbol(sym.WHILE, yytext());
            }
          case 170: break;
          case 73: 
            { return symbol(sym.PRINT, yytext());
            }
          case 171: break;
          case 74: 
            { return symbol(sym.RETURN, yytext());
            }
          case 172: break;
          case 75: 
            { return symbol(sym.EXPORT, yytext());
            }
          case 173: break;
          case 76: 
            { return symbol(sym.ASSERT, yytext());
            }
          case 174: break;
          case 77: 
            { return symbol(sym.STATIC, yytext());
            }
          case 175: break;
          case 78: 
            { return symbol(sym.SWITCH, yytext());
            }
          case 176: break;
          case 79: 
            { return symbol(sym.IMPORT, yytext());
            }
          case 177: break;
          case 80: 
            { return symbol(sym.STRING, yytext());
            }
          case 178: break;
          case 81: 
            { return symbol(sym.TYPEDEF, yytext());
            }
          case 179: break;
          case 82: 
            { return symbol(sym.RETHROW, yytext());
            }
          case 180: break;
          case 83: 
            { return symbol(sym.EXTENDS, yytext());
            }
          case 181: break;
          case 84: 
            { return symbol(sym.FACTORY, yytext());
            }
          case 182: break;
          case 85: 
            { return symbol(sym.FINALLY, yytext());
            }
          case 183: break;
          case 86: 
            { return symbol(sym.LIBRARY, yytext());
            }
          case 184: break;
          case 87: 
            { return symbol(sym.DEFAULT, yytext());
            }
          case 185: break;
          case 88: 
            { return symbol(sym.DYNAMIC, yytext());
            }
          case 186: break;
          case 89: 
            { return symbol(sym.EXTERNAL, yytext());
            }
          case 187: break;
          case 90: 
            { return symbol(sym.FUNCTION, yytext());
            }
          case 188: break;
          case 91: 
            { return symbol(sym.ABSTRACT, yytext());
            }
          case 189: break;
          case 92: 
            { return symbol(sym.DEFERRED, yytext());
            }
          case 190: break;
          case 93: 
            { return symbol(sym.OPERATOR, yytext());
            }
          case 191: break;
          case 94: 
            { return symbol(sym.CONTINUE, yytext());
            }
          case 192: break;
          case 95: 
            { return symbol(sym.EXTENSION, yytext());
            }
          case 193: break;
          case 96: 
            { return symbol(sym.INTERFACE, yytext());
            }
          case 194: break;
          case 97: 
            { return symbol(sym.COVARIANT, yytext());
            }
          case 195: break;
          case 98: 
            { return symbol(sym.IMPLEMENTS, yytext());
            }
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
