/* The following code was generated by JFlex 1.6.1 */

/* JFlex example: partial Java language lexer specification */
package lexico;


import java_cup.runtime.*;
import lexico.sym;
/**
 * Dart Lexer
 */

class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\11\1\2\1\0\1\0\1\1\16\6\4\0\1\21\1\12"+
    "\1\62\1\0\1\5\1\20\1\16\1\0\1\24\1\25\1\4\1\14"+
    "\1\31\1\15\1\0\1\3\1\7\11\10\1\0\1\26\1\12\1\13"+
    "\1\12\2\0\22\5\1\50\7\5\1\27\1\63\1\30\1\0\1\5"+
    "\1\0\1\37\1\47\1\53\1\45\1\35\1\36\1\51\1\54\1\43"+
    "\1\5\1\52\1\40\1\55\1\44\1\46\1\61\1\5\1\33\1\41"+
    "\1\32\1\34\1\42\1\60\1\56\1\57\1\5\1\22\1\17\1\23"+
    "\1\0\41\6\2\0\4\5\4\0\1\5\2\0\1\6\7\0\1\5"+
    "\4\0\1\5\5\0\27\5\1\0\37\5\1\0\u01ca\5\4\0\14\5"+
    "\16\0\5\5\7\0\1\5\1\0\1\5\21\0\160\6\5\5\1\0"+
    "\2\5\2\0\4\5\1\0\1\5\6\0\1\5\1\0\3\5\1\0"+
    "\1\5\1\0\24\5\1\0\123\5\1\0\213\5\1\0\5\6\2\0"+
    "\246\5\1\0\46\5\2\0\1\5\6\0\51\5\6\0\1\5\1\0"+
    "\55\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6\10\0"+
    "\33\5\4\0\4\5\15\0\6\6\5\0\1\5\4\0\13\6\1\0"+
    "\1\6\3\0\53\5\37\6\4\0\2\5\1\6\143\5\1\0\1\5"+
    "\10\6\1\0\6\6\2\5\2\6\1\0\4\6\2\5\12\6\3\5"+
    "\2\0\1\5\17\0\1\6\1\5\1\6\36\5\33\6\2\0\131\5"+
    "\13\6\1\5\16\0\12\6\41\5\11\6\2\5\4\0\1\5\2\0"+
    "\1\6\30\5\4\6\1\5\11\6\1\5\3\6\1\5\5\6\22\0"+
    "\31\5\3\6\4\0\13\5\65\0\25\5\1\0\22\5\13\0\61\6"+
    "\66\5\3\6\1\5\22\6\1\5\7\6\12\5\2\6\2\0\12\6"+
    "\1\0\20\5\3\6\1\0\10\5\2\0\2\5\2\0\26\5\1\0"+
    "\7\5\1\0\1\5\3\0\4\5\2\0\1\6\1\5\7\6\2\0"+
    "\2\6\2\0\3\6\1\5\10\0\1\6\4\0\2\5\1\0\3\5"+
    "\2\6\2\0\12\6\4\5\7\0\2\5\1\0\1\6\2\0\3\6"+
    "\1\0\6\5\4\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5"+
    "\1\0\2\5\1\0\2\5\2\0\1\6\1\0\5\6\4\0\2\6"+
    "\2\0\3\6\3\0\1\6\7\0\4\5\1\0\1\5\7\0\14\6"+
    "\3\5\1\6\13\0\3\6\1\0\11\5\1\0\3\5\1\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5\10\6"+
    "\1\0\3\6\1\0\3\6\2\0\1\5\17\0\2\5\2\6\2\0"+
    "\12\6\1\0\1\5\7\0\1\5\6\6\1\0\3\6\1\0\10\5"+
    "\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5"+
    "\2\0\1\6\1\5\7\6\2\0\2\6\2\0\3\6\7\0\3\6"+
    "\4\0\2\5\1\0\3\5\2\6\2\0\12\6\1\0\1\5\20\0"+
    "\1\6\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5"+
    "\4\0\5\6\3\0\3\6\1\0\4\6\2\0\1\5\6\0\1\6"+
    "\16\0\12\6\11\0\1\5\6\0\5\6\10\5\1\0\3\5\1\0"+
    "\27\5\1\0\20\5\3\0\1\5\7\6\1\0\3\6\1\0\4\6"+
    "\7\0\2\6\1\0\3\5\5\0\2\5\2\6\2\0\12\6\20\0"+
    "\1\5\3\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5"+
    "\1\0\5\5\2\0\1\6\1\5\7\6\1\0\3\6\1\0\4\6"+
    "\7\0\2\6\7\0\1\5\1\0\2\5\2\6\2\0\12\6\1\0"+
    "\2\5\15\0\4\6\11\5\1\0\3\5\1\0\51\5\2\6\1\5"+
    "\7\6\1\0\3\6\1\0\4\6\1\5\5\0\3\5\1\6\7\0"+
    "\3\5\2\6\2\0\12\6\12\0\6\5\1\0\3\6\1\0\22\5"+
    "\3\0\30\5\1\0\11\5\1\0\1\5\2\0\7\5\3\0\1\6"+
    "\4\0\6\6\1\0\1\6\1\0\10\6\6\0\12\6\2\0\2\6"+
    "\15\0\60\5\1\6\2\5\7\6\4\0\10\5\10\6\1\0\12\6"+
    "\47\0\2\5\1\0\1\5\1\0\5\5\1\0\30\5\1\0\1\5"+
    "\1\0\12\5\1\6\2\5\11\6\1\5\2\0\5\5\1\0\1\5"+
    "\1\0\6\6\2\0\12\6\2\0\4\5\40\0\1\5\27\0\2\6"+
    "\6\0\12\6\13\0\1\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\10\5\1\0\44\5\4\0\24\6\1\0\2\6\5\5\13\6\1\0"+
    "\44\6\11\0\1\6\71\0\53\5\24\6\1\5\12\6\6\0\6\5"+
    "\4\6\4\5\3\6\1\5\3\6\2\5\7\6\3\5\4\6\15\5"+
    "\14\6\1\5\17\6\2\0\46\5\1\0\1\5\5\0\1\5\2\0"+
    "\53\5\1\0\u014d\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0"+
    "\4\5\2\0\51\5\1\0\4\5\2\0\41\5\1\0\4\5\2\0"+
    "\7\5\1\0\1\5\1\0\4\5\2\0\17\5\1\0\71\5\1\0"+
    "\4\5\2\0\103\5\2\0\3\6\40\0\20\5\20\0\126\5\2\0"+
    "\6\5\3\0\u026c\5\2\0\21\5\1\0\32\5\5\0\113\5\3\0"+
    "\13\5\7\0\15\5\1\0\4\5\3\6\13\0\22\5\3\6\13\0"+
    "\22\5\2\6\14\0\15\5\1\0\3\5\1\0\2\6\14\0\64\5"+
    "\40\6\3\0\1\5\3\0\2\5\1\6\2\0\12\6\41\0\4\6"+
    "\1\0\12\6\6\0\131\5\7\0\5\5\2\6\42\5\1\6\1\5"+
    "\5\0\106\5\12\0\37\5\1\0\14\6\4\0\14\6\12\0\12\6"+
    "\36\5\2\0\5\5\13\0\54\5\4\0\32\5\6\0\12\6\46\0"+
    "\27\5\5\6\4\0\65\5\12\6\1\0\35\6\2\0\13\6\6\0"+
    "\12\6\15\0\1\5\10\0\16\6\1\0\2\6\77\0\5\6\57\5"+
    "\21\6\7\5\4\0\12\6\21\0\11\6\14\0\3\6\36\5\15\6"+
    "\2\5\12\6\54\5\16\6\14\0\44\5\24\6\10\0\12\6\3\0"+
    "\3\5\12\6\44\5\2\0\11\5\7\0\53\5\2\0\3\5\20\0"+
    "\3\6\1\0\25\6\4\5\1\6\6\5\1\6\2\5\3\6\1\5"+
    "\5\0\300\5\72\6\1\0\5\6\u0116\5\2\0\6\5\2\0\46\5"+
    "\2\0\6\5\2\0\10\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\37\5\2\0\65\5\1\0\7\5\1\0\1\5\3\0\3\5"+
    "\1\0\7\5\3\0\4\5\2\0\6\5\4\0\15\5\5\0\3\5"+
    "\1\0\7\5\16\0\5\6\32\0\5\6\20\0\2\5\23\0\1\5"+
    "\13\0\5\6\1\0\12\6\1\0\1\5\15\0\1\5\20\0\15\5"+
    "\3\0\40\5\20\0\15\6\4\0\1\6\3\0\14\6\21\0\1\5"+
    "\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\13\5\2\0\4\5"+
    "\5\0\5\5\4\0\1\5\21\0\51\5\u0a77\0\57\5\1\0\57\5"+
    "\1\0\205\5\6\0\4\5\3\6\2\5\14\0\46\5\1\0\1\5"+
    "\5\0\1\5\2\0\70\5\7\0\1\5\17\0\1\6\27\5\11\0"+
    "\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0"+
    "\7\5\1\0\7\5\1\0\7\5\1\0\40\6\57\0\1\5\u01d5\0"+
    "\3\5\31\0\11\5\6\6\1\0\5\5\2\0\5\5\4\0\126\5"+
    "\2\0\2\6\2\0\3\5\1\0\132\5\1\0\4\5\5\0\53\5"+
    "\1\0\136\5\21\0\40\5\60\0\20\5\u0200\0\u19c0\5\100\0\u51fd\5"+
    "\3\0\u048d\5\103\0\56\5\2\0\u010d\5\3\0\20\5\12\6\2\5"+
    "\24\0\57\5\1\6\4\0\12\6\1\0\37\5\2\6\120\5\2\6"+
    "\45\0\11\5\2\0\147\5\2\0\65\5\2\0\11\5\52\0\15\5"+
    "\1\6\3\5\1\6\4\5\1\6\27\5\5\6\4\0\1\6\13\0"+
    "\1\5\7\0\64\5\14\0\2\6\62\5\22\6\12\0\12\6\6\0"+
    "\22\6\6\5\3\0\1\5\1\0\2\5\13\6\34\5\10\6\2\0"+
    "\27\5\15\6\14\0\35\5\3\0\4\6\57\5\16\6\16\0\1\5"+
    "\12\6\6\0\5\5\1\6\12\5\12\6\5\5\1\0\51\5\16\6"+
    "\11\0\3\5\1\6\10\5\2\6\2\0\12\6\6\0\27\5\3\0"+
    "\1\5\3\6\62\5\1\6\1\5\3\6\2\5\2\6\5\5\2\6"+
    "\1\5\1\6\1\5\30\0\3\5\2\0\13\5\5\6\2\0\3\5"+
    "\2\6\12\0\6\5\2\0\6\5\2\0\6\5\11\0\7\5\1\0"+
    "\7\5\1\0\53\5\1\0\16\5\6\0\163\5\10\6\1\0\2\6"+
    "\2\0\12\6\6\0\u2ba4\5\14\0\27\5\4\0\61\5\u2104\0\u016e\5"+
    "\2\0\152\5\46\0\7\5\14\0\5\5\5\0\1\5\1\6\12\5"+
    "\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5"+
    "\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0\15\5"+
    "\3\0\20\6\20\0\20\6\3\0\2\5\30\0\3\5\31\0\1\5"+
    "\6\0\5\5\1\0\207\5\2\0\1\6\4\0\1\5\13\0\12\6"+
    "\7\0\32\5\4\0\1\5\1\0\32\5\13\0\131\5\3\0\6\5"+
    "\2\0\6\5\2\0\6\5\2\0\3\5\3\0\2\5\3\0\2\5"+
    "\22\0\3\6\4\0\14\5\1\0\32\5\1\0\23\5\1\0\2\5"+
    "\1\0\17\5\2\0\16\5\42\0\173\5\105\0\65\5\210\0\1\6"+
    "\202\0\35\5\3\0\61\5\17\0\1\6\37\0\40\5\15\0\36\5"+
    "\5\0\46\5\5\6\5\0\36\5\2\0\44\5\4\0\10\5\1\0"+
    "\5\5\52\0\236\5\2\0\12\6\6\0\44\5\4\0\44\5\4\0"+
    "\50\5\10\0\64\5\234\0\u0137\5\11\0\26\5\12\0\10\5\230\0"+
    "\6\5\2\0\1\5\1\0\54\5\1\0\2\5\3\0\1\5\2\0"+
    "\27\5\12\0\27\5\11\0\37\5\101\0\23\5\1\0\2\5\12\0"+
    "\26\5\12\0\32\5\106\0\70\5\6\0\2\5\100\0\1\5\3\6"+
    "\1\0\2\6\5\0\4\6\4\5\1\0\3\5\1\0\35\5\2\0"+
    "\3\6\4\0\1\6\40\0\35\5\3\0\35\5\43\0\10\5\1\0"+
    "\34\5\2\6\31\0\66\5\12\0\26\5\12\0\23\5\15\0\22\5"+
    "\156\0\111\5\67\0\63\5\15\0\63\5\15\0\44\5\4\6\10\0"+
    "\12\6\u0146\0\52\5\1\0\2\6\3\0\2\5\116\0\35\5\12\0"+
    "\1\5\10\0\26\5\13\6\137\0\25\5\33\0\27\5\11\0\3\6"+
    "\65\5\17\6\37\0\12\6\17\0\4\6\55\5\13\6\2\0\1\6"+
    "\17\0\1\6\2\0\31\5\7\0\12\6\6\0\3\6\44\5\16\6"+
    "\1\0\12\6\4\0\1\5\2\6\1\5\10\0\43\5\1\6\2\0"+
    "\1\5\11\0\3\6\60\5\16\6\4\5\4\0\4\6\1\0\14\6"+
    "\1\5\1\0\1\5\43\0\22\5\1\0\31\5\14\6\6\0\1\6"+
    "\101\0\7\5\1\0\1\5\1\0\4\5\1\0\17\5\1\0\12\5"+
    "\7\0\57\5\14\6\5\0\12\6\6\0\4\6\1\0\10\5\2\0"+
    "\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\1\0"+
    "\2\6\1\5\7\6\2\0\2\6\2\0\3\6\2\0\1\5\6\0"+
    "\1\6\5\0\5\5\2\6\2\0\7\6\3\0\5\6\213\0\65\5"+
    "\22\6\4\5\5\0\12\6\4\0\1\6\3\5\36\0\60\5\24\6"+
    "\2\5\1\0\1\5\10\0\12\6\246\0\57\5\7\6\2\0\11\6"+
    "\27\0\4\5\2\6\42\0\60\5\21\6\3\0\1\5\13\0\12\6"+
    "\46\0\53\5\15\6\1\5\7\0\12\6\66\0\33\5\2\0\17\6"+
    "\4\0\12\6\306\0\54\5\17\6\145\0\100\5\12\6\25\0\10\5"+
    "\2\0\1\5\2\0\10\5\1\0\2\5\1\0\30\5\6\6\1\0"+
    "\2\6\2\0\4\6\1\5\1\6\1\5\2\6\14\0\12\6\106\0"+
    "\10\5\2\0\47\5\7\6\2\0\7\6\1\5\1\0\1\5\1\6"+
    "\33\0\1\5\12\6\50\5\7\6\1\5\4\6\10\0\1\6\10\0"+
    "\1\5\13\6\56\5\20\6\3\0\1\5\42\0\71\5\u0107\0\11\5"+
    "\1\0\45\5\10\6\1\0\10\6\1\5\17\0\12\6\30\0\36\5"+
    "\2\0\26\6\1\0\16\6\111\0\7\5\1\0\2\5\1\0\46\5"+
    "\6\6\3\0\1\6\1\0\2\6\1\0\7\6\1\5\1\6\10\0"+
    "\12\6\6\0\6\5\1\0\2\5\1\0\40\5\5\6\1\0\2\6"+
    "\1\0\5\6\1\5\7\0\12\6\u0136\0\23\5\4\6\271\0\1\5"+
    "\54\0\4\5\37\0\u039a\5\146\0\157\5\21\0\304\5\u0abc\0\u042f\5"+
    "\1\0\11\6\u0fc7\0\u0247\5\u21b9\0\u0239\5\7\0\37\5\1\0\12\6"+
    "\146\0\36\5\2\0\5\6\13\0\60\5\7\6\11\0\4\5\14\0"+
    "\12\6\11\0\25\5\5\0\23\5\u02b0\0\100\5\200\0\113\5\4\0"+
    "\1\6\1\5\67\6\7\0\4\6\15\5\100\0\2\5\1\0\1\5"+
    "\1\6\13\0\2\6\16\0\u17f8\5\10\0\u04d6\5\52\0\11\5\u22f7\0"+
    "\u011f\5\61\0\3\5\21\0\4\5\10\0\u018c\5\u0904\0\153\5\5\0"+
    "\15\5\3\0\11\5\7\0\12\5\3\0\2\6\1\0\4\6\u14c1\0"+
    "\5\6\3\0\26\6\2\0\7\6\36\0\4\6\224\0\3\6\u01bb\0"+
    "\125\5\1\0\107\5\1\0\2\5\2\0\1\5\2\0\2\5\2\0"+
    "\4\5\1\0\14\5\1\0\1\5\1\0\7\5\1\0\101\5\1\0"+
    "\4\5\2\0\10\5\1\0\7\5\1\0\34\5\1\0\4\5\1\0"+
    "\5\5\1\0\1\5\3\0\7\5\1\0\u0154\5\2\0\31\5\1\0"+
    "\31\5\1\0\37\5\1\0\31\5\1\0\37\5\1\0\31\5\1\0"+
    "\37\5\1\0\31\5\1\0\37\5\1\0\31\5\1\0\10\5\2\0"+
    "\62\6\u0200\0\67\6\4\0\62\6\10\0\1\6\16\0\1\6\26\0"+
    "\5\6\1\0\17\6\u0550\0\7\6\1\0\21\6\2\0\7\6\1\0"+
    "\2\6\1\0\5\6\325\0\55\5\3\0\7\6\7\5\2\0\12\6"+
    "\4\0\1\5\u0171\0\54\5\16\6\5\0\1\5\u0500\0\305\5\13\0"+
    "\7\6\51\0\104\5\7\6\1\5\4\0\12\6\u0356\0\1\5\u014f\0"+
    "\4\5\1\0\33\5\1\0\2\5\1\0\1\5\2\0\1\5\1\0"+
    "\12\5\1\0\4\5\1\0\1\5\1\0\1\5\6\0\1\5\4\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\3\5\1\0\2\5\1\0"+
    "\1\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\0\1\5\2\0\4\5\1\0\7\5\1\0"+
    "\4\5\1\0\4\5\1\0\1\5\1\0\12\5\1\0\21\5\5\0"+
    "\3\5\1\0\5\5\1\0\21\5\u0d34\0\12\6\u0406\0\ua6de\5\42\0"+
    "\u1035\5\13\0\336\5\2\0\u1682\5\16\0\u1d31\5\u0c1f\0\u021e\5\u05e2\0"+
    "\u134b\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uecc0\0"+
    "\1\6\36\0\140\6\200\0\360\6\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\2\1\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\25\5\1\25"+
    "\1\26\1\3\1\4\1\7\1\10\1\11\1\12\2\26"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\2\26\1\27\1\30\2\0\1\31\1\7"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\13\5\1\40"+
    "\13\5\1\41\1\42\1\43\4\5\1\44\1\5\1\45"+
    "\20\5\1\31\1\7\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\2\26\1\46\1\47\1\50\1\51\2\52\2\0"+
    "\1\5\1\53\14\5\1\54\7\5\1\55\3\5\1\56"+
    "\1\5\1\56\2\5\1\57\7\5\1\60\15\5\2\26"+
    "\1\0\1\52\1\61\1\5\1\62\3\5\1\63\1\64"+
    "\14\5\1\65\1\66\1\5\1\67\3\5\1\70\6\5"+
    "\1\71\2\5\1\72\4\5\1\73\1\74\2\5\1\75"+
    "\2\5\1\76\1\61\1\77\3\5\1\0\5\5\1\100"+
    "\1\5\1\101\1\5\1\102\2\5\1\103\11\5\1\104"+
    "\1\5\1\105\1\106\2\5\1\107\1\110\1\111\1\112"+
    "\1\113\1\5\1\114\1\5\1\0\3\5\1\115\3\5"+
    "\1\116\2\5\1\117\1\120\2\5\1\121\4\5\1\122"+
    "\2\5\1\123\1\124\1\41\2\5\1\125\1\5\1\126"+
    "\1\127\1\5\1\130\3\5\1\131\1\132\3\5\1\133"+
    "\1\5\1\134\1\135\2\5\1\136\1\137\1\5\1\140"+
    "\1\141\1\142\1\5\1\143\1\144";

  private static int [] zzUnpackAction() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\150\0\234\0\320\0\u0104\0\150"+
    "\0\u0138\0\u016c\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\150"+
    "\0\150\0\150\0\150\0\150\0\150\0\150\0\150\0\150"+
    "\0\150\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8"+
    "\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548"+
    "\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680\0\150\0\u06b4"+
    "\0\u06b4\0\u06e8\0\u071c\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec"+
    "\0\u06b4\0\u06b4\0\u06b4\0\u06b4\0\u06b4\0\u06b4\0\u06b4\0\u06b4"+
    "\0\u06b4\0\u06b4\0\u0820\0\u0854\0\150\0\u0888\0\u08bc\0\u08f0"+
    "\0\150\0\150\0\150\0\150\0\150\0\150\0\150\0\150"+
    "\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90"+
    "\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30"+
    "\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0104"+
    "\0\u0104\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08"+
    "\0\u0104\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074"+
    "\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214"+
    "\0\u1248\0\u06b4\0\u06b4\0\u06b4\0\u06b4\0\u06b4\0\u06b4\0\u06b4"+
    "\0\u06b4\0\u127c\0\u12b0\0\150\0\150\0\150\0\150\0\u12e4"+
    "\0\150\0\u1318\0\u134c\0\u1380\0\u0104\0\u13b4\0\u13e8\0\u141c"+
    "\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc"+
    "\0\u15f0\0\u0104\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728"+
    "\0\u175c\0\u0104\0\u1790\0\u17c4\0\u17f8\0\u0104\0\u182c\0\u1860"+
    "\0\u1894\0\u18c8\0\u0104\0\u18fc\0\u1930\0\u1964\0\u1998\0\u19cc"+
    "\0\u1a00\0\u1a34\0\u0104\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38"+
    "\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8"+
    "\0\u1d0c\0\u1d40\0\u1d74\0\u1318\0\u0104\0\u1da8\0\u0104\0\u1ddc"+
    "\0\u1e10\0\u1e44\0\u1e78\0\u0104\0\u1eac\0\u1ee0\0\u1f14\0\u1f48"+
    "\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8"+
    "\0\u0104\0\u0104\0\u211c\0\u0104\0\u2150\0\u2184\0\u21b8\0\u0104"+
    "\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u0104\0\u2324"+
    "\0\u2358\0\u0104\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u0104\0\u0104"+
    "\0\u245c\0\u2490\0\u0104\0\u24c4\0\u24f8\0\u0104\0\u06b4\0\u0104"+
    "\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u2630\0\u2664\0\u2698"+
    "\0\u26cc\0\u2700\0\u2734\0\u0104\0\u2768\0\u0104\0\u279c\0\u27d0"+
    "\0\u0104\0\u2804\0\u2838\0\u286c\0\u28a0\0\u28d4\0\u2908\0\u293c"+
    "\0\u2970\0\u29a4\0\u0104\0\u29d8\0\u0104\0\u0104\0\u2a0c\0\u2a40"+
    "\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u2a74\0\u0104\0\u2aa8"+
    "\0\u2adc\0\u2b10\0\u2b44\0\u2b78\0\u0104\0\u2bac\0\u2be0\0\u2c14"+
    "\0\u0104\0\u2c48\0\u2c7c\0\u0104\0\u0104\0\u2cb0\0\u2ce4\0\u0104"+
    "\0\u2d18\0\u2d4c\0\u2d80\0\u2db4\0\u0104\0\u2de8\0\u2e1c\0\u0104"+
    "\0\u0104\0\150\0\u2e50\0\u2e84\0\u0104\0\u2eb8\0\u0104\0\u0104"+
    "\0\u2eec\0\u0104\0\u2f20\0\u2f54\0\u2f88\0\u0104\0\u0104\0\u2fbc"+
    "\0\u2ff0\0\u3024\0\u0104\0\u3058\0\u0104\0\u0104\0\u308c\0\u30c0"+
    "\0\u0104\0\u0104\0\u30f4\0\u0104\0\u0104\0\u0104\0\u3128\0\u0104"+
    "\0\u0104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\4\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\7\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\7\1\51\1\52\1\53\1\7\1\54\1\55"+
    "\1\56\1\57\1\3\1\60\2\3\1\61\1\62\5\60"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\3\60\1\104\23\60\1\105\1\106\67\0\1\107"+
    "\1\110\63\0\1\111\64\0\4\7\21\0\30\7\11\0"+
    "\2\11\66\0\1\112\63\0\1\113\1\114\62\0\1\115"+
    "\1\0\1\116\64\0\1\117\64\0\1\120\51\0\4\7"+
    "\21\0\1\7\1\121\20\7\1\122\2\7\1\123\2\7"+
    "\7\0\4\7\21\0\3\7\1\124\24\7\7\0\4\7"+
    "\21\0\6\7\1\125\3\7\1\126\11\7\1\127\3\7"+
    "\7\0\4\7\21\0\2\7\1\130\2\7\1\131\3\7"+
    "\1\132\2\7\1\133\13\7\7\0\4\7\21\0\7\7"+
    "\1\134\5\7\1\135\10\7\1\136\1\7\7\0\4\7"+
    "\21\0\11\7\1\137\16\7\7\0\4\7\21\0\1\140"+
    "\1\7\1\141\1\142\16\7\1\143\2\7\1\144\1\145"+
    "\1\7\7\0\4\7\21\0\5\7\1\146\6\7\1\147"+
    "\13\7\7\0\4\7\21\0\4\7\1\150\2\7\1\151"+
    "\2\7\1\152\10\7\1\153\4\7\7\0\4\7\21\0"+
    "\2\7\1\154\1\155\24\7\7\0\4\7\21\0\3\7"+
    "\1\156\10\7\1\157\10\7\1\160\2\7\7\0\4\7"+
    "\21\0\12\7\1\161\14\7\1\162\7\0\4\7\21\0"+
    "\1\7\1\163\12\7\1\164\13\7\7\0\4\7\21\0"+
    "\1\165\27\7\7\0\4\7\21\0\3\7\1\166\24\7"+
    "\7\0\4\7\21\0\5\7\1\167\1\170\5\7\1\171"+
    "\13\7\7\0\4\7\21\0\11\7\1\172\16\7\7\0"+
    "\4\7\21\0\5\7\1\173\3\7\1\174\16\7\7\0"+
    "\4\7\21\0\11\7\1\175\16\7\7\0\4\7\21\0"+
    "\11\7\1\176\10\7\1\177\5\7\7\0\4\7\21\0"+
    "\1\7\1\200\3\7\1\201\22\7\2\0\1\60\2\0"+
    "\57\60\2\0\1\60\2\0\1\60\1\202\55\60\2\0"+
    "\1\60\2\0\10\60\1\203\46\60\2\0\1\60\2\0"+
    "\10\60\1\204\1\205\45\60\2\0\1\60\2\0\10\60"+
    "\1\206\1\60\1\207\44\60\2\0\1\60\2\0\13\60"+
    "\1\210\43\60\2\0\1\60\2\0\14\60\1\211\42\60"+
    "\2\0\1\60\2\0\30\60\1\212\26\60\2\0\1\60"+
    "\2\0\34\60\1\213\22\60\34\0\1\214\1\215\10\0"+
    "\1\216\15\0\1\217\1\0\1\107\1\220\1\221\61\107"+
    "\4\222\1\223\57\222\5\0\4\7\21\0\2\7\1\224"+
    "\22\7\1\225\2\7\7\0\4\7\21\0\1\7\1\226"+
    "\7\7\1\227\16\7\7\0\4\7\21\0\27\7\1\230"+
    "\7\0\4\7\21\0\1\231\27\7\7\0\4\7\21\0"+
    "\7\7\1\232\20\7\7\0\4\7\21\0\2\7\1\233"+
    "\25\7\7\0\4\7\21\0\1\234\26\7\1\235\7\0"+
    "\4\7\21\0\12\7\1\236\15\7\7\0\4\7\21\0"+
    "\6\7\1\237\12\7\1\240\6\7\7\0\4\7\21\0"+
    "\12\7\1\241\15\7\7\0\4\7\21\0\1\7\1\242"+
    "\26\7\7\0\4\7\21\0\7\7\1\243\15\7\1\244"+
    "\2\7\7\0\4\7\21\0\7\7\1\245\20\7\7\0"+
    "\4\7\21\0\5\7\1\246\22\7\7\0\4\7\21\0"+
    "\15\7\1\247\12\7\7\0\4\7\21\0\5\7\1\250"+
    "\22\7\7\0\4\7\21\0\27\7\1\251\7\0\4\7"+
    "\21\0\1\252\27\7\7\0\4\7\21\0\14\7\1\253"+
    "\13\7\7\0\4\7\21\0\12\7\1\254\15\7\7\0"+
    "\4\7\21\0\11\7\1\255\16\7\7\0\4\7\21\0"+
    "\1\7\1\256\26\7\7\0\4\7\21\0\11\7\1\257"+
    "\16\7\7\0\4\7\21\0\1\260\27\7\7\0\4\7"+
    "\21\0\27\7\1\261\7\0\4\7\21\0\6\7\1\262"+
    "\21\7\7\0\4\7\21\0\26\7\1\263\1\7\7\0"+
    "\4\7\21\0\4\7\1\264\23\7\7\0\4\7\21\0"+
    "\2\7\1\265\25\7\7\0\4\7\21\0\12\7\1\266"+
    "\15\7\7\0\4\7\21\0\3\7\1\267\24\7\7\0"+
    "\4\7\21\0\3\7\1\270\24\7\7\0\4\7\21\0"+
    "\14\7\1\271\13\7\7\0\4\7\21\0\1\7\1\272"+
    "\26\7\7\0\4\7\21\0\1\273\27\7\7\0\4\7"+
    "\21\0\1\274\6\7\1\275\20\7\7\0\4\7\21\0"+
    "\5\7\1\276\22\7\7\0\4\7\21\0\10\7\1\277"+
    "\1\7\1\300\15\7\7\0\4\7\21\0\13\7\1\301"+
    "\14\7\7\0\4\7\21\0\11\7\1\302\16\7\7\0"+
    "\4\7\21\0\24\7\1\303\3\7\7\0\4\7\21\0"+
    "\3\7\1\304\24\7\7\0\4\7\21\0\1\305\27\7"+
    "\7\0\4\7\21\0\11\7\1\306\16\7\7\0\4\7"+
    "\21\0\11\7\1\307\16\7\7\0\4\7\21\0\1\7"+
    "\1\310\26\7\2\0\1\60\2\0\31\60\1\311\25\60"+
    "\2\0\1\60\2\0\35\60\1\312\21\60\4\0\1\221"+
    "\61\0\4\222\1\313\62\222\1\314\1\313\57\222\5\0"+
    "\4\7\21\0\3\7\1\315\24\7\7\0\4\7\21\0"+
    "\14\7\1\316\13\7\7\0\4\7\21\0\7\7\1\317"+
    "\20\7\7\0\4\7\21\0\3\7\1\320\24\7\7\0"+
    "\4\7\21\0\2\7\1\321\17\7\1\322\5\7\7\0"+
    "\4\7\21\0\3\7\1\323\24\7\7\0\4\7\21\0"+
    "\23\7\1\324\4\7\7\0\4\7\21\0\3\7\1\325"+
    "\24\7\7\0\4\7\21\0\14\7\1\326\13\7\7\0"+
    "\4\7\21\0\21\7\1\327\6\7\7\0\4\7\21\0"+
    "\7\7\1\224\20\7\7\0\4\7\21\0\1\330\27\7"+
    "\7\0\4\7\21\0\5\7\1\331\22\7\7\0\4\7"+
    "\21\0\3\7\1\332\24\7\7\0\4\7\21\0\12\7"+
    "\1\333\15\7\7\0\4\7\21\0\1\334\27\7\7\0"+
    "\4\7\21\0\11\7\1\335\16\7\7\0\4\7\21\0"+
    "\1\7\1\336\26\7\7\0\4\7\21\0\1\337\27\7"+
    "\7\0\4\7\21\0\3\7\1\340\24\7\7\0\4\7"+
    "\21\0\26\7\1\341\1\7\7\0\4\7\21\0\21\7"+
    "\1\342\6\7\7\0\4\7\21\0\1\343\27\7\7\0"+
    "\4\7\21\0\13\7\1\344\14\7\7\0\4\7\21\0"+
    "\3\7\1\345\24\7\7\0\4\7\21\0\6\7\1\346"+
    "\5\7\1\347\13\7\7\0\4\7\21\0\6\7\1\350"+
    "\21\7\7\0\4\7\21\0\3\7\1\351\1\7\1\352"+
    "\22\7\7\0\4\7\21\0\15\7\1\353\12\7\7\0"+
    "\4\7\21\0\5\7\1\354\22\7\7\0\4\7\21\0"+
    "\1\7\1\355\26\7\7\0\4\7\21\0\5\7\1\356"+
    "\22\7\7\0\4\7\21\0\6\7\1\357\21\7\7\0"+
    "\4\7\21\0\11\7\1\360\16\7\7\0\4\7\21\0"+
    "\21\7\1\361\6\7\7\0\4\7\21\0\3\7\1\362"+
    "\24\7\7\0\4\7\21\0\7\7\1\363\20\7\7\0"+
    "\4\7\21\0\5\7\1\364\22\7\7\0\4\7\21\0"+
    "\1\365\6\7\1\366\20\7\7\0\4\7\21\0\3\7"+
    "\1\367\24\7\7\0\4\7\21\0\12\7\1\370\15\7"+
    "\7\0\4\7\21\0\11\7\1\371\16\7\7\0\4\7"+
    "\21\0\6\7\1\372\21\7\7\0\4\7\21\0\22\7"+
    "\1\373\5\7\7\0\4\7\21\0\6\7\1\374\21\7"+
    "\7\0\4\7\21\0\12\7\1\375\15\7\7\0\4\7"+
    "\21\0\1\376\27\7\2\0\1\60\2\0\32\60\1\377"+
    "\24\60\2\0\1\60\2\0\36\60\1\311\20\60\2\0"+
    "\3\222\1\221\1\313\57\222\5\0\4\7\21\0\26\7"+
    "\1\u0100\1\7\7\0\4\7\21\0\13\7\1\u0101\14\7"+
    "\7\0\4\7\21\0\1\7\1\u0102\26\7\7\0\4\7"+
    "\21\0\1\7\1\u0103\26\7\7\0\4\7\10\0\1\u0104"+
    "\10\0\30\7\7\0\4\7\21\0\1\7\1\u0105\10\7"+
    "\1\u0106\15\7\7\0\4\7\21\0\1\7\1\u0107\26\7"+
    "\7\0\4\7\21\0\1\u0108\27\7\7\0\4\7\21\0"+
    "\14\7\1\u0109\13\7\7\0\4\7\21\0\6\7\1\u010a"+
    "\21\7\7\0\4\7\21\0\1\7\1\u010b\26\7\7\0"+
    "\4\7\21\0\21\7\1\u010c\6\7\7\0\4\7\21\0"+
    "\1\7\1\u010d\26\7\7\0\4\7\21\0\1\u010e\27\7"+
    "\7\0\4\7\21\0\5\7\1\u010f\22\7\7\0\4\7"+
    "\21\0\11\7\1\u0110\16\7\7\0\4\7\21\0\1\7"+
    "\1\u0111\26\7\7\0\4\7\21\0\21\7\1\u0112\6\7"+
    "\7\0\4\7\21\0\1\7\1\u0113\26\7\7\0\4\7"+
    "\21\0\3\7\1\u0114\24\7\7\0\4\7\21\0\1\7"+
    "\1\u0115\26\7\7\0\4\7\21\0\1\7\1\u0116\26\7"+
    "\7\0\4\7\21\0\2\7\1\u0117\25\7\7\0\4\7"+
    "\21\0\6\7\1\u0118\21\7\7\0\4\7\21\0\23\7"+
    "\1\u0119\4\7\7\0\4\7\21\0\5\7\1\u011a\22\7"+
    "\7\0\4\7\21\0\20\7\1\u011b\7\7\7\0\4\7"+
    "\21\0\12\7\1\u011c\15\7\7\0\4\7\21\0\22\7"+
    "\1\u011d\5\7\7\0\4\7\21\0\7\7\1\u011e\20\7"+
    "\7\0\4\7\21\0\1\7\1\u011f\26\7\7\0\4\7"+
    "\21\0\11\7\1\u0120\16\7\7\0\4\7\21\0\1\u0121"+
    "\27\7\7\0\4\7\21\0\12\7\1\u0122\15\7\7\0"+
    "\4\7\21\0\13\7\1\u0123\14\7\7\0\4\7\21\0"+
    "\3\7\1\u0124\24\7\7\0\4\7\21\0\1\u0125\27\7"+
    "\7\0\4\7\21\0\3\7\1\u0126\24\7\7\0\4\7"+
    "\21\0\12\7\1\u0127\15\7\7\0\4\7\21\0\14\7"+
    "\1\u0128\13\7\45\0\1\u0129\25\0\4\7\21\0\12\7"+
    "\1\u012a\15\7\7\0\4\7\21\0\7\7\1\u012b\3\7"+
    "\1\u012c\14\7\7\0\4\7\21\0\1\u012d\27\7\7\0"+
    "\4\7\21\0\11\7\1\u012e\16\7\7\0\4\7\21\0"+
    "\1\7\1\u012f\26\7\7\0\4\7\21\0\6\7\1\u0130"+
    "\21\7\7\0\4\7\21\0\1\u0131\27\7\7\0\4\7"+
    "\21\0\5\7\1\u0132\22\7\7\0\4\7\21\0\1\7"+
    "\1\u0133\26\7\7\0\4\7\21\0\21\7\1\u0134\6\7"+
    "\7\0\4\7\21\0\22\7\1\u0135\5\7\7\0\4\7"+
    "\21\0\4\7\1\u0136\23\7\7\0\4\7\21\0\23\7"+
    "\1\u0137\4\7\7\0\4\7\21\0\1\u0138\27\7\7\0"+
    "\4\7\21\0\1\7\1\u0139\26\7\7\0\4\7\21\0"+
    "\6\7\1\u013a\21\7\7\0\4\7\21\0\3\7\1\256"+
    "\24\7\7\0\4\7\21\0\11\7\1\u013b\16\7\7\0"+
    "\4\7\21\0\1\u013c\27\7\7\0\4\7\21\0\17\7"+
    "\1\u013d\10\7\7\0\4\7\21\0\11\7\1\u013e\16\7"+
    "\7\0\4\7\21\0\12\7\1\u013f\15\7\7\0\4\7"+
    "\21\0\4\7\1\u0140\23\7\7\0\4\7\21\0\26\7"+
    "\1\u0141\1\7\40\0\1\u0142\32\0\4\7\21\0\5\7"+
    "\1\u0143\22\7\7\0\4\7\21\0\11\7\1\u0144\16\7"+
    "\7\0\4\7\21\0\7\7\1\u0145\20\7\7\0\4\7"+
    "\21\0\14\7\1\u0146\13\7\7\0\4\7\21\0\25\7"+
    "\1\u0147\2\7\7\0\4\7\21\0\25\7\1\u0148\2\7"+
    "\7\0\4\7\21\0\21\7\1\u0149\6\7\7\0\4\7"+
    "\21\0\25\7\1\u014a\2\7\7\0\4\7\21\0\5\7"+
    "\1\u014b\22\7\7\0\4\7\21\0\3\7\1\u014c\24\7"+
    "\7\0\4\7\21\0\3\7\1\u014d\24\7\7\0\4\7"+
    "\21\0\1\u014e\27\7\7\0\4\7\21\0\21\7\1\u014f"+
    "\6\7\7\0\4\7\21\0\14\7\1\u0150\13\7\7\0"+
    "\4\7\21\0\5\7\1\u0151\22\7\7\0\4\7\21\0"+
    "\2\7\1\u0152\25\7\7\0\4\7\21\0\6\7\1\u0153"+
    "\21\7\7\0\4\7\21\0\14\7\1\u0154\13\7\7\0"+
    "\4\7\21\0\12\7\1\u0155\15\7\7\0\4\7\21\0"+
    "\1\u0156\27\7\7\0\4\7\21\0\21\7\1\u0157\6\7"+
    "\7\0\4\7\21\0\12\7\1\u0158\15\7\7\0\4\7"+
    "\21\0\13\7\1\u0159\14\7\7\0\4\7\21\0\1\7"+
    "\1\u015a\26\7\7\0\4\7\21\0\12\7\1\u015b\15\7"+
    "\7\0\4\7\21\0\3\7\1\u015c\24\7\7\0\4\7"+
    "\21\0\12\7\1\u015d\15\7\7\0\4\7\21\0\3\7"+
    "\1\u015e\24\7\7\0\4\7\21\0\1\u015f\27\7\7\0"+
    "\4\7\21\0\1\u0160\27\7\7\0\4\7\21\0\7\7"+
    "\1\u0161\20\7\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12636];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\3\1\1\11\7\1\12\11\25\1\1\11"+
    "\25\1\1\11\1\1\2\0\10\11\73\1\4\11\1\1"+
    "\1\11\2\0\67\1\1\0\70\1\1\0\44\1\1\0"+
    "\30\1\1\11\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3680) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <"+
                                                    yytext()+">");
            }
          case 101: break;
          case 2: 
            { /*ignore*/
            }
          case 102: break;
          case 3: 
            { return symbol(sym.DIVISION, yytext());
            }
          case 103: break;
          case 4: 
            { return symbol(sym.POW, yytext());
            }
          case 104: break;
          case 5: 
            { return symbol(sym.IDENTIFIER, yytext());
            }
          case 105: break;
          case 6: 
            { return symbol(sym.DECINTEGERLITERAL, yytext());
            }
          case 106: break;
          case 7: 
            { return symbol(sym.RELATIONAL_OPERATOR, yytext());
            }
          case 107: break;
          case 8: 
            { return symbol(sym.EQ, yytext());
            }
          case 108: break;
          case 9: 
            { return symbol(sym.PLUS, yytext());
            }
          case 109: break;
          case 10: 
            { return symbol(sym.MINUS, yytext());
            }
          case 110: break;
          case 11: 
            { return symbol(sym.RESID, yytext());
            }
          case 111: break;
          case 12: 
            { 
            }
          case 112: break;
          case 13: 
            { return symbol(sym.OPENING_KEY, yytext());
            }
          case 113: break;
          case 14: 
            { return symbol(sym.CLOSING_KEY, yytext());
            }
          case 114: break;
          case 15: 
            { return symbol(sym.OPENING_PARENT, yytext());
            }
          case 115: break;
          case 16: 
            { return symbol(sym.CLOSING_PARENT, yytext());
            }
          case 116: break;
          case 17: 
            { return symbol(sym.SEMICOLON, yytext());
            }
          case 117: break;
          case 18: 
            { return symbol(sym.OPENING_BRACKET, yytext());
            }
          case 118: break;
          case 19: 
            { return symbol(sym.CLOSING_BRACKET, yytext());
            }
          case 119: break;
          case 20: 
            { return symbol(sym.COMMA, yytext());
            }
          case 120: break;
          case 21: 
            { string.setLength(0); yybegin(STRING);
            }
          case 121: break;
          case 22: 
            { string.append( yytext() );
            }
          case 122: break;
          case 23: 
            { yybegin(YYINITIAL); 
                                       return symbol(sym.STRINGLITERAL, 
                                       string.toString());
            }
          case 123: break;
          case 24: 
            { string.append('\\');
            }
          case 124: break;
          case 25: 
            { return symbol(sym.POWPOW, yytext());
            }
          case 125: break;
          case 26: 
            { return symbol(sym.PLUSEQ, yytext());
            }
          case 126: break;
          case 27: 
            { return symbol(sym.PLUSPLUS, yytext());
            }
          case 127: break;
          case 28: 
            { return symbol(sym.MINUSEQ, yytext());
            }
          case 128: break;
          case 29: 
            { return symbol(sym.MINUSMINUS, yytext());
            }
          case 129: break;
          case 30: 
            { return symbol(sym.AND, yytext());
            }
          case 130: break;
          case 31: 
            { return symbol(sym.OR, yytext());
            }
          case 131: break;
          case 32: 
            { return symbol(sym.AS, yytext());
            }
          case 132: break;
          case 33: 
            { return symbol(sym.IF, yytext());
            }
          case 133: break;
          case 34: 
            { return symbol(sym.IS, yytext());
            }
          case 134: break;
          case 35: 
            { return symbol(sym.IN, yytext());
            }
          case 135: break;
          case 36: 
            { return symbol(sym.DO, yytext());
            }
          case 136: break;
          case 37: 
            { return symbol(sym.ON, yytext());
            }
          case 137: break;
          case 38: 
            { string.append('\t');
            }
          case 138: break;
          case 39: 
            { string.append('\r');
            }
          case 139: break;
          case 40: 
            { string.append('\n');
            }
          case 140: break;
          case 41: 
            { string.append('\"');
            }
          case 141: break;
          case 42: 
            { /* ignore */
            }
          case 142: break;
          case 43: 
            { return symbol(sym.TRY, yytext());
            }
          case 143: break;
          case 44: 
            { return symbol(sym.FOR, yytext());
            }
          case 144: break;
          case 45: 
            { return symbol(sym.SET, yytext());
            }
          case 145: break;
          case 46: 
            { return symbol(sym.DATA_TYPE,yytext());
            }
          case 146: break;
          case 47: 
            { return symbol(sym.NEW, yytext());
            }
          case 147: break;
          case 48: 
            { return symbol(sym.GET, yytext());
            }
          case 148: break;
          case 49: 
            { return symbol(sym.BOOLEAN_OPERATOR, yytext());
            }
          case 149: break;
          case 50: 
            { return symbol(sym.THIS, yytext());
            }
          case 150: break;
          case 51: 
            { return symbol(sym.ELSE, yytext());
            }
          case 151: break;
          case 52: 
            { return symbol(sym.ENUM, yytext());
            }
          case 152: break;
          case 53: 
            { return symbol(sym.SHOW, yytext());
            }
          case 153: break;
          case 54: 
            { return symbol(sym.SYNC, yytext());
            }
          case 154: break;
          case 55: 
            { return symbol(sym.VOID, yytext());
            }
          case 155: break;
          case 56: 
            { return symbol(sym.NULL, yytext());
            }
          case 156: break;
          case 57: 
            { return symbol(sym.BOOL, yytext());
            }
          case 157: break;
          case 58: 
            { return symbol(sym.CASE, yytext());
            }
          case 158: break;
          case 59: 
            { return symbol(sym.HIDE, yytext());
            }
          case 159: break;
          case 60: 
            { return symbol(sym.MAIN, yytext());
            }
          case 160: break;
          case 61: 
            { return symbol(sym.WITH, yytext());
            }
          case 161: break;
          case 62: 
            { return symbol(sym.PART, yytext());
            }
          case 162: break;
          case 63: 
            { return symbol(sym.THROW, yytext());
            }
          case 163: break;
          case 64: 
            { return symbol(sym.FINAL, yytext());
            }
          case 164: break;
          case 65: 
            { return symbol(sym.ASYNC, yytext());
            }
          case 165: break;
          case 66: 
            { return symbol(sym.AWAIT, yytext());
            }
          case 166: break;
          case 67: 
            { return symbol(sym.SUPER, yytext());
            }
          case 167: break;
          case 68: 
            { return symbol(sym.BREAK, yytext());
            }
          case 168: break;
          case 69: 
            { return symbol(sym.CATCH, yytext());
            }
          case 169: break;
          case 70: 
            { return symbol(sym.CLASS, yytext());
            }
          case 170: break;
          case 71: 
            { return symbol(sym.CONST, yytext());
            }
          case 171: break;
          case 72: 
            { return symbol(sym.MIXIN, yytext());
            }
          case 172: break;
          case 73: 
            { return symbol(sym.YIELD, yytext());
            }
          case 173: break;
          case 74: 
            { return symbol(sym.WHILE, yytext());
            }
          case 174: break;
          case 75: 
            { return symbol(sym.PRINT, yytext());
            }
          case 175: break;
          case 76: 
            { return symbol(sym.RETURN, yytext());
            }
          case 176: break;
          case 77: 
            { return symbol(sym.EXPORT, yytext());
            }
          case 177: break;
          case 78: 
            { return symbol(sym.ASSERT, yytext());
            }
          case 178: break;
          case 79: 
            { return symbol(sym.STATIC, yytext());
            }
          case 179: break;
          case 80: 
            { return symbol(sym.SWITCH, yytext());
            }
          case 180: break;
          case 81: 
            { return symbol(sym.IMPORT, yytext());
            }
          case 181: break;
          case 82: 
            { return symbol(sym.STRING, yytext());
            }
          case 182: break;
          case 83: 
            { return symbol(sym.TYPEDEF, yytext());
            }
          case 183: break;
          case 84: 
            { return symbol(sym.RETHROW, yytext());
            }
          case 184: break;
          case 85: 
            { return symbol(sym.EXTENDS, yytext());
            }
          case 185: break;
          case 86: 
            { return symbol(sym.FACTORY, yytext());
            }
          case 186: break;
          case 87: 
            { return symbol(sym.FINALLY, yytext());
            }
          case 187: break;
          case 88: 
            { return symbol(sym.LIBRARY, yytext());
            }
          case 188: break;
          case 89: 
            { return symbol(sym.DEFAULT, yytext());
            }
          case 189: break;
          case 90: 
            { return symbol(sym.DYNAMIC, yytext());
            }
          case 190: break;
          case 91: 
            { return symbol(sym.EXTERNAL, yytext());
            }
          case 191: break;
          case 92: 
            { return symbol(sym.FUNCTION, yytext());
            }
          case 192: break;
          case 93: 
            { return symbol(sym.ABSTRACT, yytext());
            }
          case 193: break;
          case 94: 
            { return symbol(sym.DEFERRED, yytext());
            }
          case 194: break;
          case 95: 
            { return symbol(sym.OPERATOR, yytext());
            }
          case 195: break;
          case 96: 
            { return symbol(sym.CONTINUE, yytext());
            }
          case 196: break;
          case 97: 
            { return symbol(sym.EXTENSION, yytext());
            }
          case 197: break;
          case 98: 
            { return symbol(sym.INTERFACE, yytext());
            }
          case 198: break;
          case 99: 
            { return symbol(sym.COVARIANT, yytext());
            }
          case 199: break;
          case 100: 
            { return symbol(sym.IMPLEMENTS, yytext());
            }
          case 200: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
