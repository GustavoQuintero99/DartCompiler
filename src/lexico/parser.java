
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 05 01:00:19 CST 2022
//----------------------------------------------------

package lexico;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 05 01:00:19 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\225\000\002\002\004\000\002\002\011\000\002\002" +
    "\012\000\002\002\011\000\002\002\010\000\002\012\004" +
    "\000\002\012\003\000\002\012\004\000\002\012\003\000" +
    "\002\012\004\000\002\012\003\000\002\012\004\000\002" +
    "\012\003\000\002\012\004\000\002\012\003\000\002\012" +
    "\004\000\002\012\003\000\002\012\004\000\002\012\003" +
    "\000\002\012\004\000\002\012\003\000\002\012\004\000" +
    "\002\012\003\000\002\012\004\000\002\012\003\000\002" +
    "\012\004\000\002\012\003\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\004\000\002\037\004" +
    "\000\002\037\004\000\002\041\005\000\002\042\005\000" +
    "\002\042\005\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\011\003\000\002\011\005\000\002\021" +
    "\003\000\002\021\005\000\002\013\005\000\002\013\007" +
    "\000\002\013\007\000\002\013\007\000\002\013\007\000" +
    "\002\013\007\000\002\013\007\000\002\013\006\000\002" +
    "\013\011\000\002\013\011\000\002\013\011\000\002\013" +
    "\006\000\002\013\010\000\002\013\011\000\002\013\011" +
    "\000\002\013\011\000\002\013\007\000\002\013\007\000" +
    "\002\013\005\000\002\013\007\000\002\013\010\000\002" +
    "\013\010\000\002\013\007\000\002\013\010\000\002\013" +
    "\007\000\002\005\006\000\002\005\006\000\002\005\006" +
    "\000\002\005\006\000\002\005\006\000\002\005\006\000" +
    "\002\005\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\023\003\000\002\023" +
    "\003\000\002\023\004\000\002\022\003\000\002\022\005" +
    "\000\002\022\004\000\002\036\007\000\002\015\010\000" +
    "\002\015\011\000\002\015\010\000\002\015\012\000\002" +
    "\020\006\000\002\020\005\000\002\017\012\000\002\017" +
    "\011\000\002\017\012\000\002\027\003\000\002\027\004" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\024\011\000\002\025\013\000\002\026" +
    "\007\000\002\030\016\000\002\030\015\000\002\030\013" +
    "\000\002\030\012\000\002\014\005\000\002\014\003\000" +
    "\002\031\011\000\002\031\010\000\002\032\006\000\002" +
    "\033\011\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\007\006\000\002\007\011\000\002\007\007" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\003\005\000\002" +
    "\003\004\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\043\004\000\002\043\005\000\002\043\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013a\000\006\023\005\063\006\001\002\000\004\002" +
    "\u013c\001\002\000\016\015\u012a\063\u012f\133\u012b\176\u0130" +
    "\177\u012d\200\u012e\001\002\000\004\133\007\001\002\000" +
    "\004\036\010\001\002\000\004\037\011\001\002\000\004" +
    "\040\012\001\002\000\044\014\017\015\030\016\025\020" +
    "\027\023\021\024\033\036\022\041\014\051\040\052\041" +
    "\106\037\110\023\120\047\144\020\145\042\150\024\177" +
    "\045\001\002\000\050\014\ufffb\015\ufffb\016\ufffb\020\ufffb" +
    "\023\ufffb\024\ufffb\036\ufffb\041\ufffb\046\ufffb\051\ufffb\052" +
    "\ufffb\106\ufffb\110\ufffb\120\ufffb\144\ufffb\145\ufffb\150\ufffb" +
    "\177\ufffb\212\ufffb\001\002\000\004\002\ufffd\001\002\000" +
    "\050\014\ufff7\015\ufff7\016\ufff7\020\ufff7\023\ufff7\024\ufff7" +
    "\036\ufff7\041\ufff7\046\ufff7\051\ufff7\052\ufff7\106\ufff7\110" +
    "\ufff7\120\ufff7\144\ufff7\145\ufff7\150\ufff7\177\ufff7\212\ufff7" +
    "\001\002\000\044\014\017\015\030\016\025\020\027\023" +
    "\021\024\033\036\022\041\u0129\051\040\052\041\106\037" +
    "\110\023\120\047\144\020\145\042\150\024\177\045\001" +
    "\002\000\006\023\372\106\373\001\002\000\004\036\364" +
    "\001\002\000\022\025\347\030\055\031\056\075\054\076" +
    "\057\101\063\106\131\110\130\001\002\000\010\023\341" +
    "\024\336\036\022\001\002\000\004\023\335\001\002\000" +
    "\004\036\303\001\002\000\004\036\264\001\002\000\050" +
    "\014\ufff9\015\ufff9\016\ufff9\020\ufff9\023\ufff9\024\ufff9\036" +
    "\ufff9\041\ufff9\046\ufff9\051\ufff9\052\ufff9\106\ufff9\110\ufff9" +
    "\120\ufff9\144\ufff9\145\ufff9\150\ufff9\177\ufff9\212\ufff9\001" +
    "\002\000\004\040\233\001\002\000\004\023\224\001\002" +
    "\000\004\101\223\001\002\000\050\014\uffeb\015\uffeb\016" +
    "\uffeb\020\uffeb\023\uffeb\024\uffeb\036\uffeb\041\uffeb\046\uffeb" +
    "\051\uffeb\052\uffeb\106\uffeb\110\uffeb\120\uffeb\144\uffeb\145" +
    "\uffeb\150\uffeb\177\uffeb\212\uffeb\001\002\000\014\030\055" +
    "\031\056\075\054\076\057\101\221\001\002\000\050\014" +
    "\ufff5\015\ufff5\016\ufff5\020\ufff5\023\ufff5\024\ufff5\036\ufff5" +
    "\041\ufff5\046\ufff5\051\ufff5\052\ufff5\106\ufff5\110\ufff5\120" +
    "\ufff5\144\ufff5\145\ufff5\150\ufff5\177\ufff5\212\ufff5\001\002" +
    "\000\050\014\ufff3\015\ufff3\016\ufff3\020\ufff3\023\ufff3\024" +
    "\ufff3\036\ufff3\041\ufff3\046\ufff3\051\ufff3\052\ufff3\106\ufff3" +
    "\110\ufff3\120\ufff3\144\ufff3\145\ufff3\150\ufff3\177\ufff3\212" +
    "\ufff3\001\002\000\050\014\uffef\015\uffef\016\uffef\020\uffef" +
    "\023\uffef\024\uffef\036\uffef\041\uffef\046\uffef\051\uffef\052" +
    "\uffef\106\uffef\110\uffef\120\uffef\144\uffef\145\uffef\150\uffef" +
    "\177\uffef\212\uffef\001\002\000\004\023\217\001\002\000" +
    "\006\014\204\023\205\001\002\000\004\014\176\001\002" +
    "\000\004\036\164\001\002\000\050\014\uffe7\015\uffe7\016" +
    "\uffe7\020\uffe7\023\uffe7\024\uffe7\036\uffe7\041\uffe7\046\uffe7" +
    "\051\uffe7\052\uffe7\106\uffe7\110\uffe7\120\uffe7\144\uffe7\145" +
    "\uffe7\150\uffe7\177\uffe7\212\uffe7\001\002\000\050\014\uffed" +
    "\015\uffed\016\uffed\020\uffed\023\uffed\024\uffed\036\uffed\041" +
    "\uffed\046\uffed\051\uffed\052\uffed\106\uffed\110\uffed\120\uffed" +
    "\144\uffed\145\uffed\150\uffed\177\uffed\212\uffed\001\002\000" +
    "\004\023\160\001\002\000\050\014\ufff1\015\ufff1\016\ufff1" +
    "\020\ufff1\023\ufff1\024\ufff1\036\ufff1\041\ufff1\046\ufff1\051" +
    "\ufff1\052\ufff1\106\ufff1\110\ufff1\120\ufff1\144\ufff1\145\ufff1" +
    "\150\ufff1\177\ufff1\212\ufff1\001\002\000\004\036\065\001" +
    "\002\000\014\030\055\031\056\075\054\076\057\101\053" +
    "\001\002\000\050\014\uffe9\015\uffe9\016\uffe9\020\uffe9\023" +
    "\uffe9\024\uffe9\036\uffe9\041\uffe9\046\uffe9\051\uffe9\052\uffe9" +
    "\106\uffe9\110\uffe9\120\uffe9\144\uffe9\145\uffe9\150\uffe9\177" +
    "\uffe9\212\uffe9\001\002\000\010\023\061\024\033\036\022" +
    "\001\002\000\050\014\uffe1\015\uffe1\016\uffe1\020\uffe1\023" +
    "\uffe1\024\uffe1\036\uffe1\041\uffe1\046\uffe1\051\uffe1\052\uffe1" +
    "\106\uffe1\110\uffe1\120\uffe1\144\uffe1\145\uffe1\150\uffe1\177" +
    "\uffe1\212\uffe1\001\002\000\010\023\uffda\024\uffda\036\uffda" +
    "\001\002\000\010\023\uffd8\024\uffd8\036\uffd8\001\002\000" +
    "\010\023\uffd7\024\uffd7\036\uffd7\001\002\000\010\023\uffd9" +
    "\024\uffd9\036\uffd9\001\002\000\050\014\uffe4\015\uffe4\016" +
    "\uffe4\020\uffe4\023\uffe4\024\uffe4\036\uffe4\041\uffe4\046\uffe4" +
    "\051\uffe4\052\uffe4\106\uffe4\110\uffe4\120\uffe4\144\uffe4\145" +
    "\uffe4\150\uffe4\177\uffe4\212\uffe4\001\002\000\014\030\055" +
    "\031\056\075\054\076\057\101\063\001\002\000\010\023" +
    "\061\024\033\036\022\001\002\000\050\014\uffe2\015\uffe2" +
    "\016\uffe2\020\uffe2\023\uffe2\024\uffe2\036\uffe2\041\uffe2\046" +
    "\uffe2\051\uffe2\052\uffe2\106\uffe2\110\uffe2\120\uffe2\144\uffe2" +
    "\145\uffe2\150\uffe2\177\uffe2\212\uffe2\001\002\000\050\014" +
    "\uffe5\015\uffe5\016\uffe5\020\uffe5\023\uffe5\024\uffe5\036\uffe5" +
    "\041\uffe5\046\uffe5\051\uffe5\052\uffe5\106\uffe5\110\uffe5\120" +
    "\uffe5\144\uffe5\145\uffe5\150\uffe5\177\uffe5\212\uffe5\001\002" +
    "\000\006\014\105\023\106\001\002\000\004\040\067\001" +
    "\002\000\042\014\017\015\030\016\025\020\027\023\021" +
    "\024\033\036\022\051\040\052\041\106\037\110\023\120" +
    "\047\144\020\145\042\150\024\177\045\001\002\000\044" +
    "\014\017\015\030\016\025\020\027\023\021\024\033\036" +
    "\022\041\072\051\040\052\041\106\037\110\023\120\047" +
    "\144\020\145\042\150\024\177\045\001\002\000\050\014" +
    "\ufffc\015\ufffc\016\ufffc\020\ufffc\023\ufffc\024\ufffc\036\ufffc" +
    "\041\ufffc\046\ufffc\051\ufffc\052\ufffc\106\ufffc\110\ufffc\120" +
    "\ufffc\144\ufffc\145\ufffc\150\ufffc\177\ufffc\212\ufffc\001\002" +
    "\000\050\014\uff8a\015\uff8a\016\uff8a\020\uff8a\023\uff8a\024" +
    "\uff8a\036\uff8a\041\uff8a\046\uff8a\051\uff8a\052\uff8a\106\uff8a" +
    "\110\uff8a\120\uff8a\144\uff8a\145\uff8a\150\uff8a\177\uff8a\212" +
    "\uff8a\001\002\000\050\014\ufff8\015\ufff8\016\ufff8\020\ufff8" +
    "\023\ufff8\024\ufff8\036\ufff8\041\ufff8\046\ufff8\051\ufff8\052" +
    "\ufff8\106\ufff8\110\ufff8\120\ufff8\144\ufff8\145\ufff8\150\ufff8" +
    "\177\ufff8\212\ufff8\001\002\000\050\014\ufffa\015\ufffa\016" +
    "\ufffa\020\ufffa\023\ufffa\024\ufffa\036\ufffa\041\ufffa\046\ufffa" +
    "\051\ufffa\052\ufffa\106\ufffa\110\ufffa\120\ufffa\144\ufffa\145" +
    "\ufffa\150\ufffa\177\ufffa\212\ufffa\001\002\000\050\014\uffec" +
    "\015\uffec\016\uffec\020\uffec\023\uffec\024\uffec\036\uffec\041" +
    "\uffec\046\uffec\051\uffec\052\uffec\106\uffec\110\uffec\120\uffec" +
    "\144\uffec\145\uffec\150\uffec\177\uffec\212\uffec\001\002\000" +
    "\050\014\ufff6\015\ufff6\016\ufff6\020\ufff6\023\ufff6\024\ufff6" +
    "\036\ufff6\041\ufff6\046\ufff6\051\ufff6\052\ufff6\106\ufff6\110" +
    "\ufff6\120\ufff6\144\ufff6\145\ufff6\150\ufff6\177\ufff6\212\ufff6" +
    "\001\002\000\050\014\ufff4\015\ufff4\016\ufff4\020\ufff4\023" +
    "\ufff4\024\ufff4\036\ufff4\041\ufff4\046\ufff4\051\ufff4\052\ufff4" +
    "\106\ufff4\110\ufff4\120\ufff4\144\ufff4\145\ufff4\150\ufff4\177" +
    "\ufff4\212\ufff4\001\002\000\050\014\ufff2\015\ufff2\016\ufff2" +
    "\020\ufff2\023\ufff2\024\ufff2\036\ufff2\041\ufff2\046\ufff2\051" +
    "\ufff2\052\ufff2\106\ufff2\110\ufff2\120\ufff2\144\ufff2\145\ufff2" +
    "\150\ufff2\177\ufff2\212\ufff2\001\002\000\050\014\uffe8\015" +
    "\uffe8\016\uffe8\020\uffe8\023\uffe8\024\uffe8\036\uffe8\041\uffe8" +
    "\046\uffe8\051\uffe8\052\uffe8\106\uffe8\110\uffe8\120\uffe8\144" +
    "\uffe8\145\uffe8\150\uffe8\177\uffe8\212\uffe8\001\002\000\050" +
    "\014\uffee\015\uffee\016\uffee\020\uffee\023\uffee\024\uffee\036" +
    "\uffee\041\uffee\046\uffee\051\uffee\052\uffee\106\uffee\110\uffee" +
    "\120\uffee\144\uffee\145\uffee\150\uffee\177\uffee\212\uffee\001" +
    "\002\000\050\014\ufff0\015\ufff0\016\ufff0\020\ufff0\023\ufff0" +
    "\024\ufff0\036\ufff0\041\ufff0\046\ufff0\051\ufff0\052\ufff0\106" +
    "\ufff0\110\ufff0\120\ufff0\144\ufff0\145\ufff0\150\ufff0\177\ufff0" +
    "\212\ufff0\001\002\000\050\014\uffea\015\uffea\016\uffea\020" +
    "\uffea\023\uffea\024\uffea\036\uffea\041\uffea\046\uffea\051\uffea" +
    "\052\uffea\106\uffea\110\uffea\120\uffea\144\uffea\145\uffea\150" +
    "\uffea\177\uffea\212\uffea\001\002\000\004\023\144\001\002" +
    "\000\006\025\115\101\116\001\002\000\004\037\110\001" +
    "\002\000\004\040\111\001\002\000\044\014\017\015\030" +
    "\016\025\020\027\023\021\024\033\036\022\041\112\051" +
    "\040\052\041\106\037\110\023\120\047\144\020\145\042" +
    "\150\024\177\045\001\002\000\050\014\uff82\015\uff82\016" +
    "\uff82\020\uff82\023\uff82\024\uff82\036\uff82\041\uff82\046\uff82" +
    "\051\uff82\052\uff82\106\uff82\110\uff82\120\uff82\144\uff82\145" +
    "\uff82\150\uff82\177\uff82\212\uff82\001\002\000\044\014\017" +
    "\015\030\016\025\020\027\023\021\024\033\036\022\041" +
    "\114\051\040\052\041\106\037\110\023\120\047\144\020" +
    "\145\042\150\024\177\045\001\002\000\050\014\uff83\015" +
    "\uff83\016\uff83\020\uff83\023\uff83\024\uff83\036\uff83\041\uff83" +
    "\046\uff83\051\uff83\052\uff83\106\uff83\110\uff83\120\uff83\144" +
    "\uff83\145\uff83\150\uff83\177\uff83\212\uff83\001\002\000\004" +
    "\024\134\001\002\000\004\023\117\001\002\000\004\033" +
    "\120\001\002\000\004\024\121\001\002\000\004\101\122" +
    "\001\002\000\012\023\126\037\124\106\037\110\023\001" +
    "\002\000\004\037\133\001\002\000\004\040\uff86\001\002" +
    "\000\004\037\uff84\001\002\000\010\025\127\106\131\110" +
    "\130\001\002\000\004\024\132\001\002\000\006\037\uffa6" +
    "\101\uffa6\001\002\000\006\037\uffa7\101\uffa7\001\002\000" +
    "\004\037\uff85\001\002\000\004\040\uff87\001\002\000\004" +
    "\101\135\001\002\000\004\023\136\001\002\000\004\033" +
    "\137\001\002\000\004\024\140\001\002\000\004\101\141" +
    "\001\002\000\010\023\126\106\037\110\023\001\002\000" +
    "\004\037\143\001\002\000\004\040\uff88\001\002\000\006" +
    "\025\146\116\145\001\002\000\004\023\157\001\002\000" +
    "\004\024\147\001\002\000\004\101\150\001\002\000\004" +
    "\023\151\001\002\000\004\033\152\001\002\000\004\024" +
    "\153\001\002\000\004\101\154\001\002\000\010\023\126" +
    "\106\037\110\023\001\002\000\004\037\156\001\002\000" +
    "\004\040\uff89\001\002\000\004\037\uff81\001\002\000\004" +
    "\025\161\001\002\000\004\035\162\001\002\000\004\101" +
    "\163\001\002\000\050\014\uffb6\015\uffb6\016\uffb6\020\uffb6" +
    "\023\uffb6\024\uffb6\036\uffb6\041\uffb6\046\uffb6\051\uffb6\052" +
    "\uffb6\106\uffb6\110\uffb6\120\uffb6\144\uffb6\145\uffb6\150\uffb6" +
    "\177\uffb6\212\uffb6\001\002\000\006\023\167\102\165\001" +
    "\002\000\006\037\uffa5\075\uffa5\001\002\000\006\037\uffa2" +
    "\075\174\001\002\000\012\023\167\037\uffa4\075\uffa4\102" +
    "\165\001\002\000\004\037\171\001\002\000\004\101\172" +
    "\001\002\000\050\014\uff9f\015\uff9f\016\uff9f\020\uff9f\023" +
    "\uff9f\024\uff9f\036\uff9f\041\uff9f\046\uff9f\051\uff9f\052\uff9f" +
    "\106\uff9f\110\uff9f\120\uff9f\144\uff9f\145\uff9f\150\uff9f\177" +
    "\uff9f\212\uff9f\001\002\000\006\037\uffa3\075\uffa3\001\002" +
    "\000\010\023\167\037\uffa0\102\165\001\002\000\004\037" +
    "\uffa1\001\002\000\004\023\177\001\002\000\004\025\200" +
    "\001\002\000\006\024\201\101\202\001\002\000\004\101" +
    "\203\001\002\000\050\014\uffb1\015\uffb1\016\uffb1\020\uffb1" +
    "\023\uffb1\024\uffb1\036\uffb1\041\uffb1\046\uffb1\051\uffb1\052" +
    "\uffb1\106\uffb1\110\uffb1\120\uffb1\144\uffb1\145\uffb1\150\uffb1" +
    "\177\uffb1\212\uffb1\001\002\000\050\014\uffb2\015\uffb2\016" +
    "\uffb2\020\uffb2\023\uffb2\024\uffb2\036\uffb2\041\uffb2\046\uffb2" +
    "\051\uffb2\052\uffb2\106\uffb2\110\uffb2\120\uffb2\144\uffb2\145" +
    "\uffb2\150\uffb2\177\uffb2\212\uffb2\001\002\000\004\023\212" +
    "\001\002\000\004\025\206\001\002\000\004\071\207\001" +
    "\002\000\004\014\210\001\002\000\004\101\211\001\002" +
    "\000\050\014\uffb5\015\uffb5\016\uffb5\020\uffb5\023\uffb5\024" +
    "\uffb5\036\uffb5\041\uffb5\046\uffb5\051\uffb5\052\uffb5\106\uffb5" +
    "\110\uffb5\120\uffb5\144\uffb5\145\uffb5\150\uffb5\177\uffb5\212" +
    "\uffb5\001\002\000\004\025\213\001\002\000\006\024\214" +
    "\101\215\001\002\000\004\101\216\001\002\000\050\014" +
    "\uffb3\015\uffb3\016\uffb3\020\uffb3\023\uffb3\024\uffb3\036\uffb3" +
    "\041\uffb3\046\uffb3\051\uffb3\052\uffb3\106\uffb3\110\uffb3\120" +
    "\uffb3\144\uffb3\145\uffb3\150\uffb3\177\uffb3\212\uffb3\001\002" +
    "\000\050\014\uffb4\015\uffb4\016\uffb4\020\uffb4\023\uffb4\024" +
    "\uffb4\036\uffb4\041\uffb4\046\uffb4\051\uffb4\052\uffb4\106\uffb4" +
    "\110\uffb4\120\uffb4\144\uffb4\145\uffb4\150\uffb4\177\uffb4\212" +
    "\uffb4\001\002\000\006\037\uffa9\101\uffa9\001\002\000\010" +
    "\023\061\024\033\036\022\001\002\000\050\014\uffe3\015" +
    "\uffe3\016\uffe3\020\uffe3\023\uffe3\024\uffe3\036\uffe3\041\uffe3" +
    "\046\uffe3\051\uffe3\052\uffe3\106\uffe3\110\uffe3\120\uffe3\144" +
    "\uffe3\145\uffe3\150\uffe3\177\uffe3\212\uffe3\001\002\000\050" +
    "\014\uffe6\015\uffe6\016\uffe6\020\uffe6\023\uffe6\024\uffe6\036" +
    "\uffe6\041\uffe6\046\uffe6\051\uffe6\052\uffe6\106\uffe6\110\uffe6" +
    "\120\uffe6\144\uffe6\145\uffe6\150\uffe6\177\uffe6\212\uffe6\001" +
    "\002\000\050\014\uffaa\015\uffaa\016\uffaa\020\uffaa\023\uffaa" +
    "\024\uffaa\036\uffaa\041\uffaa\046\uffaa\051\uffaa\052\uffaa\106" +
    "\uffaa\110\uffaa\120\uffaa\144\uffaa\145\uffaa\150\uffaa\177\uffaa" +
    "\212\uffaa\001\002\000\006\025\225\101\226\001\002\000" +
    "\006\023\230\102\227\001\002\000\050\014\uffb7\015\uffb7" +
    "\016\uffb7\020\uffb7\023\uffb7\024\uffb7\036\uffb7\041\uffb7\046" +
    "\uffb7\051\uffb7\052\uffb7\106\uffb7\110\uffb7\120\uffb7\144\uffb7" +
    "\145\uffb7\150\uffb7\177\uffb7\212\uffb7\001\002\000\004\101" +
    "\232\001\002\000\004\101\231\001\002\000\050\014\uffb8" +
    "\015\uffb8\016\uffb8\020\uffb8\023\uffb8\024\uffb8\036\uffb8\041" +
    "\uffb8\046\uffb8\051\uffb8\052\uffb8\106\uffb8\110\uffb8\120\uffb8" +
    "\144\uffb8\145\uffb8\150\uffb8\177\uffb8\212\uffb8\001\002\000" +
    "\050\014\uffb9\015\uffb9\016\uffb9\020\uffb9\023\uffb9\024\uffb9" +
    "\036\uffb9\041\uffb9\046\uffb9\051\uffb9\052\uffb9\106\uffb9\110" +
    "\uffb9\120\uffb9\144\uffb9\145\uffb9\150\uffb9\177\uffb9\212\uffb9" +
    "\001\002\000\042\014\017\015\030\016\025\020\027\023" +
    "\021\024\033\036\022\051\040\052\041\106\037\110\023" +
    "\120\047\144\020\145\042\150\024\177\045\001\002\000" +
    "\044\014\017\015\030\016\025\020\027\023\021\024\033" +
    "\036\022\041\235\051\040\052\041\106\037\110\023\120" +
    "\047\144\020\145\042\150\024\177\045\001\002\000\004" +
    "\144\236\001\002\000\004\036\237\001\002\000\014\023" +
    "\242\024\241\033\245\035\244\102\240\001\002\000\004" +
    "\033\262\001\002\000\004\033\260\001\002\000\004\033" +
    "\253\001\002\000\004\037\251\001\002\000\006\033\247" +
    "\037\uff95\001\002\000\004\035\246\001\002\000\004\037" +
    "\uff94\001\002\000\004\035\250\001\002\000\004\037\uff93" +
    "\001\002\000\004\101\252\001\002\000\050\014\uff8b\015" +
    "\uff8b\016\uff8b\020\uff8b\023\uff8b\024\uff8b\036\uff8b\041\uff8b" +
    "\046\uff8b\051\uff8b\052\uff8b\106\uff8b\110\uff8b\120\uff8b\144" +
    "\uff8b\145\uff8b\150\uff8b\177\uff8b\212\uff8b\001\002\000\012" +
    "\023\256\024\255\035\257\102\254\001\002\000\004\037" +
    "\uff8f\001\002\000\004\037\uff91\001\002\000\004\037\uff90" +
    "\001\002\000\004\037\uff92\001\002\000\004\024\261\001" +
    "\002\000\004\037\uff8e\001\002\000\004\102\263\001\002" +
    "\000\004\037\uff8d\001\002\000\014\023\242\024\241\033" +
    "\245\035\244\102\240\001\002\000\004\037\266\001\002" +
    "\000\044\014\017\015\030\016\025\020\027\023\021\024" +
    "\033\036\022\040\267\051\040\052\041\106\037\110\023" +
    "\120\047\144\020\145\042\150\024\177\045\001\002\000" +
    "\044\014\017\015\030\016\025\020\027\023\021\024\033" +
    "\036\022\041\272\051\040\052\041\106\037\110\023\120" +
    "\047\144\020\145\042\150\024\177\045\001\002\000\044" +
    "\014\017\015\030\016\025\020\027\023\021\024\033\036" +
    "\022\051\040\052\041\106\037\110\023\120\047\144\020" +
    "\145\042\150\024\177\045\212\271\001\002\000\050\014" +
    "\uff9e\015\uff9e\016\uff9e\020\uff9e\023\uff9e\024\uff9e\036\uff9e" +
    "\041\uff9e\046\uff9e\051\uff9e\052\uff9e\106\uff9e\110\uff9e\120" +
    "\uff9e\144\uff9e\145\uff9e\150\uff9e\177\uff9e\212\uff9e\001\002" +
    "\000\050\014\uff9c\015\uff9c\016\uff9c\020\uff9c\023\uff9c\024" +
    "\uff9c\036\uff9c\041\uff9c\046\uff9c\051\uff9c\052\uff9c\106\uff9c" +
    "\110\uff9c\120\uff9c\144\uff9c\145\uff9c\150\uff9c\177\uff9c\212" +
    "\uff9c\001\002\000\044\014\017\015\030\016\025\020\027" +
    "\023\021\024\033\036\022\041\274\051\040\052\041\106" +
    "\037\110\023\120\047\144\020\145\042\150\024\177\045" +
    "\001\002\000\052\014\uff9d\015\uff9d\016\uff9d\017\275\020" +
    "\uff9d\023\uff9d\024\uff9d\036\uff9d\041\uff9d\046\uff9d\051\uff9d" +
    "\052\uff9d\106\uff9d\110\uff9d\120\uff9d\144\uff9d\145\uff9d\150" +
    "\uff9d\177\uff9d\212\uff9d\001\002\000\004\040\277\001\002" +
    "\000\050\014\uff9b\015\uff9b\016\uff9b\020\uff9b\023\uff9b\024" +
    "\uff9b\036\uff9b\041\uff9b\046\uff9b\051\uff9b\052\uff9b\106\uff9b" +
    "\110\uff9b\120\uff9b\144\uff9b\145\uff9b\150\uff9b\177\uff9b\212" +
    "\uff9b\001\002\000\044\014\017\015\030\016\025\020\027" +
    "\023\021\024\033\036\022\041\300\051\040\052\041\106" +
    "\037\110\023\120\047\144\020\145\042\150\024\177\045" +
    "\001\002\000\050\014\uff99\015\uff99\016\uff99\020\uff99\023" +
    "\uff99\024\uff99\036\uff99\041\uff99\046\uff99\051\uff99\052\uff99" +
    "\106\uff99\110\uff99\120\uff99\144\uff99\145\uff99\150\uff99\177" +
    "\uff99\212\uff99\001\002\000\044\014\017\015\030\016\025" +
    "\020\027\023\021\024\033\036\022\041\302\051\040\052" +
    "\041\106\037\110\023\120\047\144\020\145\042\150\024" +
    "\177\045\001\002\000\050\014\uff9a\015\uff9a\016\uff9a\020" +
    "\uff9a\023\uff9a\024\uff9a\036\uff9a\041\uff9a\046\uff9a\051\uff9a" +
    "\052\uff9a\106\uff9a\110\uff9a\120\uff9a\144\uff9a\145\uff9a\150" +
    "\uff9a\177\uff9a\212\uff9a\001\002\000\010\023\307\024\306" +
    "\102\304\001\002\000\004\037\uff7d\001\002\000\004\037" +
    "\310\001\002\000\004\037\uff7e\001\002\000\004\037\uff7f" +
    "\001\002\000\004\040\311\001\002\000\006\130\314\160" +
    "\312\001\002\000\004\012\331\001\002\000\004\041\330" +
    "\001\002\000\014\023\320\024\316\102\315\126\317\141" +
    "\321\001\002\000\004\012\uff77\001\002\000\004\012\uff78" +
    "\001\002\000\004\012\uff76\001\002\000\004\012\uff79\001" +
    "\002\000\004\012\uff75\001\002\000\004\012\323\001\002" +
    "\000\042\014\017\015\030\016\025\020\027\023\021\024" +
    "\033\036\022\051\040\052\041\106\037\110\023\120\047" +
    "\144\020\145\042\150\024\177\045\001\002\000\046\014" +
    "\017\015\030\016\025\020\027\023\021\024\033\036\022" +
    "\041\uff7c\046\325\051\040\052\041\106\037\110\023\120" +
    "\047\144\020\145\042\150\024\177\045\001\002\000\004" +
    "\101\326\001\002\000\006\130\314\160\312\001\002\000" +
    "\004\041\uff7b\001\002\000\050\014\uff80\015\uff80\016\uff80" +
    "\020\uff80\023\uff80\024\uff80\036\uff80\041\uff80\046\uff80\051" +
    "\uff80\052\uff80\106\uff80\110\uff80\120\uff80\144\uff80\145\uff80" +
    "\150\uff80\177\uff80\212\uff80\001\002\000\042\014\017\015" +
    "\030\016\025\020\027\023\021\024\033\036\022\051\040" +
    "\052\041\106\037\110\023\120\047\144\020\145\042\150" +
    "\024\177\045\001\002\000\044\014\017\015\030\016\025" +
    "\020\027\023\021\024\033\036\022\046\333\051\040\052" +
    "\041\106\037\110\023\120\047\144\020\145\042\150\024" +
    "\177\045\001\002\000\004\101\334\001\002\000\004\041" +
    "\uff7a\001\002\000\006\037\uffa8\101\uffa8\001\002\000\014" +
    "\030\055\031\056\037\uffdd\075\054\076\057\001\002\000" +
    "\004\037\uffdb\001\002\000\004\037\344\001\002\000\014" +
    "\030\055\031\056\037\uffdc\075\054\076\057\001\002\000" +
    "\010\023\341\024\336\036\022\001\002\000\004\037\uffde" +
    "\001\002\000\016\030\uffe0\031\uffe0\037\uffe0\075\uffe0\076" +
    "\uffe0\101\uffe0\001\002\000\010\023\341\024\336\036\022" +
    "\001\002\000\004\037\uffdf\001\002\000\016\023\354\024" +
    "\351\102\350\126\352\132\355\141\353\001\002\000\004" +
    "\101\363\001\002\000\004\101\362\001\002\000\004\101" +
    "\361\001\002\000\004\101\360\001\002\000\004\101\357" +
    "\001\002\000\004\101\356\001\002\000\050\014\uffab\015" +
    "\uffab\016\uffab\020\uffab\023\uffab\024\uffab\036\uffab\041\uffab" +
    "\046\uffab\051\uffab\052\uffab\106\uffab\110\uffab\120\uffab\144" +
    "\uffab\145\uffab\150\uffab\177\uffab\212\uffab\001\002\000\050" +
    "\014\uffb0\015\uffb0\016\uffb0\020\uffb0\023\uffb0\024\uffb0\036" +
    "\uffb0\041\uffb0\046\uffb0\051\uffb0\052\uffb0\106\uffb0\110\uffb0" +
    "\120\uffb0\144\uffb0\145\uffb0\150\uffb0\177\uffb0\212\uffb0\001" +
    "\002\000\050\014\uffac\015\uffac\016\uffac\020\uffac\023\uffac" +
    "\024\uffac\036\uffac\041\uffac\046\uffac\051\uffac\052\uffac\106" +
    "\uffac\110\uffac\120\uffac\144\uffac\145\uffac\150\uffac\177\uffac" +
    "\212\uffac\001\002\000\050\014\uffad\015\uffad\016\uffad\020" +
    "\uffad\023\uffad\024\uffad\036\uffad\041\uffad\046\uffad\051\uffad" +
    "\052\uffad\106\uffad\110\uffad\120\uffad\144\uffad\145\uffad\150" +
    "\uffad\177\uffad\212\uffad\001\002\000\050\014\uffaf\015\uffaf" +
    "\016\uffaf\020\uffaf\023\uffaf\024\uffaf\036\uffaf\041\uffaf\046" +
    "\uffaf\051\uffaf\052\uffaf\106\uffaf\110\uffaf\120\uffaf\144\uffaf" +
    "\145\uffaf\150\uffaf\177\uffaf\212\uffaf\001\002\000\050\014" +
    "\uffae\015\uffae\016\uffae\020\uffae\023\uffae\024\uffae\036\uffae" +
    "\041\uffae\046\uffae\051\uffae\052\uffae\106\uffae\110\uffae\120" +
    "\uffae\144\uffae\145\uffae\150\uffae\177\uffae\212\uffae\001\002" +
    "\000\014\023\242\024\241\033\245\035\244\102\240\001" +
    "\002\000\004\037\366\001\002\000\004\040\367\001\002" +
    "\000\042\014\017\015\030\016\025\020\027\023\021\024" +
    "\033\036\022\051\040\052\041\106\037\110\023\120\047" +
    "\144\020\145\042\150\024\177\045\001\002\000\044\014" +
    "\017\015\030\016\025\020\027\023\021\024\033\036\022" +
    "\041\371\051\040\052\041\106\037\110\023\120\047\144" +
    "\020\145\042\150\024\177\045\001\002\000\050\014\uff8c" +
    "\015\uff8c\016\uff8c\020\uff8c\023\uff8c\024\uff8c\036\uff8c\041" +
    "\uff8c\046\uff8c\051\uff8c\052\uff8c\106\uff8c\110\uff8c\120\uff8c" +
    "\144\uff8c\145\uff8c\150\uff8c\177\uff8c\212\uff8c\001\002\000" +
    "\010\024\377\025\376\101\u0100\001\002\000\004\023\374" +
    "\001\002\000\004\101\375\001\002\000\050\014\uffbe\015" +
    "\uffbe\016\uffbe\020\uffbe\023\uffbe\024\uffbe\036\uffbe\041\uffbe" +
    "\046\uffbe\051\uffbe\052\uffbe\106\uffbe\110\uffbe\120\uffbe\144" +
    "\uffbe\145\uffbe\150\uffbe\177\uffbe\212\uffbe\001\002\000\020" +
    "\023\u0106\024\u0103\102\u0102\126\u0104\132\u0107\141\u0105\210" +
    "\u0108\001\002\000\004\101\u0101\001\002\000\050\014\uffc9" +
    "\015\uffc9\016\uffc9\020\uffc9\023\uffc9\024\uffc9\036\uffc9\041" +
    "\uffc9\046\uffc9\051\uffc9\052\uffc9\106\uffc9\110\uffc9\120\uffc9" +
    "\144\uffc9\145\uffc9\150\uffc9\177\uffc9\212\uffc9\001\002\000" +
    "\050\014\uffc2\015\uffc2\016\uffc2\020\uffc2\023\uffc2\024\uffc2" +
    "\036\uffc2\041\uffc2\046\uffc2\051\uffc2\052\uffc2\106\uffc2\110" +
    "\uffc2\120\uffc2\144\uffc2\145\uffc2\150\uffc2\177\uffc2\212\uffc2" +
    "\001\002\000\004\101\u0128\001\002\000\014\011\u011f\031" +
    "\u011e\074\u011c\075\u011d\101\u011b\001\002\000\004\101\u011a" +
    "\001\002\000\004\101\u0119\001\002\000\004\101\u0118\001" +
    "\002\000\004\101\u0117\001\002\000\010\024\u010b\102\u0109" +
    "\211\u010d\001\002\000\006\211\uffcb\212\u0115\001\002\000" +
    "\004\211\u0113\001\002\000\006\211\uffcd\212\u0111\001\002" +
    "\000\004\211\u010f\001\002\000\004\101\u010e\001\002\000" +
    "\050\014\uffbd\015\uffbd\016\uffbd\020\uffbd\023\uffbd\024\uffbd" +
    "\036\uffbd\041\uffbd\046\uffbd\051\uffbd\052\uffbd\106\uffbd\110" +
    "\uffbd\120\uffbd\144\uffbd\145\uffbd\150\uffbd\177\uffbd\212\uffbd" +
    "\001\002\000\004\101\u0110\001\002\000\050\014\uffbc\015" +
    "\uffbc\016\uffbc\020\uffbc\023\uffbc\024\uffbc\036\uffbc\041\uffbc" +
    "\046\uffbc\051\uffbc\052\uffbc\106\uffbc\110\uffbc\120\uffbc\144" +
    "\uffbc\145\uffbc\150\uffbc\177\uffbc\212\uffbc\001\002\000\004" +
    "\024\u010b\001\002\000\004\211\uffcc\001\002\000\004\101" +
    "\u0114\001\002\000\050\014\uffbb\015\uffbb\016\uffbb\020\uffbb" +
    "\023\uffbb\024\uffbb\036\uffbb\041\uffbb\046\uffbb\051\uffbb\052" +
    "\uffbb\106\uffbb\110\uffbb\120\uffbb\144\uffbb\145\uffbb\150\uffbb" +
    "\177\uffbb\212\uffbb\001\002\000\004\102\u0109\001\002\000" +
    "\004\211\uffca\001\002\000\050\014\uffc3\015\uffc3\016\uffc3" +
    "\020\uffc3\023\uffc3\024\uffc3\036\uffc3\041\uffc3\046\uffc3\051" +
    "\uffc3\052\uffc3\106\uffc3\110\uffc3\120\uffc3\144\uffc3\145\uffc3" +
    "\150\uffc3\177\uffc3\212\uffc3\001\002\000\050\014\uffc8\015" +
    "\uffc8\016\uffc8\020\uffc8\023\uffc8\024\uffc8\036\uffc8\041\uffc8" +
    "\046\uffc8\051\uffc8\052\uffc8\106\uffc8\110\uffc8\120\uffc8\144" +
    "\uffc8\145\uffc8\150\uffc8\177\uffc8\212\uffc8\001\002\000\050" +
    "\014\uffc4\015\uffc4\016\uffc4\020\uffc4\023\uffc4\024\uffc4\036" +
    "\uffc4\041\uffc4\046\uffc4\051\uffc4\052\uffc4\106\uffc4\110\uffc4" +
    "\120\uffc4\144\uffc4\145\uffc4\150\uffc4\177\uffc4\212\uffc4\001" +
    "\002\000\050\014\uffc5\015\uffc5\016\uffc5\020\uffc5\023\uffc5" +
    "\024\uffc5\036\uffc5\041\uffc5\046\uffc5\051\uffc5\052\uffc5\106" +
    "\uffc5\110\uffc5\120\uffc5\144\uffc5\145\uffc5\150\uffc5\177\uffc5" +
    "\212\uffc5\001\002\000\050\014\uffc7\015\uffc7\016\uffc7\020" +
    "\uffc7\023\uffc7\024\uffc7\036\uffc7\041\uffc7\046\uffc7\051\uffc7" +
    "\052\uffc7\106\uffc7\110\uffc7\120\uffc7\144\uffc7\145\uffc7\150" +
    "\uffc7\177\uffc7\212\uffc7\001\002\000\004\024\u0126\001\002" +
    "\000\004\024\u0124\001\002\000\004\024\u0122\001\002\000" +
    "\004\024\u0120\001\002\000\004\101\u0121\001\002\000\050" +
    "\014\uffba\015\uffba\016\uffba\020\uffba\023\uffba\024\uffba\036" +
    "\uffba\041\uffba\046\uffba\051\uffba\052\uffba\106\uffba\110\uffba" +
    "\120\uffba\144\uffba\145\uffba\150\uffba\177\uffba\212\uffba\001" +
    "\002\000\004\101\u0123\001\002\000\050\014\uffbf\015\uffbf" +
    "\016\uffbf\020\uffbf\023\uffbf\024\uffbf\036\uffbf\041\uffbf\046" +
    "\uffbf\051\uffbf\052\uffbf\106\uffbf\110\uffbf\120\uffbf\144\uffbf" +
    "\145\uffbf\150\uffbf\177\uffbf\212\uffbf\001\002\000\004\101" +
    "\u0125\001\002\000\050\014\uffc1\015\uffc1\016\uffc1\020\uffc1" +
    "\023\uffc1\024\uffc1\036\uffc1\041\uffc1\046\uffc1\051\uffc1\052" +
    "\uffc1\106\uffc1\110\uffc1\120\uffc1\144\uffc1\145\uffc1\150\uffc1" +
    "\177\uffc1\212\uffc1\001\002\000\004\101\u0127\001\002\000" +
    "\050\014\uffc0\015\uffc0\016\uffc0\020\uffc0\023\uffc0\024\uffc0" +
    "\036\uffc0\041\uffc0\046\uffc0\051\uffc0\052\uffc0\106\uffc0\110" +
    "\uffc0\120\uffc0\144\uffc0\145\uffc0\150\uffc0\177\uffc0\212\uffc0" +
    "\001\002\000\050\014\uffc6\015\uffc6\016\uffc6\020\uffc6\023" +
    "\uffc6\024\uffc6\036\uffc6\041\uffc6\046\uffc6\051\uffc6\052\uffc6" +
    "\106\uffc6\110\uffc6\120\uffc6\144\uffc6\145\uffc6\150\uffc6\177" +
    "\uffc6\212\uffc6\001\002\000\004\002\ufffe\001\002\000\004" +
    "\015\uffd4\001\002\000\004\036\u0137\001\002\000\004\015" +
    "\u0131\001\002\000\004\015\uffd3\001\002\000\004\015\uffd2" +
    "\001\002\000\004\015\uffd6\001\002\000\004\015\uffd5\001" +
    "\002\000\004\036\u0132\001\002\000\004\037\u0133\001\002" +
    "\000\004\040\u0134\001\002\000\042\014\017\015\030\016" +
    "\025\020\027\023\021\024\033\036\022\051\040\052\041" +
    "\106\037\110\023\120\047\144\020\145\042\150\024\177" +
    "\045\001\002\000\044\014\017\015\030\016\025\020\027" +
    "\023\021\024\033\036\022\041\u0136\051\040\052\041\106" +
    "\037\110\023\120\047\144\020\145\042\150\024\177\045" +
    "\001\002\000\004\002\uffff\001\002\000\004\037\u0138\001" +
    "\002\000\004\040\u0139\001\002\000\042\014\017\015\030" +
    "\016\025\020\027\023\021\024\033\036\022\051\040\052" +
    "\041\106\037\110\023\120\047\144\020\145\042\150\024" +
    "\177\045\001\002\000\044\014\017\015\030\016\025\020" +
    "\027\023\021\024\033\036\022\041\u013b\051\040\052\041" +
    "\106\037\110\023\120\047\144\020\145\042\150\024\177" +
    "\045\001\002\000\004\002\000\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013a\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\035\u012b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\004\030\005" +
    "\014\012\015\013\012\015\033\016\034\024\035\025\025" +
    "\026\043\031\031\033\045\036\050\037\042\041\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\030\005\072\013\070\015\075\016\076\024" +
    "\077\025\073\026\101\031\074\033\102\036\103\037\100" +
    "\041\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\061\001\001\000\006\041\336\042\337\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\065\001\001\000\004\040" +
    "\051\001\001\000\002\001\001\000\006\037\057\041\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\061\001\001\000\006\037\063\041\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\106" +
    "\001\001\000\002\001\001\000\036\004\030\005\014\012" +
    "\067\013\012\015\033\016\034\024\035\025\025\026\043" +
    "\031\031\033\045\036\050\037\042\041\047\001\001\000" +
    "\034\004\030\005\072\013\070\015\075\016\076\024\077" +
    "\025\073\026\101\031\074\033\102\036\103\037\100\041" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\030\005\014\012\112\013\012\015" +
    "\033\016\034\024\035\025\025\026\043\031\031\033\045" +
    "\036\050\037\042\041\047\001\001\000\002\001\001\000" +
    "\034\004\030\005\072\013\070\015\075\016\076\024\077" +
    "\025\073\026\101\031\074\033\102\036\103\037\100\041" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\124\014\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\124\014\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\124" +
    "\014\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\167\023\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\174\023\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\037\221\041\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\030\005\014" +
    "\012\233\013\012\015\033\016\034\024\035\025\025\026" +
    "\043\031\031\033\045\036\050\037\042\041\047\001\001" +
    "\000\034\004\030\005\072\013\070\015\075\016\076\024" +
    "\077\025\073\026\101\031\074\033\102\036\103\037\100" +
    "\041\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\264\001\001" +
    "\000\002\001\001\000\036\004\030\005\014\012\267\013" +
    "\012\015\033\016\034\024\035\025\025\026\043\031\031" +
    "\033\045\036\050\037\042\041\047\001\001\000\036\004" +
    "\030\005\014\012\272\013\012\015\033\016\034\024\035" +
    "\025\025\026\043\031\031\033\045\036\050\037\042\041" +
    "\047\001\001\000\034\004\030\005\072\013\070\015\075" +
    "\016\076\024\077\025\073\026\101\031\074\033\102\036" +
    "\103\037\100\041\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\030\005\072\013\070\015\075\016" +
    "\076\024\077\025\073\026\101\031\074\033\102\036\103" +
    "\037\100\041\047\001\001\000\004\020\275\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\030\005\014" +
    "\012\300\013\012\015\033\016\034\024\035\025\025\026" +
    "\043\031\031\033\045\036\050\037\042\041\047\001\001" +
    "\000\002\001\001\000\034\004\030\005\072\013\070\015" +
    "\075\016\076\024\077\025\073\026\101\031\074\033\102" +
    "\036\103\037\100\041\047\001\001\000\002\001\001\000" +
    "\004\010\304\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\030\005\014\012\323\013" +
    "\012\015\033\016\034\024\035\025\025\026\043\031\031" +
    "\033\045\036\050\037\042\041\047\001\001\000\034\004" +
    "\030\005\072\013\070\015\075\016\076\024\077\025\073" +
    "\026\101\031\074\033\102\036\103\037\100\041\047\001" +
    "\001\000\002\001\001\000\004\007\326\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\030\005\014\012" +
    "\331\013\012\015\033\016\034\024\035\025\025\026\043" +
    "\031\031\033\045\036\050\037\042\041\047\001\001\000" +
    "\034\004\030\005\072\013\070\015\075\016\076\024\077" +
    "\025\073\026\101\031\074\033\102\036\103\037\100\041" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\344\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\341\001\001\000\006\041\336" +
    "\042\342\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\336\042\345\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\364\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\030\005\014\012\367\013\012\015\033\016\034" +
    "\024\035\025\025\026\043\031\031\033\045\036\050\037" +
    "\042\041\047\001\001\000\034\004\030\005\072\013\070" +
    "\015\075\016\076\024\077\025\073\026\101\031\074\033" +
    "\102\036\103\037\100\041\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\u010b\021\u0109\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u0111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\u0115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\030\005\014\012" +
    "\u0134\013\012\015\033\016\034\024\035\025\025\026\043" +
    "\031\031\033\045\036\050\037\042\041\047\001\001\000" +
    "\034\004\030\005\072\013\070\015\075\016\076\024\077" +
    "\025\073\026\101\031\074\033\102\036\103\037\100\041" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\030\005\014\012\u0139\013\012\015" +
    "\033\016\034\024\035\025\025\026\043\031\031\033\045" +
    "\036\050\037\042\041\047\001\001\000\034\004\030\005" +
    "\072\013\070\015\075\016\076\024\077\025\073\026\101" +
    "\031\074\033\102\036\103\037\100\041\047\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public String message= " ";
        public Symbol getS(){
        return this.s;
    }

    public void unrecovered_syntax_error(Symbol s){
        s.left+=1;
        s.right+=1;
        this.message = "Error sintáctico en la línea " + s.left + ", columna " + s.right + " se encontró: < " + s.value + " >, mientras se esperaba otro simbolo. ";
        System.out.println(message); 
        System.out.println(recovery_message());
    }

    public String recovery_message(){
        return this.message;
    }

    public void remove_message(){
        this.message = " ";
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expr ::= NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n;           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expr ::= LPAREN expr RPAREN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e;           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expr ::= MINUS expr 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = -e;          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expr ::= expr TIMES expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1*e2;       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expr ::= expr MINUS expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1-e2;       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr ::= expr PLUS expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1+e2;       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr_list ::= expr SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expr_list ::= expr_list expr SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // type_case ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_case",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // type_case ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_case",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // type_case ::= STRINGLITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_case",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // type_case ::= DECINTEGERLITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_case",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // type_case ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_case",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // case ::= DEFAULT COLON statement BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // case ::= CASE type_case COLON statement BREAK SEMICOLON case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // case ::= CASE type_case COLON statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // switch_statement ::= STRINGLITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // switch_statement ::= DECINTEGERLITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // switch_statement ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // switch ::= SWITCH OPENING_PARENT switch_statement CLOSING_PARENT OPENING_KEY case CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // foreach_statement ::= DATA_TYPE IDENTIFIER IN IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foreach_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // foreach ::= FOR OPENING_PARENT foreach_statement CLOSING_PARENT OPENING_KEY CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foreach",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // foreach ::= FOR OPENING_PARENT foreach_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foreach",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // for_declaration ::= icrements_decrements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_declaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // for_declaration ::= IDENTIFIER EQ DECINTEGERLITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_declaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // for_statement ::= OPENING_PARENT IDENTIFIER SEMICOLON IDENTIFIER RELATIONAL_OPERATOR DECINTEGERLITERAL SEMICOLON CLOSING_PARENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // for_statement ::= OPENING_PARENT IDENTIFIER SEMICOLON IDENTIFIER RELATIONAL_OPERATOR DECINTEGERLITERAL SEMICOLON for_declaration CLOSING_PARENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // for_statement ::= OPENING_PARENT IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON IDENTIFIER RELATIONAL_OPERATOR DECINTEGERLITERAL SEMICOLON for_declaration CLOSING_PARENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // for_statement ::= OPENING_PARENT DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON IDENTIFIER RELATIONAL_OPERATOR DECINTEGERLITERAL SEMICOLON for_declaration CLOSING_PARENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // for ::= FOR for_statement OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // do_while ::= DO OPENING_KEY statement CLOSING_KEY WHILE OPENING_PARENT boolean_statement CLOSING_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_while",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // while ::= WHILE OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // boolean_statement ::= STRINGLITERAL RELATIONAL_OPERATOR STRINGLITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // boolean_statement ::= DECINTEGERLITERAL RELATIONAL_OPERATOR DECINTEGERLITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // boolean_statement ::= IDENTIFIER RELATIONAL_OPERATOR STRINGLITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // boolean_statement ::= IDENTIFIER RELATIONAL_OPERATOR IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // boolean_statement ::= IDENTIFIER RELATIONAL_OPERATOR DECINTEGERLITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // boolean_statement ::= IDENTIFIER RELATIONAL_OPERATOR BOOLEAN_OPERATOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // boolean_statement ::= BOOLEAN_OPERATOR RELATIONAL_OPERATOR BOOLEAN_OPERATOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // boolean_statement ::= RELATIONAL_OPERATOR BOOLEAN_OPERATOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // boolean_statement ::= BOOLEAN_OPERATOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // else_if ::= ELSE_IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // else_if ::= ELSE_IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // else_if ::= ELSE_IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY else_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // else ::= ELSE OPENING_KEY CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // else ::= ELSE OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // if ::= IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // if ::= IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // if ::= IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // if ::= IF OPENING_PARENT boolean_statement CLOSING_PARENT statement COMMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // print_function ::= PRINT OPENING_PARENT print_ CLOSING_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_function",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // print_ ::= string_Literal PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // print_ ::= string_Literal PLUS print_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // print_ ::= string_Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // string_Literal ::= IDENTIFIER string_Literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_Literal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // string_Literal ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_Literal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // string_Literal ::= STRINGLITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_Literal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // icrements_decrements ::= IDENTIFIER MINUSMINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("icrements_decrements",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // icrements_decrements ::= IDENTIFIER PLUSPLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("icrements_decrements",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // icrements_decrements ::= MINUSMINUS IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("icrements_decrements",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // icrements_decrements ::= PLUSPLUS IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("icrements_decrements",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assignation ::= icrements_decrements SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignation",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assignation ::= IDENTIFIER EQ NULL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignation",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assignation ::= IDENTIFIER EQ FALSE SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignation",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assignation ::= IDENTIFIER EQ TRUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignation",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assignation ::= IDENTIFIER EQ STRINGLITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignation",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assignation ::= IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignation",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assignation ::= IDENTIFIER EQ IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignation",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declaration ::= CONST DATA_TYPE IDENTIFIER EQ SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaration ::= CONST DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declaration ::= FINAL DATA_TYPE IDENTIFIER EQ SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaration ::= FINAL DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaration ::= FINAL IDENTIFIER EQ NEW DATA_TYPE SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaration ::= BOOL IDENTIFIER EQ BOOLEAN_OPERATOR SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaration ::= STRING IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaration ::= STRING IDENTIFIER EQ IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaration ::= STRING IDENTIFIER EQ STRINGLITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaration ::= DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL DOT DECINTEGERLITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaration ::= DATA_TYPE IDENTIFIER EQ OPENING_BRACKET chain_string CLOSING_BRACKET SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaration ::= DATA_TYPE IDENTIFIER EQ OPENING_BRACKET chain CLOSING_BRACKET SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaration ::= DATA_TYPE IDENTIFIER EQ OPENING_BRACKET CLOSING_BRACKET SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaration ::= DATA_TYPE PLUSPLUS IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaration ::= DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL DIVISION DECINTEGERLITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaration ::= DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL POW DECINTEGERLITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaration ::= DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL PLUS DECINTEGERLITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaration ::= DATA_TYPE IDENTIFIER DECINTEGERLITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaration ::= DATA_TYPE IDENTIFIER EQ NULL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaration ::= DATA_TYPE IDENTIFIER EQ FALSE SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaration ::= DATA_TYPE IDENTIFIER EQ TRUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaration ::= DATA_TYPE IDENTIFIER EQ STRINGLITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaration ::= DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaration ::= DATA_TYPE IDENTIFIER EQ IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaration ::= DATA_TYPE IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // chain_string ::= STRINGLITERAL COMMA chain_string 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chain_string",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // chain_string ::= STRINGLITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chain_string",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // chain ::= DECINTEGERLITERAL COMMA chain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chain",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // chain ::= DECINTEGERLITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chain",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // log_aritmetica ::= OP_ARITMETICA OR log_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // log_aritmetica ::= OP_ARITMETICA AND log_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // log_aritmetica ::= OP_ARITMETICA OR OP_ARITMETICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // log_aritmetica ::= OP_ARITMETICA AND OP_ARITMETICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // return_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // return_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // return_type ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // return_type ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // return_type ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operations_basics ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations_basics",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operations_basics ::= MULTIPLICATION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations_basics",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operations_basics ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations_basics",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operations_basics ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations_basics",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operations_parentesis_statement ::= operations_parentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations_parentesis_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operations_parentesis_statement ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations_parentesis_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operations_parentesis_statement ::= DECINTEGERLITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations_parentesis_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operations_parentesis_statement ::= IDENTIFIER operations_basics operations_parentesis_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations_parentesis_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operations_parentesis_statement ::= DECINTEGERLITERAL operations_basics operations_parentesis_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations_parentesis_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operations_parentesis ::= OPENING_PARENT operations_parentesis_statement CLOSING_PARENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations_parentesis",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operations ::= operations_parentesis SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operations ::= IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operations ::= DECINTEGERLITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operations ::= operations_parentesis operations_basics operations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operations ::= IDENTIFIER operations_basics operations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operations ::= DECINTEGERLITERAL operations_basics operations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= operations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= statement operations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= print_function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= statement print_function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= foreach 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= statement foreach 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= statement for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= statement switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= statement while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= statement if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= statement if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= assignation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= statement assignation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= statement do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= statement declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // initialize ::= VOID MAIN OPENING_PARENT CLOSING_PARENT OPENING_KEY CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("initialize",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // initialize ::= VOID MAIN OPENING_PARENT CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("initialize",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initialize ::= IDENTIFIER return_type STRING OPENING_PARENT CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("initialize",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initialize ::= IDENTIFIER MAIN OPENING_PARENT CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("initialize",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initialize EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

