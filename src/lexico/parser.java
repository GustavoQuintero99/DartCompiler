
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 08 23:27:36 CST 2022
//----------------------------------------------------

package lexico;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 08 23:27:36 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\012\000\002\002" +
    "\026\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\005\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\005" +
    "\000\002\004\007\000\002\004\007\000\002\004\006\000" +
    "\002\004\006\000\002\004\010\000\002\004\010\000\002" +
    "\004\011\000\002\004\011\000\002\004\010\000\002\004" +
    "\010\000\002\004\011\000\002\004\010\000\002\004\011" +
    "\000\002\006\011\000\002\013\003\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\006\000\002" +
    "\013\007\000\002\007\015\000\002\017\016\000\002\017" +
    "\022\000\002\010\011\000\002\011\013\000\002\012\011" +
    "\000\002\014\012\000\002\014\011\000\002\005\005\000" +
    "\002\005\004\000\002\005\004\000\002\015\011\000\002" +
    "\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\004\056\004\001\002\000\004\037\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\031\010\001\002\000\004\046\011\001\002\000" +
    "\004\037\012\001\002\000\004\031\013\001\002\000\006" +
    "\032\015\062\014\001\002\000\004\066\017\001\002\000" +
    "\004\032\016\001\002\000\004\002\000\001\002\000\004" +
    "\035\020\001\002\000\004\027\021\001\002\000\004\007" +
    "\022\001\002\000\004\033\023\001\002\000\004\034\024" +
    "\001\002\000\004\037\025\001\002\000\004\030\026\001" +
    "\002\000\004\031\027\001\002\000\024\006\042\007\036" +
    "\010\037\013\031\014\032\047\047\050\050\053\046\063" +
    "\044\001\002\000\034\006\ufffb\007\ufffb\010\ufffb\012\ufffb" +
    "\013\ufffb\014\ufffb\030\ufffb\032\ufffb\043\ufffb\047\ufffb\050" +
    "\ufffb\053\ufffb\063\ufffb\001\002\000\004\027\267\001\002" +
    "\000\004\027\234\001\002\000\034\006\ufffd\007\ufffd\010" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\030\ufffd\032\ufffd\043\ufffd" +
    "\047\ufffd\050\ufffd\053\ufffd\063\ufffd\001\002\000\034\006" +
    "\ufff0\007\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0\030\ufff0" +
    "\032\ufff0\043\ufff0\047\ufff0\050\ufff0\053\ufff0\063\ufff0\001" +
    "\002\000\034\006\ufff5\007\ufff5\010\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\030\ufff5\032\ufff5\043\ufff5\047\ufff5\050\ufff5\053" +
    "\ufff5\063\ufff5\001\002\000\004\037\215\001\002\000\004" +
    "\027\203\001\002\000\034\006\ufff2\007\ufff2\010\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\030\ufff2\032\ufff2\043\ufff2\047\ufff2" +
    "\050\ufff2\053\ufff2\063\ufff2\001\002\000\034\006\ufff9\007" +
    "\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9\030\ufff9\032\ufff9" +
    "\043\ufff9\047\ufff9\050\ufff9\053\ufff9\063\ufff9\001\002\000" +
    "\006\025\166\037\167\001\002\000\030\006\042\007\036" +
    "\010\037\012\106\013\031\014\032\032\163\047\047\050" +
    "\050\053\046\063\044\001\002\000\004\027\144\001\002" +
    "\000\034\006\ufff7\007\ufff7\010\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\030\ufff7\032\ufff7\043\ufff7\047\ufff7\050\ufff7\053\ufff7" +
    "\063\ufff7\001\002\000\004\027\076\001\002\000\006\006" +
    "\061\037\062\001\002\000\004\006\051\001\002\000\004" +
    "\037\052\001\002\000\004\015\053\001\002\000\006\005" +
    "\054\040\055\001\002\000\004\005\057\001\002\000\004" +
    "\036\056\001\002\000\034\006\uffe3\007\uffe3\010\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\030\uffe3\032\uffe3\043\uffe3\047\uffe3" +
    "\050\uffe3\053\uffe3\063\uffe3\001\002\000\004\036\060\001" +
    "\002\000\034\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\030\uffe2\032\uffe2\043\uffe2\047\uffe2\050\uffe2\053" +
    "\uffe2\063\uffe2\001\002\000\004\037\067\001\002\000\004" +
    "\015\063\001\002\000\004\074\064\001\002\000\004\006" +
    "\065\001\002\000\004\036\066\001\002\000\034\006\uffe6" +
    "\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\030\uffe6\032" +
    "\uffe6\043\uffe6\047\uffe6\050\uffe6\053\uffe6\063\uffe6\001\002" +
    "\000\004\015\070\001\002\000\006\005\071\040\072\001" +
    "\002\000\004\005\074\001\002\000\004\036\073\001\002" +
    "\000\034\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\030\uffe5\032\uffe5\043\uffe5\047\uffe5\050\uffe5\053\uffe5" +
    "\063\uffe5\001\002\000\004\036\075\001\002\000\034\006" +
    "\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\030\uffe4" +
    "\032\uffe4\043\uffe4\047\uffe4\050\uffe4\053\uffe4\063\uffe4\001" +
    "\002\000\004\006\077\001\002\000\004\037\141\001\002" +
    "\000\004\030\101\001\002\000\004\031\102\001\002\000" +
    "\024\006\042\007\036\010\037\013\031\014\032\047\047" +
    "\050\050\053\046\063\044\001\002\000\030\006\042\007" +
    "\036\010\037\012\106\013\031\014\032\032\105\047\047" +
    "\050\050\053\046\063\044\001\002\000\034\006\ufffe\007" +
    "\ufffe\010\ufffe\012\ufffe\013\ufffe\014\ufffe\030\ufffe\032\ufffe" +
    "\043\ufffe\047\ufffe\050\ufffe\053\ufffe\063\ufffe\001\002\000" +
    "\034\006\uffcf\007\uffcf\010\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\030\uffcf\032\uffcf\043\uffcf\047\uffcf\050\uffcf\053\uffcf\063" +
    "\uffcf\001\002\000\004\031\117\001\002\000\004\012\106" +
    "\001\002\000\034\006\ufffc\007\ufffc\010\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\030\ufffc\032\ufffc\043\ufffc\047\ufffc\050\ufffc" +
    "\053\ufffc\063\ufffc\001\002\000\034\006\ufff1\007\ufff1\010" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\030\ufff1\032\ufff1\043\ufff1" +
    "\047\ufff1\050\ufff1\053\ufff1\063\ufff1\001\002\000\034\006" +
    "\ufffa\007\ufffa\010\ufffa\012\ufffa\013\ufffa\014\ufffa\030\ufffa" +
    "\032\ufffa\043\ufffa\047\ufffa\050\ufffa\053\ufffa\063\ufffa\001" +
    "\002\000\034\006\ufff8\007\ufff8\010\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\030\ufff8\032\ufff8\043\ufff8\047\ufff8\050\ufff8\053" +
    "\ufff8\063\ufff8\001\002\000\034\006\ufff3\007\ufff3\010\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\030\ufff3\032\ufff3\043\ufff3\047" +
    "\ufff3\050\ufff3\053\ufff3\063\ufff3\001\002\000\034\006\ufff6" +
    "\007\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6\030\ufff6\032" +
    "\ufff6\043\ufff6\047\ufff6\050\ufff6\053\ufff6\063\ufff6\001\002" +
    "\000\034\006\ufff4\007\ufff4\010\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\030\ufff4\032\ufff4\043\ufff4\047\ufff4\050\ufff4\053\ufff4" +
    "\063\ufff4\001\002\000\024\006\042\007\036\010\037\013" +
    "\031\014\032\047\047\050\050\053\046\063\044\001\002" +
    "\000\030\006\042\007\036\010\037\012\106\013\031\014" +
    "\032\032\121\047\047\050\050\053\046\063\044\001\002" +
    "\000\004\013\122\001\002\000\004\027\123\001\002\000" +
    "\006\026\126\037\124\001\002\000\004\023\131\001\002" +
    "\000\004\030\127\001\002\000\006\030\uffe0\036\uffe0\001" +
    "\002\000\004\036\130\001\002\000\034\006\uffd6\007\uffd6" +
    "\010\uffd6\012\uffd6\013\uffd6\014\uffd6\030\uffd6\032\uffd6\043" +
    "\uffd6\047\uffd6\050\uffd6\053\uffd6\063\uffd6\001\002\000\012" +
    "\005\132\026\135\037\134\040\133\001\002\000\006\005" +
    "\136\037\137\001\002\000\006\030\uffde\036\uffde\001\002" +
    "\000\006\030\uffdd\036\uffdd\001\002\000\006\030\uffdf\036" +
    "\uffdf\001\002\000\006\030\uffdc\036\uffdc\001\002\000\004" +
    "\005\140\001\002\000\006\030\uffdb\036\uffdb\001\002\000" +
    "\004\024\142\001\002\000\004\007\143\001\002\000\004" +
    "\030\uffce\001\002\000\024\006\042\007\036\010\037\013" +
    "\031\014\032\047\047\050\050\053\046\063\044\001\002" +
    "\000\030\006\042\007\036\010\037\012\106\013\031\014" +
    "\032\030\146\047\047\050\050\053\046\063\044\001\002" +
    "\000\004\031\147\001\002\000\004\044\150\001\002\000" +
    "\004\037\151\001\002\000\004\024\152\001\002\000\024" +
    "\006\042\007\036\010\037\013\031\014\032\047\047\050" +
    "\050\053\046\063\044\001\002\000\030\006\042\007\036" +
    "\010\037\012\106\013\031\014\032\043\154\047\047\050" +
    "\050\053\046\063\044\001\002\000\004\036\155\001\002" +
    "\000\004\051\156\001\002\000\036\006\uffd9\007\uffd9\010" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\024\157\030\uffd9\032\uffd9" +
    "\043\uffd9\047\uffd9\050\uffd9\053\uffd9\063\uffd9\001\002\000" +
    "\024\006\042\007\036\010\037\013\031\014\032\047\047" +
    "\050\050\053\046\063\044\001\002\000\030\006\042\007" +
    "\036\010\037\012\106\013\031\014\032\043\161\047\047" +
    "\050\050\053\046\063\044\001\002\000\004\036\162\001" +
    "\002\000\034\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\030\uffd8\032\uffd8\043\uffd8\047\uffd8\050\uffd8\053" +
    "\uffd8\063\uffd8\001\002\000\004\032\164\001\002\000\004" +
    "\032\165\001\002\000\004\002\uffff\001\002\000\004\037" +
    "\201\001\002\000\012\015\171\024\173\025\172\036\170" +
    "\001\002\000\034\006\uffef\007\uffef\010\uffef\012\uffef\013" +
    "\uffef\014\uffef\030\uffef\032\uffef\043\uffef\047\uffef\050\uffef" +
    "\053\uffef\063\uffef\001\002\000\004\040\177\001\002\000" +
    "\004\036\176\001\002\000\004\040\174\001\002\000\004" +
    "\036\175\001\002\000\034\006\uffee\007\uffee\010\uffee\012" +
    "\uffee\013\uffee\014\uffee\030\uffee\032\uffee\043\uffee\047\uffee" +
    "\050\uffee\053\uffee\063\uffee\001\002\000\034\006\uffec\007" +
    "\uffec\010\uffec\012\uffec\013\uffec\014\uffec\030\uffec\032\uffec" +
    "\043\uffec\047\uffec\050\uffec\053\uffec\063\uffec\001\002\000" +
    "\004\036\200\001\002\000\034\006\uffed\007\uffed\010\uffed" +
    "\012\uffed\013\uffed\014\uffed\030\uffed\032\uffed\043\uffed\047" +
    "\uffed\050\uffed\053\uffed\063\uffed\001\002\000\004\036\202" +
    "\001\002\000\034\006\uffeb\007\uffeb\010\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\030\uffeb\032\uffeb\043\uffeb\047\uffeb\050\uffeb" +
    "\053\uffeb\063\uffeb\001\002\000\006\026\126\037\124\001" +
    "\002\000\004\030\205\001\002\000\004\031\206\001\002" +
    "\000\024\006\042\007\036\010\037\013\031\014\032\047" +
    "\047\050\050\053\046\063\044\001\002\000\030\006\042" +
    "\007\036\010\037\012\106\013\031\014\032\032\210\047" +
    "\047\050\050\053\046\063\044\001\002\000\036\006\uffe1" +
    "\007\uffe1\010\uffe1\011\211\012\uffe1\013\uffe1\014\uffe1\030" +
    "\uffe1\032\uffe1\043\uffe1\047\uffe1\050\uffe1\053\uffe1\063\uffe1" +
    "\001\002\000\004\031\212\001\002\000\024\006\042\007" +
    "\036\010\037\013\031\014\032\047\047\050\050\053\046" +
    "\063\044\001\002\000\030\006\042\007\036\010\037\012" +
    "\106\013\031\014\032\032\214\047\047\050\050\053\046" +
    "\063\044\001\002\000\034\006\uffda\007\uffda\010\uffda\012" +
    "\uffda\013\uffda\014\uffda\030\uffda\032\uffda\043\uffda\047\uffda" +
    "\050\uffda\053\uffda\063\uffda\001\002\000\006\015\216\024" +
    "\217\001\002\000\004\005\226\001\002\000\004\005\220" +
    "\001\002\000\006\005\221\037\222\001\002\000\004\036" +
    "\225\001\002\000\004\005\223\001\002\000\004\036\224" +
    "\001\002\000\034\006\uffe8\007\uffe8\010\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\030\uffe8\032\uffe8\043\uffe8\047\uffe8\050\uffe8" +
    "\053\uffe8\063\uffe8\001\002\000\034\006\uffea\007\uffea\010" +
    "\uffea\012\uffea\013\uffea\014\uffea\030\uffea\032\uffea\043\uffea" +
    "\047\uffea\050\uffea\053\uffea\063\uffea\001\002\000\006\005" +
    "\227\037\230\001\002\000\004\036\233\001\002\000\004" +
    "\005\231\001\002\000\004\036\232\001\002\000\034\006" +
    "\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\030\uffe7" +
    "\032\uffe7\043\uffe7\047\uffe7\050\uffe7\053\uffe7\063\uffe7\001" +
    "\002\000\034\006\uffe9\007\uffe9\010\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\030\uffe9\032\uffe9\043\uffe9\047\uffe9\050\uffe9\053" +
    "\uffe9\063\uffe9\001\002\000\006\006\235\037\236\001\002" +
    "\000\004\037\260\001\002\000\004\015\244\001\002\000" +
    "\004\030\240\001\002\000\004\031\241\001\002\000\024" +
    "\006\042\007\036\010\037\013\031\014\032\047\047\050" +
    "\050\053\046\063\044\001\002\000\030\006\042\007\036" +
    "\010\037\012\106\013\031\014\032\032\243\047\047\050" +
    "\050\053\046\063\044\001\002\000\034\006\uffd5\007\uffd5" +
    "\010\uffd5\012\uffd5\013\uffd5\014\uffd5\030\uffd5\032\uffd5\043" +
    "\uffd5\047\uffd5\050\uffd5\053\uffd5\063\uffd5\001\002\000\004" +
    "\040\245\001\002\000\004\036\246\001\002\000\006\026" +
    "\126\037\124\001\002\000\004\036\250\001\002\000\006" +
    "\025\252\037\253\001\002\000\004\030\uffd3\001\002\000" +
    "\004\037\257\001\002\000\006\024\255\025\254\001\002" +
    "\000\004\030\uffd1\001\002\000\004\040\256\001\002\000" +
    "\004\030\uffd2\001\002\000\004\030\uffd0\001\002\000\004" +
    "\015\261\001\002\000\004\040\262\001\002\000\004\036" +
    "\263\001\002\000\006\026\126\037\124\001\002\000\004" +
    "\036\265\001\002\000\006\025\252\037\253\001\002\000" +
    "\004\030\uffd4\001\002\000\006\026\126\037\124\001\002" +
    "\000\004\030\271\001\002\000\004\031\272\001\002\000" +
    "\024\006\042\007\036\010\037\013\031\014\032\047\047" +
    "\050\050\053\046\063\044\001\002\000\030\006\042\007" +
    "\036\010\037\012\106\013\031\014\032\032\274\047\047" +
    "\050\050\053\046\063\044\001\002\000\034\006\uffd7\007" +
    "\uffd7\010\uffd7\012\uffd7\013\uffd7\014\uffd7\030\uffd7\032\uffd7" +
    "\043\uffd7\047\uffd7\050\uffd7\053\uffd7\063\uffd7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\042\004\032\006" +
    "\027\007\040\010\034\012\037\015\033\017\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\103\006\107\007\111" +
    "\010\112\011\106\012\113\015\110\017\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\102\004\032\006\027\007" +
    "\040\010\034\012\037\015\033\017\044\001\001\000\022" +
    "\004\103\006\107\007\111\010\112\011\106\012\113\015" +
    "\110\017\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\117\004\032\006\027\007\040\010\034\012\037" +
    "\015\033\017\044\001\001\000\022\004\103\006\107\007" +
    "\111\010\112\011\106\012\113\015\110\017\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\144\004\032\006\027\007\040\010\034\012" +
    "\037\015\033\017\044\001\001\000\022\004\103\006\107" +
    "\007\111\010\112\011\106\012\113\015\110\017\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\152\004\032\006\027\007" +
    "\040\010\034\012\037\015\033\017\044\001\001\000\022" +
    "\004\103\006\107\007\111\010\112\011\106\012\113\015" +
    "\110\017\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\157\004\032\006\027\007" +
    "\040\010\034\012\037\015\033\017\044\001\001\000\022" +
    "\004\103\006\107\007\111\010\112\011\106\012\113\015" +
    "\110\017\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\206\004\032\006\027\007\040\010\034\012" +
    "\037\015\033\017\044\001\001\000\022\004\103\006\107" +
    "\007\111\010\112\011\106\012\113\015\110\017\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\212" +
    "\004\032\006\027\007\040\010\034\012\037\015\033\017" +
    "\044\001\001\000\022\004\103\006\107\007\111\010\112" +
    "\011\106\012\113\015\110\017\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\236" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\241\004\032\006\027" +
    "\007\040\010\034\012\037\015\033\017\044\001\001\000" +
    "\022\004\103\006\107\007\111\010\112\011\106\012\113" +
    "\015\110\017\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\246\001\001\000\002" +
    "\001\001\000\004\005\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\263" +
    "\001\001\000\002\001\001\000\004\005\265\001\001\000" +
    "\002\001\001\000\004\013\267\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\272\004\032\006\027\007" +
    "\040\010\034\012\037\015\033\017\044\001\001\000\022" +
    "\004\103\006\107\007\111\010\112\011\106\012\113\015" +
    "\110\017\114\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntaxis_error(Symbol s){
        this.s=s;
        System.out.println("compiler has detected a syntax error at line " + s.left 
            + " column " + s.right);
    }
    
    public Symbol getS(){
        return s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // foreach_statement ::= DATA_TYPE IDENTIFIER ATRIBUTION_OPERATOR STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foreach_statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // foreach ::= FOREACH OPENING_PARENT foreach_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foreach",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // for_declaration ::= INCREASE_OPERATOR IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // for_declaration ::= IDENTIFIER INCREASE_OPERATOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // for_declaration ::= IDENTIFIER ATRIBUTION_OPERATOR NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // for_statement ::= IDENTIFIER EQUALS NUMBER SEMICOLON boolean_statement SEMICOLON for_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // for_statement ::= DATA_TYPE IDENTIFIER EQUALS NUMBER SEMICOLON boolean_statement SEMICOLON for_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // for ::= FOR OPENING_PARENT for_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // do_while ::= DO OPENING_KEY statement CLOSING_KEY WHILE OPENING_PARENT boolean_statement CLOSING_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_while",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // while ::= WHILE OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // switch ::= SWITCH OPENING_PARENT statement CLOSING_PARENT OPENING_KEY CASE IDENTIFIER ATRIBUTION_OPERATOR statement BREAK SEMICOLON DEFAULT ATRIBUTION_OPERATOR statement BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // switch ::= SWITCH OPENING_PARENT statement CLOSING_PARENT OPENING_KEY CASE IDENTIFIER ATRIBUTION_OPERATOR statement BREAK SEMICOLON DEFAULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // if_else ::= IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY ELSE OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_else",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // boolean_statement ::= IDENTIFIER RELATIONAL_OPERATOR QUOTES IDENTIFIER QUOTES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // boolean_statement ::= IDENTIFIER RELATIONAL_OPERATOR QUOTES QUOTES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // boolean_statement ::= IDENTIFIER RELATIONAL_OPERATOR IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // boolean_statement ::= IDENTIFIER RELATIONAL_OPERATOR NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // boolean_statement ::= IDENTIFIER RELATIONAL_OPERATOR BOOLEAN_OPERATOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // boolean_statement ::= BOOLEAN_OPERATOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if ::= IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaration ::= CONST DATA_TYPE IDENTIFIER EQUALS QUOTES QUOTES SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaration ::= CONST DATA_TYPE IDENTIFIER EQUALS NUMBER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaration ::= FINAL DATA_TYPE IDENTIFIER EQUALS QUOTES QUOTES SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaration ::= FINAL DATA_TYPE IDENTIFIER EQUALS NUMBER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaration ::= FINAL IDENTIFIER EQUALS NEW DATA_TYPE SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaration ::= STRING IDENTIFIER EQUALS QUOTES IDENTIFIER QUOTES SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaration ::= STRING IDENTIFIER ATRIBUTION_OPERATOR QUOTES IDENTIFIER QUOTES SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaration ::= STRING IDENTIFIER EQUALS QUOTES QUOTES SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaration ::= STRING IDENTIFIER ATRIBUTION_OPERATOR QUOTES QUOTES SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration ::= DATA_TYPE INCREASE_OPERATOR IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration ::= DATA_TYPE IDENTIFIER INCREASE_OPERATOR SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration ::= DATA_TYPE IDENTIFIER EQUALS NUMBER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration ::= DATA_TYPE IDENTIFIER ATRIBUTION_OPERATOR NUMBER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration ::= DATA_TYPE IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= foreach 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= statement foreach 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= statement for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= statement do_while do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= statement switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= statement while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= statement if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= statement if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= statement declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= NAMESPACE IDENTIFIER OPENING_KEY CLASS IDENTIFIER OPENING_KEY STATIC VOID MAIN OPENING_PARENT STRING OPENING_SQUARE_BRACKET CLOSING_SQUARE_BRACKET IDENTIFIER CLOSING_PARENT OPENING_KEY statement CLOSING_KEY CLOSING_KEY CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= NAMESPACE IDENTIFIER OPENING_KEY CLASS IDENTIFIER OPENING_KEY CLOSING_KEY CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

