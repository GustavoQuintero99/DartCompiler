
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 20 03:32:40 CST 2022
//----------------------------------------------------

package lexico;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 20 03:32:40 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\011\000\002\002" +
    "\012\000\002\002\011\000\002\002\010\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\005\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\004\005\000\002\004\007\000\002\004\007" +
    "\000\002\004\011\000\002\004\011\000\002\004\011\000" +
    "\002\004\006\000\002\004\006\000\002\004\011\000\002" +
    "\004\010\000\002\004\011\000\002\004\007\000\002\004" +
    "\007\000\002\004\010\000\002\004\010\000\002\004\011" +
    "\000\002\004\010\000\002\004\011\000\002\006\011\000" +
    "\002\013\003\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\006\000\002\013\007\000\002\007" +
    "\015\000\002\017\016\000\002\017\022\000\002\010\011" +
    "\000\002\011\013\000\002\012\011\000\002\014\012\000" +
    "\002\014\011\000\002\005\005\000\002\005\004\000\002" +
    "\005\004\000\002\015\011\000\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\006\015\004\056\005\001\002\000\016\007" +
    "\275\056\301\126\276\171\303\172\300\173\302\001\002" +
    "\000\004\126\010\001\002\000\004\002\007\001\002\000" +
    "\004\002\001\001\002\000\004\031\011\001\002\000\004" +
    "\032\012\001\002\000\004\033\013\001\002\000\030\006" +
    "\017\007\023\010\022\034\014\044\032\045\031\047\026" +
    "\113\036\137\020\143\021\172\034\001\002\000\004\002" +
    "\ufffd\001\002\000\036\006\ufffb\007\ufffb\010\ufffb\012\ufffb" +
    "\032\ufffb\034\ufffb\041\ufffb\044\ufffb\045\ufffb\047\ufffb\113" +
    "\ufffb\137\ufffb\143\ufffb\172\ufffb\001\002\000\032\006\017" +
    "\007\023\010\022\012\050\034\274\044\032\045\031\047" +
    "\026\113\036\137\020\143\021\172\034\001\002\000\006" +
    "\015\246\027\245\001\002\000\004\031\237\001\002\000" +
    "\004\031\220\001\002\000\004\031\206\001\002\000\004" +
    "\015\173\001\002\000\036\006\ufff9\007\ufff9\010\ufff9\012" +
    "\ufff9\032\ufff9\034\ufff9\041\ufff9\044\ufff9\045\ufff9\047\ufff9" +
    "\113\ufff9\137\ufff9\143\ufff9\172\ufff9\001\002\000\036\006" +
    "\uffee\007\uffee\010\uffee\012\uffee\032\uffee\034\uffee\041\uffee" +
    "\044\uffee\045\uffee\047\uffee\113\uffee\137\uffee\143\uffee\172" +
    "\uffee\001\002\000\004\031\161\001\002\000\036\006\ufff7" +
    "\007\ufff7\010\ufff7\012\ufff7\032\ufff7\034\ufff7\041\ufff7\044" +
    "\ufff7\045\ufff7\047\ufff7\113\ufff7\137\ufff7\143\ufff7\172\ufff7" +
    "\001\002\000\036\006\ufff3\007\ufff3\010\ufff3\012\ufff3\032" +
    "\ufff3\034\ufff3\041\ufff3\044\ufff3\045\ufff3\047\ufff3\113\ufff3" +
    "\137\ufff3\143\ufff3\172\ufff3\001\002\000\004\006\151\001" +
    "\002\000\006\006\134\015\135\001\002\000\036\006\ufff0" +
    "\007\ufff0\010\ufff0\012\ufff0\032\ufff0\034\ufff0\041\ufff0\044" +
    "\ufff0\045\ufff0\047\ufff0\113\ufff0\137\ufff0\143\ufff0\172\ufff0" +
    "\001\002\000\004\015\126\001\002\000\036\006\ufff5\007" +
    "\ufff5\010\ufff5\012\ufff5\032\ufff5\034\ufff5\041\ufff5\044\ufff5" +
    "\045\ufff5\047\ufff5\113\ufff5\137\ufff5\143\ufff5\172\ufff5\001" +
    "\002\000\004\031\037\001\002\000\006\006\040\015\041" +
    "\001\002\000\004\015\117\001\002\000\004\017\103\001" +
    "\002\000\004\032\043\001\002\000\004\033\044\001\002" +
    "\000\026\006\017\007\023\010\022\044\032\045\031\047" +
    "\026\113\036\137\020\143\021\172\034\001\002\000\032" +
    "\006\017\007\023\010\022\012\050\034\047\044\032\045" +
    "\031\047\026\113\036\137\020\143\021\172\034\001\002" +
    "\000\036\006\ufffc\007\ufffc\010\ufffc\012\ufffc\032\ufffc\034" +
    "\ufffc\041\ufffc\044\ufffc\045\ufffc\047\ufffc\113\ufffc\137\ufffc" +
    "\143\ufffc\172\ufffc\001\002\000\036\006\uffc6\007\uffc6\010" +
    "\uffc6\012\uffc6\032\uffc6\034\uffc6\041\uffc6\044\uffc6\045\uffc6" +
    "\047\uffc6\113\uffc6\137\uffc6\143\uffc6\172\uffc6\001\002\000" +
    "\004\033\061\001\002\000\004\012\050\001\002\000\036" +
    "\006\uffef\007\uffef\010\uffef\012\uffef\032\uffef\034\uffef\041" +
    "\uffef\044\uffef\045\uffef\047\uffef\113\uffef\137\uffef\143\uffef" +
    "\172\uffef\001\002\000\036\006\ufffa\007\ufffa\010\ufffa\012" +
    "\ufffa\032\ufffa\034\ufffa\041\ufffa\044\ufffa\045\ufffa\047\ufffa" +
    "\113\ufffa\137\ufffa\143\ufffa\172\ufffa\001\002\000\036\006" +
    "\ufff8\007\ufff8\010\ufff8\012\ufff8\032\ufff8\034\ufff8\041\ufff8" +
    "\044\ufff8\045\ufff8\047\ufff8\113\ufff8\137\ufff8\143\ufff8\172" +
    "\ufff8\001\002\000\036\006\ufff6\007\ufff6\010\ufff6\012\ufff6" +
    "\032\ufff6\034\ufff6\041\ufff6\044\ufff6\045\ufff6\047\ufff6\113" +
    "\ufff6\137\ufff6\143\ufff6\172\ufff6\001\002\000\036\006\ufff1" +
    "\007\ufff1\010\ufff1\012\ufff1\032\ufff1\034\ufff1\041\ufff1\044" +
    "\ufff1\045\ufff1\047\ufff1\113\ufff1\137\ufff1\143\ufff1\172\ufff1" +
    "\001\002\000\036\006\ufff4\007\ufff4\010\ufff4\012\ufff4\032" +
    "\ufff4\034\ufff4\041\ufff4\044\ufff4\045\ufff4\047\ufff4\113\ufff4" +
    "\137\ufff4\143\ufff4\172\ufff4\001\002\000\036\006\ufff2\007" +
    "\ufff2\010\ufff2\012\ufff2\032\ufff2\034\ufff2\041\ufff2\044\ufff2" +
    "\045\ufff2\047\ufff2\113\ufff2\137\ufff2\143\ufff2\172\ufff2\001" +
    "\002\000\026\006\017\007\023\010\022\044\032\045\031" +
    "\047\026\113\036\137\020\143\021\172\034\001\002\000" +
    "\032\006\017\007\023\010\022\012\050\034\063\044\032" +
    "\045\031\047\026\113\036\137\020\143\021\172\034\001" +
    "\002\000\004\137\064\001\002\000\004\031\065\001\002" +
    "\000\006\015\066\030\070\001\002\000\004\025\073\001" +
    "\002\000\004\032\071\001\002\000\006\032\uffd1\074\uffd1" +
    "\001\002\000\004\074\072\001\002\000\036\006\uffc7\007" +
    "\uffc7\010\uffc7\012\uffc7\032\uffc7\034\uffc7\041\uffc7\044\uffc7" +
    "\045\uffc7\047\uffc7\113\uffc7\137\uffc7\143\uffc7\172\uffc7\001" +
    "\002\000\012\005\074\015\076\016\075\030\077\001\002" +
    "\000\006\005\100\015\101\001\002\000\006\032\uffcf\074" +
    "\uffcf\001\002\000\006\032\uffce\074\uffce\001\002\000\006" +
    "\032\uffd0\074\uffd0\001\002\000\006\032\uffcd\074\uffcd\001" +
    "\002\000\004\005\102\001\002\000\006\032\uffcc\074\uffcc" +
    "\001\002\000\004\016\104\001\002\000\004\074\105\001" +
    "\002\000\006\015\066\030\070\001\002\000\004\074\107" +
    "\001\002\000\006\015\112\027\111\001\002\000\004\032" +
    "\uffc4\001\002\000\004\015\116\001\002\000\006\026\114" +
    "\027\113\001\002\000\004\032\uffc2\001\002\000\004\016" +
    "\115\001\002\000\004\032\uffc3\001\002\000\004\032\uffc1" +
    "\001\002\000\004\017\120\001\002\000\004\016\121\001" +
    "\002\000\004\074\122\001\002\000\006\015\066\030\070" +
    "\001\002\000\004\074\124\001\002\000\006\015\112\027" +
    "\111\001\002\000\004\032\uffc5\001\002\000\004\017\127" +
    "\001\002\000\006\121\130\134\131\001\002\000\004\074" +
    "\133\001\002\000\004\074\132\001\002\000\036\006\uffd8" +
    "\007\uffd8\010\uffd8\012\uffd8\032\uffd8\034\uffd8\041\uffd8\044" +
    "\uffd8\045\uffd8\047\uffd8\113\uffd8\137\uffd8\143\uffd8\172\uffd8" +
    "\001\002\000\036\006\uffd9\007\uffd9\010\uffd9\012\uffd9\032" +
    "\uffd9\034\uffd9\041\uffd9\044\uffd9\045\uffd9\047\uffd9\113\uffd9" +
    "\137\uffd9\143\uffd9\172\uffd9\001\002\000\004\015\142\001" +
    "\002\000\004\017\136\001\002\000\004\064\137\001\002" +
    "\000\004\006\140\001\002\000\004\074\141\001\002\000" +
    "\036\006\uffd7\007\uffd7\010\uffd7\012\uffd7\032\uffd7\034\uffd7" +
    "\041\uffd7\044\uffd7\045\uffd7\047\uffd7\113\uffd7\137\uffd7\143" +
    "\uffd7\172\uffd7\001\002\000\004\017\143\001\002\000\006" +
    "\005\144\016\145\001\002\000\004\005\147\001\002\000" +
    "\004\074\146\001\002\000\036\006\uffd6\007\uffd6\010\uffd6" +
    "\012\uffd6\032\uffd6\034\uffd6\041\uffd6\044\uffd6\045\uffd6\047" +
    "\uffd6\113\uffd6\137\uffd6\143\uffd6\172\uffd6\001\002\000\004" +
    "\074\150\001\002\000\036\006\uffd5\007\uffd5\010\uffd5\012" +
    "\uffd5\032\uffd5\034\uffd5\041\uffd5\044\uffd5\045\uffd5\047\uffd5" +
    "\113\uffd5\137\uffd5\143\uffd5\172\uffd5\001\002\000\004\015" +
    "\152\001\002\000\004\017\153\001\002\000\006\005\154" +
    "\016\155\001\002\000\004\005\157\001\002\000\004\074" +
    "\156\001\002\000\036\006\uffd4\007\uffd4\010\uffd4\012\uffd4" +
    "\032\uffd4\034\uffd4\041\uffd4\044\uffd4\045\uffd4\047\uffd4\113" +
    "\uffd4\137\uffd4\143\uffd4\172\uffd4\001\002\000\004\074\160" +
    "\001\002\000\036\006\uffd3\007\uffd3\010\uffd3\012\uffd3\032" +
    "\uffd3\034\uffd3\041\uffd3\044\uffd3\045\uffd3\047\uffd3\113\uffd3" +
    "\137\uffd3\143\uffd3\172\uffd3\001\002\000\004\006\162\001" +
    "\002\000\004\015\170\001\002\000\004\032\164\001\002" +
    "\000\004\033\165\001\002\000\026\006\017\007\023\010" +
    "\022\044\032\045\031\047\026\113\036\137\020\143\021" +
    "\172\034\001\002\000\032\006\017\007\023\010\022\012" +
    "\050\034\167\044\032\045\031\047\026\113\036\137\020" +
    "\143\021\172\034\001\002\000\036\006\uffc0\007\uffc0\010" +
    "\uffc0\012\uffc0\032\uffc0\034\uffc0\041\uffc0\044\uffc0\045\uffc0" +
    "\047\uffc0\113\uffc0\137\uffc0\143\uffc0\172\uffc0\001\002\000" +
    "\004\026\171\001\002\000\004\007\172\001\002\000\004" +
    "\032\uffbf\001\002\000\004\017\174\001\002\000\004\005" +
    "\175\001\002\000\010\005\176\007\177\015\200\001\002" +
    "\000\004\074\205\001\002\000\004\005\203\001\002\000" +
    "\004\005\201\001\002\000\004\074\202\001\002\000\036" +
    "\006\uffda\007\uffda\010\uffda\012\uffda\032\uffda\034\uffda\041" +
    "\uffda\044\uffda\045\uffda\047\uffda\113\uffda\137\uffda\143\uffda" +
    "\172\uffda\001\002\000\004\074\204\001\002\000\036\006" +
    "\uffdc\007\uffdc\010\uffdc\012\uffdc\032\uffdc\034\uffdc\041\uffdc" +
    "\044\uffdc\045\uffdc\047\uffdc\113\uffdc\137\uffdc\143\uffdc\172" +
    "\uffdc\001\002\000\036\006\uffdb\007\uffdb\010\uffdb\012\uffdb" +
    "\032\uffdb\034\uffdb\041\uffdb\044\uffdb\045\uffdb\047\uffdb\113" +
    "\uffdb\137\uffdb\143\uffdb\172\uffdb\001\002\000\006\015\066" +
    "\030\070\001\002\000\004\032\210\001\002\000\004\033" +
    "\211\001\002\000\026\006\017\007\023\010\022\044\032" +
    "\045\031\047\026\113\036\137\020\143\021\172\034\001" +
    "\002\000\032\006\017\007\023\010\022\012\050\034\213" +
    "\044\032\045\031\047\026\113\036\137\020\143\021\172" +
    "\034\001\002\000\040\006\uffd2\007\uffd2\010\uffd2\011\214" +
    "\012\uffd2\032\uffd2\034\uffd2\041\uffd2\044\uffd2\045\uffd2\047" +
    "\uffd2\113\uffd2\137\uffd2\143\uffd2\172\uffd2\001\002\000\004" +
    "\033\215\001\002\000\026\006\017\007\023\010\022\044" +
    "\032\045\031\047\026\113\036\137\020\143\021\172\034" +
    "\001\002\000\032\006\017\007\023\010\022\012\050\034" +
    "\217\044\032\045\031\047\026\113\036\137\020\143\021" +
    "\172\034\001\002\000\036\006\uffcb\007\uffcb\010\uffcb\012" +
    "\uffcb\032\uffcb\034\uffcb\041\uffcb\044\uffcb\045\uffcb\047\uffcb" +
    "\113\uffcb\137\uffcb\143\uffcb\172\uffcb\001\002\000\026\006" +
    "\017\007\023\010\022\044\032\045\031\047\026\113\036" +
    "\137\020\143\021\172\034\001\002\000\032\006\017\007" +
    "\023\010\022\012\050\032\222\044\032\045\031\047\026" +
    "\113\036\137\020\143\021\172\034\001\002\000\004\033" +
    "\223\001\002\000\004\123\224\001\002\000\004\015\225" +
    "\001\002\000\004\026\226\001\002\000\026\006\017\007" +
    "\023\010\022\044\032\045\031\047\026\113\036\137\020" +
    "\143\021\172\034\001\002\000\032\006\017\007\023\010" +
    "\022\012\050\041\230\044\032\045\031\047\026\113\036" +
    "\137\020\143\021\172\034\001\002\000\004\074\231\001" +
    "\002\000\004\153\232\001\002\000\040\006\uffca\007\uffca" +
    "\010\uffca\012\uffca\026\233\032\uffca\034\uffca\041\uffca\044" +
    "\uffca\045\uffca\047\uffca\113\uffca\137\uffca\143\uffca\172\uffca" +
    "\001\002\000\026\006\017\007\023\010\022\044\032\045" +
    "\031\047\026\113\036\137\020\143\021\172\034\001\002" +
    "\000\032\006\017\007\023\010\022\012\050\041\235\044" +
    "\032\045\031\047\026\113\036\137\020\143\021\172\034" +
    "\001\002\000\004\074\236\001\002\000\036\006\uffc9\007" +
    "\uffc9\010\uffc9\012\uffc9\032\uffc9\034\uffc9\041\uffc9\044\uffc9" +
    "\045\uffc9\047\uffc9\113\uffc9\137\uffc9\143\uffc9\172\uffc9\001" +
    "\002\000\006\015\066\030\070\001\002\000\004\032\241" +
    "\001\002\000\004\033\242\001\002\000\026\006\017\007" +
    "\023\010\022\044\032\045\031\047\026\113\036\137\020" +
    "\143\021\172\034\001\002\000\032\006\017\007\023\010" +
    "\022\012\050\034\244\044\032\045\031\047\026\113\036" +
    "\137\020\143\021\172\034\001\002\000\036\006\uffc8\007" +
    "\uffc8\010\uffc8\012\uffc8\032\uffc8\034\uffc8\041\uffc8\044\uffc8" +
    "\045\uffc8\047\uffc8\113\uffc8\137\uffc8\143\uffc8\172\uffc8\001" +
    "\002\000\004\015\272\001\002\000\012\017\247\026\252" +
    "\027\251\074\250\001\002\000\006\007\256\016\257\001" +
    "\002\000\036\006\uffe4\007\uffe4\010\uffe4\012\uffe4\032\uffe4" +
    "\034\uffe4\041\uffe4\044\uffe4\045\uffe4\047\uffe4\113\uffe4\137" +
    "\uffe4\143\uffe4\172\uffe4\001\002\000\004\074\255\001\002" +
    "\000\004\016\253\001\002\000\004\074\254\001\002\000" +
    "\036\006\uffe2\007\uffe2\010\uffe2\012\uffe2\032\uffe2\034\uffe2" +
    "\041\uffe2\044\uffe2\045\uffe2\047\uffe2\113\uffe2\137\uffe2\143" +
    "\uffe2\172\uffe2\001\002\000\036\006\uffde\007\uffde\010\uffde" +
    "\012\uffde\032\uffde\034\uffde\041\uffde\044\uffde\045\uffde\047" +
    "\uffde\113\uffde\137\uffde\143\uffde\172\uffde\001\002\000\004" +
    "\074\271\001\002\000\010\023\262\067\260\070\261\001" +
    "\002\000\004\016\267\001\002\000\004\016\265\001\002" +
    "\000\004\016\263\001\002\000\004\074\264\001\002\000" +
    "\036\006\uffdf\007\uffdf\010\uffdf\012\uffdf\032\uffdf\034\uffdf" +
    "\041\uffdf\044\uffdf\045\uffdf\047\uffdf\113\uffdf\137\uffdf\143" +
    "\uffdf\172\uffdf\001\002\000\004\074\266\001\002\000\036" +
    "\006\uffe1\007\uffe1\010\uffe1\012\uffe1\032\uffe1\034\uffe1\041" +
    "\uffe1\044\uffe1\045\uffe1\047\uffe1\113\uffe1\137\uffe1\143\uffe1" +
    "\172\uffe1\001\002\000\004\074\270\001\002\000\036\006" +
    "\uffe0\007\uffe0\010\uffe0\012\uffe0\032\uffe0\034\uffe0\041\uffe0" +
    "\044\uffe0\045\uffe0\047\uffe0\113\uffe0\137\uffe0\143\uffe0\172" +
    "\uffe0\001\002\000\036\006\uffe3\007\uffe3\010\uffe3\012\uffe3" +
    "\032\uffe3\034\uffe3\041\uffe3\044\uffe3\045\uffe3\047\uffe3\113" +
    "\uffe3\137\uffe3\143\uffe3\172\uffe3\001\002\000\004\074\273" +
    "\001\002\000\036\006\uffdd\007\uffdd\010\uffdd\012\uffdd\032" +
    "\uffdd\034\uffdd\041\uffdd\044\uffdd\045\uffdd\047\uffdd\113\uffdd" +
    "\137\uffdd\143\uffdd\172\uffdd\001\002\000\004\002\ufffe\001" +
    "\002\000\004\007\uffeb\001\002\000\004\031\312\001\002" +
    "\000\004\007\304\001\002\000\004\007\uffea\001\002\000" +
    "\004\007\uffed\001\002\000\004\007\uffe9\001\002\000\004" +
    "\007\uffec\001\002\000\004\031\305\001\002\000\004\032" +
    "\306\001\002\000\004\033\307\001\002\000\026\006\017" +
    "\007\023\010\022\044\032\045\031\047\026\113\036\137" +
    "\020\143\021\172\034\001\002\000\032\006\017\007\023" +
    "\010\022\012\050\034\311\044\032\045\031\047\026\113" +
    "\036\137\020\143\021\172\034\001\002\000\004\002\uffff" +
    "\001\002\000\004\032\313\001\002\000\004\033\314\001" +
    "\002\000\026\006\017\007\023\010\022\044\032\045\031" +
    "\047\026\113\036\137\020\143\021\172\034\001\002\000" +
    "\032\006\017\007\023\010\022\012\050\034\316\044\032" +
    "\045\031\047\026\113\036\137\020\143\021\172\034\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\004\002\005\001\001\000\004\021\276\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\015\004\014\006\023\007\026\010\027\012\032" +
    "\015\024\017\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\045\006\052\007\053\010\054\011\050" +
    "\012\055\015\051\017\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\044\004\014\006\023\007\026" +
    "\010\027\012\032\015\024\017\034\001\001\000\022\004" +
    "\045\006\052\007\053\010\054\011\050\012\055\015\051" +
    "\017\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\061\004\014\006\023\007\026\010\027\012\032\015" +
    "\024\017\034\001\001\000\022\004\045\006\052\007\053" +
    "\010\054\011\050\012\055\015\051\017\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\105\001" +
    "\001\000\002\001\001\000\004\005\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\122\001\001\000\002\001\001\000\004\005\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\165\004\014\006\023\007\026\010" +
    "\027\012\032\015\024\017\034\001\001\000\022\004\045" +
    "\006\052\007\053\010\054\011\050\012\055\015\051\017" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\211\004\014\006\023\007\026\010\027\012\032" +
    "\015\024\017\034\001\001\000\022\004\045\006\052\007" +
    "\053\010\054\011\050\012\055\015\051\017\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\215\004" +
    "\014\006\023\007\026\010\027\012\032\015\024\017\034" +
    "\001\001\000\022\004\045\006\052\007\053\010\054\011" +
    "\050\012\055\015\051\017\056\001\001\000\002\001\001" +
    "\000\022\003\220\004\014\006\023\007\026\010\027\012" +
    "\032\015\024\017\034\001\001\000\022\004\045\006\052" +
    "\007\053\010\054\011\050\012\055\015\051\017\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\226\004\014\006\023\007" +
    "\026\010\027\012\032\015\024\017\034\001\001\000\022" +
    "\004\045\006\052\007\053\010\054\011\050\012\055\015" +
    "\051\017\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\233\004\014\006\023\007" +
    "\026\010\027\012\032\015\024\017\034\001\001\000\022" +
    "\004\045\006\052\007\053\010\054\011\050\012\055\015" +
    "\051\017\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\242\004\014\006\023\007\026\010\027" +
    "\012\032\015\024\017\034\001\001\000\022\004\045\006" +
    "\052\007\053\010\054\011\050\012\055\015\051\017\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\307\004\014\006\023\007\026\010\027\012\032" +
    "\015\024\017\034\001\001\000\022\004\045\006\052\007" +
    "\053\010\054\011\050\012\055\015\051\017\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\314\004\014\006\023\007\026\010\027\012\032" +
    "\015\024\017\034\001\001\000\022\004\045\006\052\007" +
    "\053\010\054\011\050\012\055\015\051\017\056\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntaxis_error(Symbol s){
        this.s=s;
        System.out.println("compiler has detected a syntax error at line " + s.left 
            + " column " + s.right);
    }
    
    public Symbol getS(){
        return s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // foreach_statement ::= DATA_TYPE IDENTIFIER ATRIBUTION_OPERATOR STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foreach_statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // foreach ::= FOREACH OPENING_PARENT foreach_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foreach",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // for_declaration ::= INCREASE_OPERATOR IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // for_declaration ::= IDENTIFIER INCREASE_OPERATOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // for_declaration ::= IDENTIFIER ATRIBUTION_OPERATOR DECINTEGERLITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // for_statement ::= IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON boolean_statement SEMICOLON for_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // for_statement ::= DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON boolean_statement SEMICOLON for_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // for ::= FOR OPENING_PARENT for_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // do_while ::= DO OPENING_KEY statement CLOSING_KEY WHILE OPENING_PARENT boolean_statement CLOSING_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_while",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // while ::= WHILE OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // switch ::= SWITCH OPENING_PARENT statement CLOSING_PARENT OPENING_KEY CASE IDENTIFIER ATRIBUTION_OPERATOR statement BREAK SEMICOLON DEFAULT ATRIBUTION_OPERATOR statement BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // switch ::= SWITCH OPENING_PARENT statement CLOSING_PARENT OPENING_KEY CASE IDENTIFIER ATRIBUTION_OPERATOR statement BREAK SEMICOLON DEFAULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // if_else ::= IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY ELSE OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_else",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // boolean_statement ::= IDENTIFIER RELATIONAL_OPERATOR QUOTES IDENTIFIER QUOTES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // boolean_statement ::= IDENTIFIER RELATIONAL_OPERATOR QUOTES QUOTES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // boolean_statement ::= IDENTIFIER RELATIONAL_OPERATOR IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // boolean_statement ::= IDENTIFIER RELATIONAL_OPERATOR DECINTEGERLITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // boolean_statement ::= IDENTIFIER RELATIONAL_OPERATOR BOOLEAN_OPERATOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // boolean_statement ::= BOOLEAN_OPERATOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // if ::= IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaration ::= CONST DATA_TYPE IDENTIFIER EQ QUOTES QUOTES SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaration ::= CONST DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaration ::= FINAL DATA_TYPE IDENTIFIER EQ QUOTES QUOTES SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaration ::= FINAL DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaration ::= FINAL IDENTIFIER EQ NEW DATA_TYPE SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaration ::= BOOL IDENTIFIER EQ FALSE SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaration ::= BOOL IDENTIFIER EQ TRUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaration ::= STRING IDENTIFIER EQ QUOTES IDENTIFIER QUOTES SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaration ::= STRING IDENTIFIER EQ QUOTES QUOTES SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaration ::= STRING IDENTIFIER EQ QUOTES STRING QUOTES SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaration ::= DATA_TYPE INCREASE_OPERATOR IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaration ::= DATA_TYPE IDENTIFIER INCREASE_OPERATOR SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaration ::= DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL DIVISION DECINTEGERLITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaration ::= DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL POW DECINTEGERLITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaration ::= DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL PLUS DECINTEGERLITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaration ::= DATA_TYPE IDENTIFIER ATRIBUTION_OPERATOR DECINTEGERLITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaration ::= DATA_TYPE IDENTIFIER EQ STRING SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaration ::= DATA_TYPE IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // log_aritmetica ::= OP_ARITMETICA OR log_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_aritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // log_aritmetica ::= OP_ARITMETICA AND log_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_aritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // log_aritmetica ::= OP_ARITMETICA OR OP_ARITMETICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_aritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // log_aritmetica ::= OP_ARITMETICA AND OP_ARITMETICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_aritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // return_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // return_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // return_type ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // return_type ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // return_type ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= foreach 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= statement foreach 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= statement for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= statement do_while do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= statement switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= statement while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= statement if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= statement if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= statement declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= VOID MAIN OPENING_PARENT CLOSING_PARENT OPENING_KEY CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= VOID MAIN OPENING_PARENT CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= IDENTIFIER return_type STRING OPENING_PARENT CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= IDENTIFIER MAIN OPENING_PARENT CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

