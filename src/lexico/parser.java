
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 16 14:57:23 CST 2022
//----------------------------------------------------

package lexico;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 16 14:57:23 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\011\000\002\002" +
    "\012\000\002\002\011\000\002\002\010\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\005\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\004\005\000\002\004\007\000\002\004\007" +
    "\000\002\004\006\000\002\004\006\000\002\004\010\000" +
    "\002\004\010\000\002\004\011\000\002\004\011\000\002" +
    "\004\010\000\002\004\010\000\002\004\011\000\002\004" +
    "\010\000\002\004\011\000\002\006\011\000\002\013\003" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\006\000\002\013\007\000\002\007\015\000\002" +
    "\017\016\000\002\017\022\000\002\010\011\000\002\011" +
    "\013\000\002\012\011\000\002\014\012\000\002\014\011" +
    "\000\002\005\005\000\002\005\004\000\002\005\004\000" +
    "\002\015\011\000\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\006\033\004\054\005\001\002\000\016\007" +
    "\260\054\264\125\261\170\266\171\263\172\265\001\002" +
    "\000\004\125\010\001\002\000\004\002\007\001\002\000" +
    "\004\002\001\001\002\000\004\025\011\001\002\000\004" +
    "\026\012\001\002\000\004\027\013\001\002\000\026\006" +
    "\017\007\023\010\022\030\014\042\032\043\031\045\026" +
    "\112\035\136\020\142\021\001\002\000\004\002\ufffd\001" +
    "\002\000\034\006\ufffb\007\ufffb\010\ufffb\012\ufffb\026\ufffb" +
    "\030\ufffb\037\ufffb\042\ufffb\043\ufffb\045\ufffb\112\ufffb\136" +
    "\ufffb\142\ufffb\001\002\000\030\006\017\007\023\010\022" +
    "\012\047\030\257\042\032\043\031\045\026\112\035\136" +
    "\020\142\021\001\002\000\006\023\242\033\243\001\002" +
    "\000\004\025\234\001\002\000\004\025\215\001\002\000" +
    "\004\025\203\001\002\000\004\033\164\001\002\000\034" +
    "\006\uffee\007\uffee\010\uffee\012\uffee\026\uffee\030\uffee\037" +
    "\uffee\042\uffee\043\uffee\045\uffee\112\uffee\136\uffee\142\uffee" +
    "\001\002\000\034\006\ufff9\007\ufff9\010\ufff9\012\ufff9\026" +
    "\ufff9\030\ufff9\037\ufff9\042\ufff9\043\ufff9\045\ufff9\112\ufff9" +
    "\136\ufff9\142\ufff9\001\002\000\004\025\152\001\002\000" +
    "\034\006\ufff7\007\ufff7\010\ufff7\012\ufff7\026\ufff7\030\ufff7" +
    "\037\ufff7\042\ufff7\043\ufff7\045\ufff7\112\ufff7\136\ufff7\142" +
    "\ufff7\001\002\000\034\006\ufff3\007\ufff3\010\ufff3\012\ufff3" +
    "\026\ufff3\030\ufff3\037\ufff3\042\ufff3\043\ufff3\045\ufff3\112" +
    "\ufff3\136\ufff3\142\ufff3\001\002\000\004\006\142\001\002" +
    "\000\006\006\125\033\126\001\002\000\034\006\ufff0\007" +
    "\ufff0\010\ufff0\012\ufff0\026\ufff0\030\ufff0\037\ufff0\042\ufff0" +
    "\043\ufff0\045\ufff0\112\ufff0\136\ufff0\142\ufff0\001\002\000" +
    "\034\006\ufff5\007\ufff5\010\ufff5\012\ufff5\026\ufff5\030\ufff5" +
    "\037\ufff5\042\ufff5\043\ufff5\045\ufff5\112\ufff5\136\ufff5\142" +
    "\ufff5\001\002\000\004\025\036\001\002\000\006\006\037" +
    "\033\040\001\002\000\004\033\116\001\002\000\004\013" +
    "\102\001\002\000\004\026\042\001\002\000\004\027\043" +
    "\001\002\000\024\006\017\007\023\010\022\042\032\043" +
    "\031\045\026\112\035\136\020\142\021\001\002\000\030" +
    "\006\017\007\023\010\022\012\047\030\046\042\032\043" +
    "\031\045\026\112\035\136\020\142\021\001\002\000\034" +
    "\006\ufffc\007\ufffc\010\ufffc\012\ufffc\026\ufffc\030\ufffc\037" +
    "\ufffc\042\ufffc\043\ufffc\045\ufffc\112\ufffc\136\ufffc\142\ufffc" +
    "\001\002\000\034\006\uffca\007\uffca\010\uffca\012\uffca\026" +
    "\uffca\030\uffca\037\uffca\042\uffca\043\uffca\045\uffca\112\uffca" +
    "\136\uffca\142\uffca\001\002\000\004\027\060\001\002\000" +
    "\004\012\047\001\002\000\034\006\uffef\007\uffef\010\uffef" +
    "\012\uffef\026\uffef\030\uffef\037\uffef\042\uffef\043\uffef\045" +
    "\uffef\112\uffef\136\uffef\142\uffef\001\002\000\034\006\ufffa" +
    "\007\ufffa\010\ufffa\012\ufffa\026\ufffa\030\ufffa\037\ufffa\042" +
    "\ufffa\043\ufffa\045\ufffa\112\ufffa\136\ufffa\142\ufffa\001\002" +
    "\000\034\006\ufff8\007\ufff8\010\ufff8\012\ufff8\026\ufff8\030" +
    "\ufff8\037\ufff8\042\ufff8\043\ufff8\045\ufff8\112\ufff8\136\ufff8" +
    "\142\ufff8\001\002\000\034\006\ufff6\007\ufff6\010\ufff6\012" +
    "\ufff6\026\ufff6\030\ufff6\037\ufff6\042\ufff6\043\ufff6\045\ufff6" +
    "\112\ufff6\136\ufff6\142\ufff6\001\002\000\034\006\ufff1\007" +
    "\ufff1\010\ufff1\012\ufff1\026\ufff1\030\ufff1\037\ufff1\042\ufff1" +
    "\043\ufff1\045\ufff1\112\ufff1\136\ufff1\142\ufff1\001\002\000" +
    "\034\006\ufff4\007\ufff4\010\ufff4\012\ufff4\026\ufff4\030\ufff4" +
    "\037\ufff4\042\ufff4\043\ufff4\045\ufff4\112\ufff4\136\ufff4\142" +
    "\ufff4\001\002\000\034\006\ufff2\007\ufff2\010\ufff2\012\ufff2" +
    "\026\ufff2\030\ufff2\037\ufff2\042\ufff2\043\ufff2\045\ufff2\112" +
    "\ufff2\136\ufff2\142\ufff2\001\002\000\024\006\017\007\023" +
    "\010\022\042\032\043\031\045\026\112\035\136\020\142" +
    "\021\001\002\000\030\006\017\007\023\010\022\012\047" +
    "\030\062\042\032\043\031\045\026\112\035\136\020\142" +
    "\021\001\002\000\004\136\063\001\002\000\004\025\064" +
    "\001\002\000\006\024\067\033\065\001\002\000\004\021" +
    "\072\001\002\000\004\026\070\001\002\000\006\026\uffd5" +
    "\073\uffd5\001\002\000\004\073\071\001\002\000\034\006" +
    "\uffcb\007\uffcb\010\uffcb\012\uffcb\026\uffcb\030\uffcb\037\uffcb" +
    "\042\uffcb\043\uffcb\045\uffcb\112\uffcb\136\uffcb\142\uffcb\001" +
    "\002\000\012\005\073\024\076\033\075\034\074\001\002" +
    "\000\006\005\077\033\100\001\002\000\006\026\uffd3\073" +
    "\uffd3\001\002\000\006\026\uffd2\073\uffd2\001\002\000\006" +
    "\026\uffd4\073\uffd4\001\002\000\006\026\uffd1\073\uffd1\001" +
    "\002\000\004\005\101\001\002\000\006\026\uffd0\073\uffd0" +
    "\001\002\000\004\034\103\001\002\000\004\073\104\001" +
    "\002\000\006\024\067\033\065\001\002\000\004\073\106" +
    "\001\002\000\006\023\110\033\111\001\002\000\004\026" +
    "\uffc8\001\002\000\004\033\115\001\002\000\006\022\113" +
    "\023\112\001\002\000\004\026\uffc6\001\002\000\004\034" +
    "\114\001\002\000\004\026\uffc7\001\002\000\004\026\uffc5" +
    "\001\002\000\004\013\117\001\002\000\004\034\120\001" +
    "\002\000\004\073\121\001\002\000\006\024\067\033\065" +
    "\001\002\000\004\073\123\001\002\000\006\023\110\033" +
    "\111\001\002\000\004\026\uffc9\001\002\000\004\033\133" +
    "\001\002\000\004\013\127\001\002\000\004\062\130\001" +
    "\002\000\004\006\131\001\002\000\004\073\132\001\002" +
    "\000\034\006\uffdb\007\uffdb\010\uffdb\012\uffdb\026\uffdb\030" +
    "\uffdb\037\uffdb\042\uffdb\043\uffdb\045\uffdb\112\uffdb\136\uffdb" +
    "\142\uffdb\001\002\000\004\013\134\001\002\000\006\005" +
    "\135\034\136\001\002\000\004\005\140\001\002\000\004" +
    "\073\137\001\002\000\034\006\uffda\007\uffda\010\uffda\012" +
    "\uffda\026\uffda\030\uffda\037\uffda\042\uffda\043\uffda\045\uffda" +
    "\112\uffda\136\uffda\142\uffda\001\002\000\004\073\141\001" +
    "\002\000\034\006\uffd9\007\uffd9\010\uffd9\012\uffd9\026\uffd9" +
    "\030\uffd9\037\uffd9\042\uffd9\043\uffd9\045\uffd9\112\uffd9\136" +
    "\uffd9\142\uffd9\001\002\000\004\033\143\001\002\000\004" +
    "\013\144\001\002\000\006\005\145\034\146\001\002\000" +
    "\004\005\150\001\002\000\004\073\147\001\002\000\034" +
    "\006\uffd8\007\uffd8\010\uffd8\012\uffd8\026\uffd8\030\uffd8\037" +
    "\uffd8\042\uffd8\043\uffd8\045\uffd8\112\uffd8\136\uffd8\142\uffd8" +
    "\001\002\000\004\073\151\001\002\000\034\006\uffd7\007" +
    "\uffd7\010\uffd7\012\uffd7\026\uffd7\030\uffd7\037\uffd7\042\uffd7" +
    "\043\uffd7\045\uffd7\112\uffd7\136\uffd7\142\uffd7\001\002\000" +
    "\004\006\153\001\002\000\004\033\161\001\002\000\004" +
    "\026\155\001\002\000\004\027\156\001\002\000\024\006" +
    "\017\007\023\010\022\042\032\043\031\045\026\112\035" +
    "\136\020\142\021\001\002\000\030\006\017\007\023\010" +
    "\022\012\047\030\160\042\032\043\031\045\026\112\035" +
    "\136\020\142\021\001\002\000\034\006\uffc4\007\uffc4\010" +
    "\uffc4\012\uffc4\026\uffc4\030\uffc4\037\uffc4\042\uffc4\043\uffc4" +
    "\045\uffc4\112\uffc4\136\uffc4\142\uffc4\001\002\000\004\022" +
    "\162\001\002\000\004\007\163\001\002\000\004\026\uffc3" +
    "\001\002\000\006\013\165\022\166\001\002\000\004\005" +
    "\175\001\002\000\004\005\167\001\002\000\006\005\170" +
    "\033\171\001\002\000\004\073\174\001\002\000\004\005" +
    "\172\001\002\000\004\073\173\001\002\000\034\006\uffdd" +
    "\007\uffdd\010\uffdd\012\uffdd\026\uffdd\030\uffdd\037\uffdd\042" +
    "\uffdd\043\uffdd\045\uffdd\112\uffdd\136\uffdd\142\uffdd\001\002" +
    "\000\034\006\uffdf\007\uffdf\010\uffdf\012\uffdf\026\uffdf\030" +
    "\uffdf\037\uffdf\042\uffdf\043\uffdf\045\uffdf\112\uffdf\136\uffdf" +
    "\142\uffdf\001\002\000\006\005\176\033\177\001\002\000" +
    "\004\073\202\001\002\000\004\005\200\001\002\000\004" +
    "\073\201\001\002\000\034\006\uffdc\007\uffdc\010\uffdc\012" +
    "\uffdc\026\uffdc\030\uffdc\037\uffdc\042\uffdc\043\uffdc\045\uffdc" +
    "\112\uffdc\136\uffdc\142\uffdc\001\002\000\034\006\uffde\007" +
    "\uffde\010\uffde\012\uffde\026\uffde\030\uffde\037\uffde\042\uffde" +
    "\043\uffde\045\uffde\112\uffde\136\uffde\142\uffde\001\002\000" +
    "\006\024\067\033\065\001\002\000\004\026\205\001\002" +
    "\000\004\027\206\001\002\000\024\006\017\007\023\010" +
    "\022\042\032\043\031\045\026\112\035\136\020\142\021" +
    "\001\002\000\030\006\017\007\023\010\022\012\047\030" +
    "\210\042\032\043\031\045\026\112\035\136\020\142\021" +
    "\001\002\000\036\006\uffd6\007\uffd6\010\uffd6\011\211\012" +
    "\uffd6\026\uffd6\030\uffd6\037\uffd6\042\uffd6\043\uffd6\045\uffd6" +
    "\112\uffd6\136\uffd6\142\uffd6\001\002\000\004\027\212\001" +
    "\002\000\024\006\017\007\023\010\022\042\032\043\031" +
    "\045\026\112\035\136\020\142\021\001\002\000\030\006" +
    "\017\007\023\010\022\012\047\030\214\042\032\043\031" +
    "\045\026\112\035\136\020\142\021\001\002\000\034\006" +
    "\uffcf\007\uffcf\010\uffcf\012\uffcf\026\uffcf\030\uffcf\037\uffcf" +
    "\042\uffcf\043\uffcf\045\uffcf\112\uffcf\136\uffcf\142\uffcf\001" +
    "\002\000\024\006\017\007\023\010\022\042\032\043\031" +
    "\045\026\112\035\136\020\142\021\001\002\000\030\006" +
    "\017\007\023\010\022\012\047\026\217\042\032\043\031" +
    "\045\026\112\035\136\020\142\021\001\002\000\004\027" +
    "\220\001\002\000\004\122\221\001\002\000\004\033\222" +
    "\001\002\000\004\022\223\001\002\000\024\006\017\007" +
    "\023\010\022\042\032\043\031\045\026\112\035\136\020" +
    "\142\021\001\002\000\030\006\017\007\023\010\022\012" +
    "\047\037\225\042\032\043\031\045\026\112\035\136\020" +
    "\142\021\001\002\000\004\073\226\001\002\000\004\152" +
    "\227\001\002\000\036\006\uffce\007\uffce\010\uffce\012\uffce" +
    "\022\230\026\uffce\030\uffce\037\uffce\042\uffce\043\uffce\045" +
    "\uffce\112\uffce\136\uffce\142\uffce\001\002\000\024\006\017" +
    "\007\023\010\022\042\032\043\031\045\026\112\035\136" +
    "\020\142\021\001\002\000\030\006\017\007\023\010\022" +
    "\012\047\037\232\042\032\043\031\045\026\112\035\136" +
    "\020\142\021\001\002\000\004\073\233\001\002\000\034" +
    "\006\uffcd\007\uffcd\010\uffcd\012\uffcd\026\uffcd\030\uffcd\037" +
    "\uffcd\042\uffcd\043\uffcd\045\uffcd\112\uffcd\136\uffcd\142\uffcd" +
    "\001\002\000\006\024\067\033\065\001\002\000\004\026" +
    "\236\001\002\000\004\027\237\001\002\000\024\006\017" +
    "\007\023\010\022\042\032\043\031\045\026\112\035\136" +
    "\020\142\021\001\002\000\030\006\017\007\023\010\022" +
    "\012\047\030\241\042\032\043\031\045\026\112\035\136" +
    "\020\142\021\001\002\000\034\006\uffcc\007\uffcc\010\uffcc" +
    "\012\uffcc\026\uffcc\030\uffcc\037\uffcc\042\uffcc\043\uffcc\045" +
    "\uffcc\112\uffcc\136\uffcc\142\uffcc\001\002\000\004\033\255" +
    "\001\002\000\012\013\245\022\247\023\246\073\244\001" +
    "\002\000\034\006\uffe4\007\uffe4\010\uffe4\012\uffe4\026\uffe4" +
    "\030\uffe4\037\uffe4\042\uffe4\043\uffe4\045\uffe4\112\uffe4\136" +
    "\uffe4\142\uffe4\001\002\000\004\034\253\001\002\000\004" +
    "\073\252\001\002\000\004\034\250\001\002\000\004\073" +
    "\251\001\002\000\034\006\uffe3\007\uffe3\010\uffe3\012\uffe3" +
    "\026\uffe3\030\uffe3\037\uffe3\042\uffe3\043\uffe3\045\uffe3\112" +
    "\uffe3\136\uffe3\142\uffe3\001\002\000\034\006\uffe1\007\uffe1" +
    "\010\uffe1\012\uffe1\026\uffe1\030\uffe1\037\uffe1\042\uffe1\043" +
    "\uffe1\045\uffe1\112\uffe1\136\uffe1\142\uffe1\001\002\000\004" +
    "\073\254\001\002\000\034\006\uffe2\007\uffe2\010\uffe2\012" +
    "\uffe2\026\uffe2\030\uffe2\037\uffe2\042\uffe2\043\uffe2\045\uffe2" +
    "\112\uffe2\136\uffe2\142\uffe2\001\002\000\004\073\256\001" +
    "\002\000\034\006\uffe0\007\uffe0\010\uffe0\012\uffe0\026\uffe0" +
    "\030\uffe0\037\uffe0\042\uffe0\043\uffe0\045\uffe0\112\uffe0\136" +
    "\uffe0\142\uffe0\001\002\000\004\002\ufffe\001\002\000\004" +
    "\007\uffeb\001\002\000\004\025\275\001\002\000\004\007" +
    "\267\001\002\000\004\007\uffea\001\002\000\004\007\uffed" +
    "\001\002\000\004\007\uffe9\001\002\000\004\007\uffec\001" +
    "\002\000\004\025\270\001\002\000\004\026\271\001\002" +
    "\000\004\027\272\001\002\000\024\006\017\007\023\010" +
    "\022\042\032\043\031\045\026\112\035\136\020\142\021" +
    "\001\002\000\030\006\017\007\023\010\022\012\047\030" +
    "\274\042\032\043\031\045\026\112\035\136\020\142\021" +
    "\001\002\000\004\002\uffff\001\002\000\004\026\276\001" +
    "\002\000\004\027\277\001\002\000\024\006\017\007\023" +
    "\010\022\042\032\043\031\045\026\112\035\136\020\142" +
    "\021\001\002\000\030\006\017\007\023\010\022\012\047" +
    "\030\301\042\032\043\031\045\026\112\035\136\020\142" +
    "\021\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\004\002\005\001\001\000\004\021\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\015\004\014\006\024\007\026\010\027\012\032" +
    "\015\023\017\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\044\006\051\007\052\010\053\011\047" +
    "\012\054\015\050\017\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\043\004\014\006\024\007\026\010\027\012\032" +
    "\015\023\017\033\001\001\000\022\004\044\006\051\007" +
    "\052\010\053\011\047\012\054\015\050\017\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\060\004\014" +
    "\006\024\007\026\010\027\012\032\015\023\017\033\001" +
    "\001\000\022\004\044\006\051\007\052\010\053\011\047" +
    "\012\054\015\050\017\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\104\001\001\000\002\001" +
    "\001\000\004\005\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\121\001" +
    "\001\000\002\001\001\000\004\005\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\156\004\014\006\024\007\026\010\027\012" +
    "\032\015\023\017\033\001\001\000\022\004\044\006\051" +
    "\007\052\010\053\011\047\012\054\015\050\017\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\206\004\014\006\024\007\026\010\027\012" +
    "\032\015\023\017\033\001\001\000\022\004\044\006\051" +
    "\007\052\010\053\011\047\012\054\015\050\017\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\212" +
    "\004\014\006\024\007\026\010\027\012\032\015\023\017" +
    "\033\001\001\000\022\004\044\006\051\007\052\010\053" +
    "\011\047\012\054\015\050\017\055\001\001\000\002\001" +
    "\001\000\022\003\215\004\014\006\024\007\026\010\027" +
    "\012\032\015\023\017\033\001\001\000\022\004\044\006" +
    "\051\007\052\010\053\011\047\012\054\015\050\017\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\223\004\014\006\024" +
    "\007\026\010\027\012\032\015\023\017\033\001\001\000" +
    "\022\004\044\006\051\007\052\010\053\011\047\012\054" +
    "\015\050\017\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\230\004\014\006\024" +
    "\007\026\010\027\012\032\015\023\017\033\001\001\000" +
    "\022\004\044\006\051\007\052\010\053\011\047\012\054" +
    "\015\050\017\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\237\004\014\006\024\007\026\010" +
    "\027\012\032\015\023\017\033\001\001\000\022\004\044" +
    "\006\051\007\052\010\053\011\047\012\054\015\050\017" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\272\004\014\006\024\007\026\010\027\012\032" +
    "\015\023\017\033\001\001\000\022\004\044\006\051\007" +
    "\052\010\053\011\047\012\054\015\050\017\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\277\004\014\006\024\007\026\010\027\012\032" +
    "\015\023\017\033\001\001\000\022\004\044\006\051\007" +
    "\052\010\053\011\047\012\054\015\050\017\055\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntaxis_error(Symbol s){
        this.s=s;
        System.out.println("compiler has detected a syntax error at line " + s.left 
            + " column " + s.right);
    }
    
    public Symbol getS(){
        return s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // foreach_statement ::= DATA_TYPE IDENTIFIER ATRIBUTION_OPERATOR STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foreach_statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // foreach ::= FOREACH OPENING_PARENT foreach_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foreach",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // for_declaration ::= INCREASE_OPERATOR IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // for_declaration ::= IDENTIFIER INCREASE_OPERATOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // for_declaration ::= IDENTIFIER ATRIBUTION_OPERATOR NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // for_statement ::= IDENTIFIER EQUALS NUMBER SEMICOLON boolean_statement SEMICOLON for_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // for_statement ::= DATA_TYPE IDENTIFIER EQUALS NUMBER SEMICOLON boolean_statement SEMICOLON for_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // for ::= FOR OPENING_PARENT for_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // do_while ::= DO OPENING_KEY statement CLOSING_KEY WHILE OPENING_PARENT boolean_statement CLOSING_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_while",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // while ::= WHILE OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // switch ::= SWITCH OPENING_PARENT statement CLOSING_PARENT OPENING_KEY CASE IDENTIFIER ATRIBUTION_OPERATOR statement BREAK SEMICOLON DEFAULT ATRIBUTION_OPERATOR statement BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // switch ::= SWITCH OPENING_PARENT statement CLOSING_PARENT OPENING_KEY CASE IDENTIFIER ATRIBUTION_OPERATOR statement BREAK SEMICOLON DEFAULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if_else ::= IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY ELSE OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_else",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // boolean_statement ::= IDENTIFIER RELATIONAL_OPERATOR QUOTES IDENTIFIER QUOTES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // boolean_statement ::= IDENTIFIER RELATIONAL_OPERATOR QUOTES QUOTES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // boolean_statement ::= IDENTIFIER RELATIONAL_OPERATOR IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // boolean_statement ::= IDENTIFIER RELATIONAL_OPERATOR NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // boolean_statement ::= IDENTIFIER RELATIONAL_OPERATOR BOOLEAN_OPERATOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // boolean_statement ::= BOOLEAN_OPERATOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // if ::= IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaration ::= CONST DATA_TYPE IDENTIFIER EQUALS QUOTES QUOTES SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaration ::= CONST DATA_TYPE IDENTIFIER EQUALS NUMBER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaration ::= FINAL DATA_TYPE IDENTIFIER EQUALS QUOTES QUOTES SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaration ::= FINAL DATA_TYPE IDENTIFIER EQUALS NUMBER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaration ::= FINAL IDENTIFIER EQUALS NEW DATA_TYPE SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaration ::= STRING IDENTIFIER EQUALS QUOTES IDENTIFIER QUOTES SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaration ::= STRING IDENTIFIER ATRIBUTION_OPERATOR QUOTES IDENTIFIER QUOTES SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaration ::= STRING IDENTIFIER EQUALS QUOTES QUOTES SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaration ::= STRING IDENTIFIER ATRIBUTION_OPERATOR QUOTES QUOTES SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaration ::= DATA_TYPE INCREASE_OPERATOR IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaration ::= DATA_TYPE IDENTIFIER INCREASE_OPERATOR SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaration ::= DATA_TYPE IDENTIFIER EQUALS NUMBER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaration ::= DATA_TYPE IDENTIFIER ATRIBUTION_OPERATOR NUMBER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaration ::= DATA_TYPE IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // log_aritmetica ::= OP_ARITMETICA OR log_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_aritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // log_aritmetica ::= OP_ARITMETICA AND log_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_aritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // log_aritmetica ::= OP_ARITMETICA OR OP_ARITMETICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_aritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // log_aritmetica ::= OP_ARITMETICA AND OP_ARITMETICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_aritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // return_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // return_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // return_type ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // return_type ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // return_type ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= foreach 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= statement foreach 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= statement for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= statement do_while do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= statement switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= statement while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= statement if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= statement if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= statement declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= VOID MAIN OPENING_PARENT CLOSING_PARENT OPENING_KEY CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= VOID MAIN OPENING_PARENT CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= IDENTIFIER return_type STRING OPENING_PARENT CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= IDENTIFIER MAIN OPENING_PARENT CLOSING_PARENT OPENING_KEY statement CLOSING_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

