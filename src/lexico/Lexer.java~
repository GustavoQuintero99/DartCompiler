// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: JFlexDart.jflex

/* JFlex example: partial Java language lexer specification */
package lexico;


import java_cup.runtime.*;
import lexico.DartReservedWords;
import lexico.DartOperators;
import lexico.DartBuiltInWords;
import java_cup.sym;
/**
 * Dart Lexer
 */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000"+
    "\1\u5100\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00\4\u0100\1\u5500"+
    "\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00"+
    "\1\u5900\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\42\u1f00"+
    "\1\u0100\1\u5e00\1\u5f00\11\u1f00\1\u6000\24\u1f00\1\u6100\1\u6200"+
    "\1\u1f00\1\u6300\1\u6400\1\u6500\1\u6600\2\u1f00\1\u6700\5\u1f00"+
    "\1\u6800\1\u6900\1\u6a00\5\u1f00\1\u6b00\1\u6c00\2\u1f00\1\u6d00"+
    "\1\u1f00\1\u6e00\14\u1f00\1\u6f00\4\u1f00\246\u0100\1\u7000\20\u0100"+
    "\1\u7100\1\u7200\25\u0100\1\u7300\34\u0100\1\u7400\14\u1f00\2\u0100"+
    "\1\u7500\5\u1f00\23\u0100\1\u7600\u0aec\u1f00\1\u7700\1\u7800\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\2\0\1\2\22\0\1\3\1\0\1\4"+
    "\2\0\1\5\1\6\1\0\1\7\1\10\1\11\1\12"+
    "\1\0\1\13\1\14\14\0\1\15\1\0\1\16\35\0"+
    "\1\17\1\20\1\21\1\22\2\0\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\0\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\0\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\0\1\52"+
    "\1\53\1\54\u7882\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30976];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\24\1\1\14"+
    "\1\1\1\15\1\16\1\3\1\17\1\4\1\16\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\20\1\14"+
    "\1\16\1\15\1\0\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\0\1\30\6\0\1\31\12\0\1\32"+
    "\1\0\1\33\1\34\5\0\1\35\22\0\1\36\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\37\1\40"+
    "\1\41\1\42\1\36\24\0\1\43\1\0\1\44\6\0"+
    "\1\45\5\0\1\46\10\0\1\47\1\0\1\50\12\0"+
    "\1\51\10\0\1\52\1\53\6\0\1\54\4\0\1\55"+
    "\1\0\1\56\1\0\1\57\3\0\1\60\3\0\1\61"+
    "\1\62\1\0\1\63\1\0\1\64\1\0\1\65\4\0"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\11\0\1\74"+
    "\1\75\5\0\1\76\1\0\1\77\3\0\1\100\1\0"+
    "\1\101\1\0\1\102\1\103\2\0\1\104\5\0\1\105"+
    "\7\0\1\106\4\0\1\107\1\110\1\111\5\0\1\112"+
    "\1\0\1\113\1\114\2\0\1\115\1\116\3\0\1\117"+
    "\1\0\1\120\1\121\1\0\1\122\1\123\1\0\1\124"+
    "\1\0\1\125\1\126\2\0\1\127\1\0\1\130\1\131"+
    "\1\0\1\132\1\133\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[321];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\132\0\132\0\207\0\132\0\264"+
    "\0\132\0\132\0\341\0\u010e\0\u013b\0\132\0\u0168\0\u0195"+
    "\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd"+
    "\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b\0\u0438\0\u0465"+
    "\0\u0492\0\u04bf\0\u04ec\0\132\0\u0519\0\132\0\u0546\0\u0546"+
    "\0\132\0\u0546\0\u0573\0\u0546\0\u0546\0\u05a0\0\u05cd\0\u05fa"+
    "\0\u0546\0\u0627\0\u0654\0\u0546\0\u0681\0\u0546\0\u06ae\0\132"+
    "\0\132\0\132\0\132\0\132\0\132\0\132\0\u06db\0\u0708"+
    "\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\132\0\u0843"+
    "\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab"+
    "\0\u09d8\0\132\0\u0a05\0\u0a32\0\132\0\u0a5f\0\u0a8c\0\u0ab9"+
    "\0\u0ae6\0\u0b13\0\132\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4"+
    "\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c"+
    "\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\132\0\u0546\0\u0546"+
    "\0\u0546\0\u0546\0\u0546\0\u0546\0\u0546\0\132\0\132\0\132"+
    "\0\132\0\u0546\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b"+
    "\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3"+
    "\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1\0\132\0\u11ee"+
    "\0\132\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\132"+
    "\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\132\0\u140a\0\u1437"+
    "\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\132\0\u1572"+
    "\0\132\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad"+
    "\0\u16da\0\u1707\0\u1734\0\132\0\u1761\0\u178e\0\u17bb\0\u17e8"+
    "\0\u1815\0\u1842\0\u186f\0\u189c\0\132\0\132\0\u18c9\0\u18f6"+
    "\0\u1923\0\u1950\0\u197d\0\u19aa\0\132\0\u19d7\0\u1a04\0\u1a31"+
    "\0\u1a5e\0\132\0\u1a8b\0\132\0\u1ab8\0\132\0\u1ae5\0\u1b12"+
    "\0\u1b3f\0\132\0\u1b6c\0\u1b99\0\u1bc6\0\132\0\132\0\u1bf3"+
    "\0\132\0\u1c20\0\132\0\u1c4d\0\132\0\u1c7a\0\u1ca7\0\u1cd4"+
    "\0\u1d01\0\132\0\132\0\132\0\132\0\132\0\132\0\u1d2e"+
    "\0\u1d5b\0\u1d88\0\u1db5\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96"+
    "\0\132\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4\0\132"+
    "\0\u1fd1\0\132\0\u1ffe\0\u202b\0\u2058\0\132\0\u2085\0\132"+
    "\0\u20b2\0\132\0\132\0\u20df\0\u210c\0\132\0\u2139\0\u2166"+
    "\0\u2193\0\u21c0\0\u21ed\0\132\0\u221a\0\u2247\0\u2274\0\u22a1"+
    "\0\u22ce\0\u22fb\0\u2328\0\132\0\u2355\0\u2382\0\u23af\0\u23dc"+
    "\0\132\0\132\0\132\0\u2409\0\u2436\0\u2463\0\u2490\0\u24bd"+
    "\0\132\0\u24ea\0\132\0\132\0\u2517\0\u2544\0\132\0\132"+
    "\0\u2571\0\u259e\0\u25cb\0\132\0\u25f8\0\132\0\132\0\u2625"+
    "\0\132\0\132\0\u2652\0\132\0\u267f\0\132\0\132\0\u26ac"+
    "\0\u26d9\0\132\0\u2706\0\132\0\132\0\u2733\0\132\0\132"+
    "\0\132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[321];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\3\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\3\1\16\1\17\4\3"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\3\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\3\1\41\1\42\1\3\1\43\1\44"+
    "\1\45\1\46\1\47\1\4\1\3\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\47\1\61"+
    "\1\62\1\47\1\63\31\47\1\64\1\65\1\66\64\0"+
    "\1\67\53\0\1\70\57\0\1\71\55\0\1\72\3\0"+
    "\1\73\51\0\1\74\2\0\1\75\54\0\1\76\62\0"+
    "\1\77\16\0\1\100\3\0\1\101\47\0\1\102\35\0"+
    "\1\103\11\0\1\104\2\0\1\105\43\0\1\106\10\0"+
    "\1\107\10\0\1\110\40\0\1\111\1\0\1\112\10\0"+
    "\1\113\27\0\1\114\7\0\1\115\4\0\1\116\4\0"+
    "\1\117\36\0\1\120\60\0\1\121\51\0\1\122\5\0"+
    "\1\123\1\124\3\0\1\125\44\0\1\126\44\0\1\127"+
    "\7\0\1\130\50\0\1\131\15\0\1\132\46\0\1\133"+
    "\1\0\1\134\36\0\1\135\16\0\1\136\41\0\1\137"+
    "\54\0\1\140\2\0\1\141\11\0\1\142\1\143\1\0"+
    "\1\144\1\0\1\145\35\0\1\146\7\0\1\147\6\0"+
    "\1\150\26\0\1\151\14\0\1\152\46\0\1\153\1\154"+
    "\54\0\1\155\74\0\1\156\1\0\1\47\2\0\1\47"+
    "\1\0\13\47\1\0\35\47\2\0\1\47\1\0\1\47"+
    "\1\157\11\47\1\0\35\47\2\0\1\47\1\0\4\47"+
    "\1\160\6\47\1\0\35\47\2\0\1\47\1\0\5\47"+
    "\1\161\3\47\1\162\1\47\1\0\35\47\2\0\1\47"+
    "\1\0\6\47\1\163\2\47\1\164\1\47\1\0\35\47"+
    "\2\0\1\47\1\0\11\47\1\165\1\47\1\0\34\47"+
    "\4\0\1\166\32\0\1\167\2\0\1\170\1\0\1\171"+
    "\10\0\1\47\2\0\1\47\1\0\13\47\1\0\32\47"+
    "\1\172\1\47\14\0\1\173\103\0\1\174\54\0\1\175"+
    "\5\0\1\176\26\0\1\177\60\0\1\200\70\0\1\201"+
    "\1\202\33\0\1\203\70\0\1\204\6\0\1\205\36\0"+
    "\1\206\63\0\1\207\60\0\1\210\56\0\1\211\50\0"+
    "\1\212\2\0\1\213\35\0\1\214\7\0\1\215\56\0"+
    "\1\216\57\0\1\217\51\0\1\220\61\0\1\221\36\0"+
    "\1\222\67\0\1\223\57\0\1\224\34\0\1\225\63\0"+
    "\1\226\71\0\1\227\53\0\1\230\42\0\1\231\46\0"+
    "\1\232\67\0\1\233\45\0\1\234\65\0\1\235\54\0"+
    "\1\236\50\0\1\237\37\0\1\240\72\0\1\241\46\0"+
    "\1\242\60\0\1\243\50\0\1\244\6\0\1\245\57\0"+
    "\1\246\3\0\1\247\44\0\1\250\55\0\1\251\45\0"+
    "\1\252\54\0\1\253\65\0\1\254\37\0\1\255\44\0"+
    "\1\256\101\0\1\257\37\0\1\260\64\0\1\261\50\0"+
    "\1\262\44\0\1\263\60\0\1\264\52\0\1\265\72\0"+
    "\1\266\54\0\1\267\1\270\33\0\1\271\54\0\1\272"+
    "\3\0\1\273\50\0\1\274\60\0\1\275\63\0\1\276"+
    "\56\0\1\277\43\0\1\300\71\0\1\301\53\0\1\302"+
    "\34\0\1\303\56\0\1\304\56\0\1\305\62\0\1\306"+
    "\2\0\1\307\43\0\1\310\67\0\1\311\51\0\1\312"+
    "\50\0\1\313\56\0\1\314\61\0\1\315\56\0\1\316"+
    "\47\0\1\317\47\0\1\320\12\0\1\321\56\0\1\322"+
    "\51\0\1\323\37\0\1\324\71\0\1\325\35\0\1\326"+
    "\72\0\1\327\51\0\1\330\43\0\1\331\54\0\1\332"+
    "\53\0\1\333\63\0\1\334\51\0\1\335\57\0\1\336"+
    "\41\0\1\337\74\0\1\340\54\0\1\341\37\0\1\342"+
    "\73\0\1\343\44\0\1\344\52\0\1\345\65\0\1\346"+
    "\55\0\1\347\43\0\1\350\63\0\1\351\57\0\1\352"+
    "\51\0\1\353\50\0\1\354\60\0\1\355\51\0\1\356"+
    "\2\0\1\357\52\0\1\360\43\0\1\361\62\0\1\362"+
    "\63\0\1\363\37\0\1\364\67\0\1\365\54\0\1\366"+
    "\35\0\1\367\70\0\1\370\40\0\1\371\75\0\1\372"+
    "\52\0\1\373\54\0\1\374\45\0\1\375\63\0\1\376"+
    "\37\0\1\377\76\0\1\u0100\33\0\1\u0101\55\0\1\u0102"+
    "\53\0\1\u0103\32\0\1\u0104\73\0\1\u0105\75\0\1\u0106"+
    "\47\0\1\u0107\50\0\1\u0108\56\0\1\u0109\61\0\1\u010a"+
    "\45\0\1\u010b\65\0\1\u010c\36\0\1\u010d\14\0\1\u010e"+
    "\50\0\1\u010f\57\0\1\u0110\47\0\1\u0111\52\0\1\u0112"+
    "\57\0\1\u0113\62\0\1\u0114\40\0\1\u0115\66\0\1\u0116"+
    "\56\0\1\u0117\50\0\1\u0118\53\0\1\u0119\42\0\1\u011a"+
    "\61\0\1\u011b\51\0\1\u011c\46\0\1\u011d\60\0\1\u011e"+
    "\74\0\1\u011f\32\0\1\u0120\75\0\1\u0121\37\0\1\u0122"+
    "\52\0\1\u0123\72\0\1\u0124\44\0\1\u0125\44\0\1\u0126"+
    "\102\0\1\u0127\54\0\1\u0128\43\0\1\u0129\43\0\1\u012a"+
    "\50\0\1\u012b\102\0\1\u012c\43\0\1\u012d\63\0\1\u012e"+
    "\35\0\1\u012f\35\0\1\u0130\107\0\1\u0131\37\0\1\u0132"+
    "\64\0\1\u0133\43\0\1\u0134\66\0\1\u0135\51\0\1\u0136"+
    "\56\0\1\u0137\54\0\1\u0138\42\0\1\u0139\71\0\1\u013a"+
    "\22\0\1\u013b\110\0\1\u013c\47\0\1\u013d\61\0\1\u013e"+
    "\37\0\1\u013f\31\0\1\u0140\113\0\1\u0141\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10080];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\11\1\1\1\11\1\1\2\11\3\1\1\11"+
    "\25\1\1\11\1\1\1\11\2\1\1\11\15\1\1\0"+
    "\7\11\1\0\1\1\6\0\1\11\12\0\1\11\1\0"+
    "\1\1\1\11\5\0\1\11\22\0\1\11\7\1\4\11"+
    "\1\1\24\0\1\11\1\0\1\11\6\0\1\11\5\0"+
    "\1\11\10\0\1\11\1\0\1\11\12\0\1\11\10\0"+
    "\2\11\6\0\1\11\4\0\1\11\1\0\1\11\1\0"+
    "\1\11\3\0\1\11\3\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\4\0\6\11\11\0\1\11\1\1"+
    "\5\0\1\11\1\0\1\11\3\0\1\11\1\0\1\11"+
    "\1\0\2\11\2\0\1\11\5\0\1\11\7\0\1\11"+
    "\4\0\3\11\5\0\1\11\1\0\2\11\2\0\2\11"+
    "\3\0\1\11\1\0\2\11\1\0\2\11\1\0\1\11"+
    "\1\0\2\11\2\0\1\11\1\0\2\11\1\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[321];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Illegal character <"+
                                                    yytext()+">");
            }
            // fall through
          case 93: break;
          case 2:
            { return symbol(DartOperators.LINEABREAK.value, yytext());
            }
            // fall through
          case 94: break;
          case 3:
            { return symbol(DartOperators.SPACE.value, yytext());
            }
            // fall through
          case 95: break;
          case 4:
            { return symbol(DartOperators.RESID.value, yytext());
            }
            // fall through
          case 96: break;
          case 5:
            { return symbol(DartOperators.OPENPARENT.value, yytext());
            }
            // fall through
          case 97: break;
          case 6:
            { return symbol(DartOperators.CLOSEPARENT.value, yytext());
            }
            // fall through
          case 98: break;
          case 7:
            { return symbol(DartOperators.POW.value, yytext());
            }
            // fall through
          case 99: break;
          case 8:
            { return symbol(DartOperators.PLUS.value, yytext());
            }
            // fall through
          case 100: break;
          case 9:
            { return symbol(DartOperators.MINUS.value, yytext());
            }
            // fall through
          case 101: break;
          case 10:
            { return symbol(DartOperators.SEMICOLON.value, yytext());
            }
            // fall through
          case 102: break;
          case 11:
            { return symbol(DartOperators.EQ.value, yytext());
            }
            // fall through
          case 103: break;
          case 12:
            { return symbol(DartOperators.OPENCODE.value, yytext());
            }
            // fall through
          case 104: break;
          case 13:
            { return symbol(DartOperators.CLOSECODE.value, yytext());
            }
            // fall through
          case 105: break;
          case 14:
            { string.append( yytext() );
            }
            // fall through
          case 106: break;
          case 15:
            { yybegin(YYINITIAL); 
                                   return symbol(DartOperators.STRINGLITERAL.value, 
                                   string.toString());
            }
            // fall through
          case 107: break;
          case 16:
            { string.append('\\');
            }
            // fall through
          case 108: break;
          case 17:
            { return symbol(DartOperators.AND.value, yytext());
            }
            // fall through
          case 109: break;
          case 18:
            { return symbol(DartOperators.POWPOW.value, yytext());
            }
            // fall through
          case 110: break;
          case 19:
            { return symbol(DartOperators.PLUSPLUS.value, yytext());
            }
            // fall through
          case 111: break;
          case 20:
            { return symbol(DartOperators.PLUSEQ.value, yytext());
            }
            // fall through
          case 112: break;
          case 21:
            { return symbol(DartOperators.MINUSMINUS.value, yytext());
            }
            // fall through
          case 113: break;
          case 22:
            { return symbol(DartOperators.MINUSEQ.value, yytext());
            }
            // fall through
          case 114: break;
          case 23:
            { return symbol(DartOperators.EQEQ.value, yytext());
            }
            // fall through
          case 115: break;
          case 24:
            { return symbol(DartBuiltInWords.AS.value, yytext());
            }
            // fall through
          case 116: break;
          case 25:
            { return symbol(DartReservedWords.DO.value, yytext());
            }
            // fall through
          case 117: break;
          case 26:
            { return symbol(DartReservedWords.IF.value, yytext());
            }
            // fall through
          case 118: break;
          case 27:
            { return symbol(DartReservedWords.IN.value, yytext());
            }
            // fall through
          case 119: break;
          case 28:
            { return symbol(DartReservedWords.IS.value, yytext());
            }
            // fall through
          case 120: break;
          case 29:
            { return symbol(DartReservedWords.ON.value, yytext());
            }
            // fall through
          case 121: break;
          case 30:
            { return symbol(DartOperators.OR.value, yytext());
            }
            // fall through
          case 122: break;
          case 31:
            { string.append('\"');
            }
            // fall through
          case 123: break;
          case 32:
            { string.append('\n');
            }
            // fall through
          case 124: break;
          case 33:
            { string.append('\r');
            }
            // fall through
          case 125: break;
          case 34:
            { string.append('\t');
            }
            // fall through
          case 126: break;
          case 35:
            { return symbol(DartReservedWords.FOR.value, yytext());
            }
            // fall through
          case 127: break;
          case 36:
            { return symbol(DartBuiltInWords.GET.value, yytext());
            }
            // fall through
          case 128: break;
          case 37:
            { return symbol(DartReservedWords.NEW.value, yytext());
            }
            // fall through
          case 129: break;
          case 38:
            { return symbol(DartBuiltInWords.SET.value, yytext());
            }
            // fall through
          case 130: break;
          case 39:
            { return symbol(DartReservedWords.TRY.value, yytext());
            }
            // fall through
          case 131: break;
          case 40:
            { return symbol(DartReservedWords.VAR.value, yytext());
            }
            // fall through
          case 132: break;
          case 41:
            { return symbol(DartReservedWords.CASE.value, yytext());
            }
            // fall through
          case 133: break;
          case 42:
            { return symbol(DartReservedWords.ELSE.value, yytext());
            }
            // fall through
          case 134: break;
          case 43:
            { return symbol(DartReservedWords.ENUM.value, yytext());
            }
            // fall through
          case 135: break;
          case 44:
            { return symbol(DartReservedWords.HIDE.value, yytext());
            }
            // fall through
          case 136: break;
          case 45:
            { return symbol(DartReservedWords.MAIN.value, yytext());
            }
            // fall through
          case 137: break;
          case 46:
            { return symbol(DartReservedWords.NULL.value, yytext());
            }
            // fall through
          case 138: break;
          case 47:
            { return symbol(DartBuiltInWords.PART.value, yytext());
            }
            // fall through
          case 139: break;
          case 48:
            { return symbol(DartReservedWords.SHOW.value, yytext());
            }
            // fall through
          case 140: break;
          case 49:
            { return symbol(DartReservedWords.SYNC.value, yytext());
            }
            // fall through
          case 141: break;
          case 50:
            { return symbol(DartReservedWords.THIS.value, yytext());
            }
            // fall through
          case 142: break;
          case 51:
            { return symbol(DartReservedWords.TRUE.value, yytext());
            }
            // fall through
          case 143: break;
          case 52:
            { return symbol(DartReservedWords.VOID.value, yytext());
            }
            // fall through
          case 144: break;
          case 53:
            { return symbol(DartReservedWords.WITH.value, yytext());
            }
            // fall through
          case 145: break;
          case 54:
            { return symbol(DartReservedWords.ASYNC.value, yytext());
            }
            // fall through
          case 146: break;
          case 55:
            { return symbol(DartReservedWords.AWAIT.value, yytext());
            }
            // fall through
          case 147: break;
          case 56:
            { return symbol(DartReservedWords.BREAK.value, yytext());
            }
            // fall through
          case 148: break;
          case 57:
            { return symbol(DartReservedWords.CATCH.value, yytext());
            }
            // fall through
          case 149: break;
          case 58:
            { return symbol(DartReservedWords.CLASS.value, yytext());
            }
            // fall through
          case 150: break;
          case 59:
            { return symbol(DartReservedWords.CONST.value, yytext());
            }
            // fall through
          case 151: break;
          case 60:
            { return symbol(DartReservedWords.FALSE.value, yytext());
            }
            // fall through
          case 152: break;
          case 61:
            { return symbol(DartReservedWords.FINAL.value, yytext());
            }
            // fall through
          case 153: break;
          case 62:
            { return symbol(DartBuiltInWords.MIXIN.value, yytext());
            }
            // fall through
          case 154: break;
          case 63:
            { return symbol(DartReservedWords.PRINT.value, yytext());
            }
            // fall through
          case 155: break;
          case 64:
            { return symbol(DartReservedWords.SUPER.value, yytext());
            }
            // fall through
          case 156: break;
          case 65:
            { return symbol(DartReservedWords.THROW.value, yytext());
            }
            // fall through
          case 157: break;
          case 66:
            { return symbol(DartReservedWords.WHILE.value, yytext());
            }
            // fall through
          case 158: break;
          case 67:
            { return symbol(DartReservedWords.YIELD.value, yytext());
            }
            // fall through
          case 159: break;
          case 68:
            { return symbol(DartReservedWords.ASSERT.value, yytext());
            }
            // fall through
          case 160: break;
          case 69:
            { return symbol(DartBuiltInWords.EXPORT.value, yytext());
            }
            // fall through
          case 161: break;
          case 70:
            { return symbol(DartBuiltInWords.IMPORT.value, yytext());
            }
            // fall through
          case 162: break;
          case 71:
            { return symbol(DartReservedWords.RETURN.value, yytext());
            }
            // fall through
          case 163: break;
          case 72:
            { return symbol(DartBuiltInWords.STATIC.value, yytext());
            }
            // fall through
          case 164: break;
          case 73:
            { return symbol(DartReservedWords.SWITCH.value, yytext());
            }
            // fall through
          case 165: break;
          case 74:
            { return symbol(DartReservedWords.DEFAULT.value, yytext());
            }
            // fall through
          case 166: break;
          case 75:
            { return symbol(DartBuiltInWords.DYNAMIC.value, yytext());
            }
            // fall through
          case 167: break;
          case 76:
            { return symbol(DartReservedWords.EXTENDS.value, yytext());
            }
            // fall through
          case 168: break;
          case 77:
            { return symbol(DartBuiltInWords.FACTORY.value, yytext());
            }
            // fall through
          case 169: break;
          case 78:
            { return symbol(DartReservedWords.FINALLY.value, yytext());
            }
            // fall through
          case 170: break;
          case 79:
            { return symbol(DartBuiltInWords.LIBRARY.value, yytext());
            }
            // fall through
          case 171: break;
          case 80:
            { return symbol(DartReservedWords.RETHROW.value, yytext());
            }
            // fall through
          case 172: break;
          case 81:
            { return symbol(DartBuiltInWords.TYPEDEF.value, yytext());
            }
            // fall through
          case 173: break;
          case 82:
            { return symbol(DartBuiltInWords.ABSTRACT.value, yytext());
            }
            // fall through
          case 174: break;
          case 83:
            { return symbol(DartReservedWords.CONTINUE.value, yytext());
            }
            // fall through
          case 175: break;
          case 84:
            { return symbol(DartBuiltInWords.DEFERRED.value, yytext());
            }
            // fall through
          case 176: break;
          case 85:
            { return symbol(DartBuiltInWords.EXTERNAL.value, yytext());
            }
            // fall through
          case 177: break;
          case 86:
            { return symbol(DartBuiltInWords.FUNCTION.value, yytext());
            }
            // fall through
          case 178: break;
          case 87:
            { return symbol(DartBuiltInWords.OPERATOR.value, yytext());
            }
            // fall through
          case 179: break;
          case 88:
            { return symbol(DartBuiltInWords.COVARIANT.value, yytext());
            }
            // fall through
          case 180: break;
          case 89:
            { return symbol(DartBuiltInWords.EXTENSION.value, yytext());
            }
            // fall through
          case 181: break;
          case 90:
            { return symbol(DartBuiltInWords.INTERFACE.value, yytext());
            }
            // fall through
          case 182: break;
          case 91:
            { return symbol(DartOperators.STRINGLITERAL.value, yytext());
            }
            // fall through
          case 183: break;
          case 92:
            { return symbol(DartBuiltInWords.IMPLEMENTS.value, yytext());
            }
            // fall through
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
