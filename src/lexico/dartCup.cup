package lexico;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntaxis_error(Symbol s){
        this.s=s;
        System.out.println("compiler has detected a syntax error at line " + s.left 
            + " column " + s.right);
    }
    
    public Symbol getS(){
        return s;
    }
:};


// terminal keys
terminal LINE, QUOTES, DATA_TYPE, STRING, IF, ELSE, DO,COMMENT,WHITESPACE,IDENTIFIER,DECINTEGERLITERAL,
    EQ, SUM, SUBSTRACTION, MULTIPLICATION, DIVISION, LOGICAL_OPERATOR, RELATIONAL_OPERATOR,
    ATRIBUTION_OPERATOR, INCREASE_OPERATOR, BOOLEAN_OPERATOR, OPENING_PARENT, CLOSING_PARENT,
    OPENING_KEY, CLOSING_KEY, OPENING_SQUARE_BRACKET, CLOSING_SQUARE_BRACKET,ERROR, 
    ABSTRACT, BREAK, CATCH, CLASS, FINAL, CONST, FINALLY, FOREACH, GOTO, INTERFACE, NAMESPACE, 
    OUT, THROW, TRY, VOID, SYSTEM, WRITELINE, CONSOLE, WRITE, CONTEXTUAL_OPERATOR, NEW, EVAL_ARITMETICA, LINEBREAK, 
    POW, PLUS, MINUS, OPENCODE, CLOSECODE, SEMICOLON, STRINGLITERAL, POWPOW, EQEQ, PLUSEQ, PLUSPLUS, MINUSEQ, MINUSMINUS, 
    AND, OR, AS, ON, IS, IN, SET, FOR, VAR, GET, SHOW, SYNC, ENUM, TRUE, THIS, CASE, HIDE, NULL, MAIN, WITH, PART, ASYNC, AWAIT, SUPER, FALSE, MIXIN, YIELD, WHILE, PRINT,
    ASSERT, STATIC, SWITCH, EXPORT, RETURN, IMPORT, EXTENDS, RETHROW, TYPEDEF, LIBRARY, DEFAULT, DYNAMIC, FACTORY, EXTERNAL, CONTINUE, OPERATOR,
    DEFERRED, FUNCTION, EXTENSION, COVARIANT, IMPLEMENTS, OP_ARITMETICA, CLASS_NAME, RESID, INT, BOOL, FLOAT, DOUBLE, LESS, GREATER, LESSEQ, GREATEREQ, 
    DIFF, NOT, OPENING_BRACKET, CLOSING_BRACKET, COMMA;

// non terminal keys
non terminal initialize, chain, statement, declaration, for_declaration, if, if_else,
    while, do_while, for, boolean_statement, for_statement, foreach, foreach_statement, switch, log_aritmetica, return_type, print_function;

// start
start with initialize;

initialize ::= 
    IDENTIFIER MAIN OPENING_PARENT CLOSING_PARENT OPENING_KEY statement CLOSING_KEY | 
    IDENTIFIER return_type  STRING OPENING_PARENT CLOSING_PARENT OPENING_KEY statement CLOSING_KEY | 
    VOID MAIN OPENING_PARENT CLOSING_PARENT OPENING_KEY statement CLOSING_KEY |
    VOID MAIN OPENING_PARENT CLOSING_PARENT OPENING_KEY CLOSING_KEY 
;

// statements
statement ::= 
    statement declaration |
    declaration |
    statement if | 
    if |
    statement if_else |
    if_else |
    statement while |
    switch |
    statement switch |
    while |
    statement do_while
    do_while |
    statement for |
    for |
    statement foreach |
    foreach |
    statement print_function|
    print_function
;


return_type ::=
    VOID |
    INT |
    STRING |
    BOOL |
    FLOAT;

log_aritmetica ::=
    OP_ARITMETICA AND OP_ARITMETICA |
    OP_ARITMETICA OR OP_ARITMETICA |
    OP_ARITMETICA AND log_aritmetica |
    OP_ARITMETICA OR log_aritmetica
;


chain ::=
    DECINTEGERLITERAL |
    DECINTEGERLITERAL COMMA chain
;

declaration ::=
    DATA_TYPE IDENTIFIER SEMICOLON | 
    DATA_TYPE IDENTIFIER EQ IDENTIFIER SEMICOLON|
    DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON |
    DATA_TYPE IDENTIFIER EQ STRINGLITERAL SEMICOLON |
    DATA_TYPE IDENTIFIER EQ TRUE SEMICOLON |
    DATA_TYPE IDENTIFIER EQ FALSE SEMICOLON |
    DATA_TYPE IDENTIFIER EQ NULL SEMICOLON |
    DATA_TYPE IDENTIFIER EQ STRING SEMICOLON |
    DATA_TYPE IDENTIFIER ATRIBUTION_OPERATOR DECINTEGERLITERAL SEMICOLON |
    DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL PLUS DECINTEGERLITERAL SEMICOLON |
    DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL POW DECINTEGERLITERAL SEMICOLON |
    DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL DIVISION DECINTEGERLITERAL SEMICOLON |
    DATA_TYPE IDENTIFIER INCREASE_OPERATOR SEMICOLON | 
    DATA_TYPE INCREASE_OPERATOR IDENTIFIER SEMICOLON |
    DATA_TYPE IDENTIFIER EQ OPENING_BRACKET CLOSING_BRACKET SEMICOLON|
    DATA_TYPE IDENTIFIER EQ OPENING_BRACKET chain CLOSING_BRACKET SEMICOLON|
    STRING IDENTIFIER EQ QUOTES STRING QUOTES SEMICOLON |
    STRING IDENTIFIER EQ QUOTES QUOTES SEMICOLON |
    STRING IDENTIFIER EQ QUOTES IDENTIFIER QUOTES SEMICOLON |
    BOOL IDENTIFIER EQ TRUE SEMICOLON |
    BOOL IDENTIFIER EQ FALSE SEMICOLON |
    FINAL IDENTIFIER EQ NEW DATA_TYPE SEMICOLON |
    FINAL DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON |
    FINAL DATA_TYPE IDENTIFIER EQ QUOTES QUOTES SEMICOLON | 
    CONST DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON |
    CONST DATA_TYPE IDENTIFIER EQ QUOTES QUOTES SEMICOLON
;

print_function ::= 
    PRINT OPENING_PARENT QUOTES  IDENTIFIER QUOTES CLOSING_PARENT SEMICOLON |
    PRINT OPENING_PARENT IDENTIFIER CLOSING_PARENT SEMICOLON |
    PRINT OPENING_PARENT STRINGLITERAL CLOSING_PARENT SEMICOLON |
    PRINT OPENING_PARENT DECINTEGERLITERAL CLOSING_PARENT SEMICOLON |
    PRINT OPENING_PARENT IDENTIFIER PLUS IDENTIFIER CLOSING_PARENT SEMICOLON |
    PRINT OPENING_PARENT IDENTIFIER PLUS DECINTEGERLITERAL CLOSING_PARENT SEMICOLON
;


class_declaration ::=
    CLASS IDENTIFIER OPENING_KEY statement CLOSING_KEY |
    CLASS IDENTIFIER OPENING_KEY declaration CLOSING_KEY |
    CLASS IDENTIFIER OPENING_KEY statement declaration CLOSING_KEY |
    CLASS IDENTIFIER OPENING_KEY declaration statement CLOSING_KEY
;

object_declaration ::=
    CLASS_NAME IDENTIFIER EQ NEW CLASS_NAME OPENING_PARENT CLOSING_PARENT |
    CLASS_NAME IDENTIFIER EQ NEW CLASS_NAME OPENING_PARENT declaration CLOSING_PARENT |
    CLASS_NAME IDENTIFIER EQ NEW CLASS_NAME OPENING_PARENT OPENING_KEY statement CLOSING_KEY CLOSING_PARENT |
    CLASS_NAME IDENTIFIER EQ NEW CLASS_NAME OPENING_PARENT OPENING_SQUARE_BRACKET CLOSING_SQUARE_BRACKET CLOSING_PARENT
    VAR IDENTIFIER EQ NEW CLASS_NAME OPENING_PARENT CLOSING_PARENT |
    VAR IDENTIFIER EQ NEW CLASS_NAME OPENING_PARENT declaration CLOSING_PARENT |
    VAR IDENTIFIER EQ NEW CLASS_NAME OPENING_PARENT OPENING_KEY statement CLOSING_KEY CLOSING_PARENT |
    VAR IDENTIFIER EQ NEW CLASS_NAME OPENING_PARENT OPENING_SQUARE_BRACKET CLOSING_SQUARE_BRACKET CLOSING_PARENT
;

if ::= IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY
;

boolean_statement ::= 
    BOOLEAN_OPERATOR | 
    IDENTIFIER RELATIONAL_OPERATOR BOOLEAN_OPERATOR |
    IDENTIFIER RELATIONAL_OPERATOR DECINTEGERLITERAL |
    IDENTIFIER RELATIONAL_OPERATOR IDENTIFIER |
    IDENTIFIER RELATIONAL_OPERATOR QUOTES QUOTES |
    IDENTIFIER RELATIONAL_OPERATOR QUOTES IDENTIFIER QUOTES
;

if_else ::= IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY ELSE OPENING_KEY statement CLOSING_KEY
;

switch ::= 
    SWITCH OPENING_PARENT statement CLOSING_PARENT OPENING_KEY CASE IDENTIFIER ATRIBUTION_OPERATOR statement BREAK SEMICOLON DEFAULT | 
    SWITCH OPENING_PARENT statement CLOSING_PARENT OPENING_KEY CASE IDENTIFIER ATRIBUTION_OPERATOR statement BREAK SEMICOLON DEFAULT ATRIBUTION_OPERATOR statement BREAK SEMICOLON
;

while ::= WHILE OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY
;

do_while ::= DO OPENING_KEY statement CLOSING_KEY WHILE OPENING_PARENT boolean_statement CLOSING_PARENT SEMICOLON
;

for ::= FOR for_statement OPENING_KEY statement CLOSING_KEY
;

for_statement ::=
    OPENING_PARENT DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON IDENTIFIER RELATIONAL_OPERATOR DECINTEGERLITERAL SEMICOLON IDENTIFIER PLUSPLUS CLOSING_PARENT
;

for_declaration ::= 
    IDENTIFIER ATRIBUTION_OPERATOR DECINTEGERLITERAL |
    IDENTIFIER INCREASE_OPERATOR | 
    INCREASE_OPERATOR IDENTIFIER
;

foreach ::=
 FOR OPENING_PARENT foreach_statement CLOSING_PARENT OPENING_KEY CLOSING_KEY SEMICOLON|
 FOR OPENING_PARENT foreach_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY SEMICOLON
;

foreach_statement ::=
    DATA_TYPE IDENTIFIER IN IDENTIFIER
;


