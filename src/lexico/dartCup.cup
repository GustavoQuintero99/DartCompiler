package lexico;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntaxis_error(Symbol s){
        this.s=s;
        System.out.println("compiler has detected a syntax error at line " + s.left 
            + " column " + s.right);
    }
    
    public Symbol getS(){
        return s;
    }
:};


// terminal keys
terminal LINE, QUOTES, DATA_TYPE, STRING, IF, ELSE, DO, WHILE, FOR,
    EQUALS, SUM, SUBSTRACTION, MULTIPLICATION, DIVISION, LOGICAL_OPERATOR, RELATIONAL_OPERATOR,
    ATRIBUTION_OPERATOR, INCREASE_OPERATOR, BOOLEAN_OPERATOR, OPENING_PARENT, CLOSING_PARENT,
    OPENING_KEY, CLOSING_KEY, OPENING_SQUARE_BRACKET, CLOSING_SQUARE_BRACKET, MAIN, SEMICOLON, IDENTIFIER, NUMBER, ERROR, 
    ABSTRACT, BREAK, CASE, CATCH, CLASS, FINAL, CONST, DEFAULT, FINALLY, FOREACH, GOTO, INTERFACE, NAMESPACE, 
    NULL, OUT, RETURN, STATIC, SWITCH, THROW, TRY, VOID, SYSTEM, WRITELINE, CONSOLE, WRITE, 
    CONTEXTUAL_OPERATOR, NEW, CLASS_NAME, VAR, OP_ARITMETICA, AND, OR;

// non terminal keys
non terminal inicio, statement, declaration, for_declaration, if, if_else,
    while, do_while, for, boolean_statement, for_statement, foreach, foreach_statement, switch, log_aritmetica;

// start
start with inicio;

inicio ::= 
    NAMESPACE IDENTIFIER OPENING_KEY CLASS IDENTIFIER OPENING_KEY CLOSING_KEY CLOSING_KEY |
    NAMESPACE IDENTIFIER OPENING_KEY CLASS IDENTIFIER OPENING_KEY STATIC VOID MAIN OPENING_PARENT STRING OPENING_SQUARE_BRACKET CLOSING_SQUARE_BRACKET IDENTIFIER CLOSING_PARENT OPENING_KEY statement CLOSING_KEY CLOSING_KEY CLOSING_KEY
;

// statements
statement ::= 
    statement declaration |
    declaration |
    statement if | 
    if |
    statement if_else |
    if_else |
    statement while |
    switch |
    statement switch |
    while |
    statement do_while
    do_while |
    statement for |
    for |
    statement foreach |
    foreach
;

// operaciones logico aritmeticas
log_aritmetica ::=
    OP_ARITMETICA AND OP_ARITMETICA |
    OP_ARITMETICA OR OP_ARITMETICA |
    OP_ARITMETICA AND log_aritmetica |
    OP_ARITMETICA OR log_aritmetica;

// declarations
declaration ::= 
    DATA_TYPE IDENTIFIER SEMICOLON | 
    DATA_TYPE IDENTIFIER ATRIBUTION_OPERATOR NUMBER SEMICOLON |
    DATA_TYPE IDENTIFIER EQUALS NUMBER SEMICOLON |
    DATA_TYPE IDENTIFIER INCREASE_OPERATOR SEMICOLON | 
    DATA_TYPE INCREASE_OPERATOR IDENTIFIER SEMICOLON | 
    STRING IDENTIFIER ATRIBUTION_OPERATOR QUOTES QUOTES SEMICOLON |
    STRING IDENTIFIER EQUALS QUOTES QUOTES SEMICOLON |
    STRING IDENTIFIER ATRIBUTION_OPERATOR QUOTES IDENTIFIER QUOTES SEMICOLON |
    STRING IDENTIFIER EQUALS QUOTES IDENTIFIER QUOTES SEMICOLON |
    FINAL IDENTIFIER EQUALS NEW DATA_TYPE SEMICOLON |
    FINAL DATA_TYPE IDENTIFIER EQUALS NUMBER SEMICOLON |
    FINAL DATA_TYPE IDENTIFIER EQUALS QUOTES QUOTES SEMICOLON | 
    CONST DATA_TYPE IDENTIFIER EQUALS NUMBER SEMICOLON |
    CONST DATA_TYPE IDENTIFIER EQUALS QUOTES QUOTES SEMICOLON
    ;

class_declaration ::=
    CLASS IDENTIFIER OPENING_KEY statement CLOSING_KEY |
    CLASS IDENTIFIER OPENING_KEY declaration CLOSING_KEY |
    CLASS IDENTIFIER OPENING_KEY statement declaration CLOSING_KEY |
    CLASS IDENTIFIER OPENING_KEY declaration statement CLOSING_KEY
    ;

object_declaration ::=
    CLASS_NAME IDENTIFIER EQUALS NEW CLASS_NAME OPENING_PARENT CLOSING_PARENT |
    CLASS_NAME IDENTIFIER EQUALS NEW CLASS_NAME OPENING_PARENT declaration CLOSING_PARENT |
    CLASS_NAME IDENTIFIER EQUALS NEW CLASS_NAME OPENING_PARENT OPENING_KEY statement CLOSING_KEY CLOSING_PARENT |
    CLASS_NAME IDENTIFIER EQUALS NEW CLASS_NAME OPENING_PARENT OPENING_SQUARE_BRACKET CLOSING_SQUARE_BRACKET CLOSING_PARENT
    VAR IDENTIFIER EQUALS NEW CLASS_NAME OPENING_PARENT CLOSING_PARENT |
    VAR IDENTIFIER EQUALS NEW CLASS_NAME OPENING_PARENT declaration CLOSING_PARENT |
    VAR IDENTIFIER EQUALS NEW CLASS_NAME OPENING_PARENT OPENING_KEY statement CLOSING_KEY CLOSING_PARENT |
    VAR IDENTIFIER EQUALS NEW CLASS_NAME OPENING_PARENT OPENING_SQUARE_BRACKET CLOSING_SQUARE_BRACKET CLOSING_PARENT
    ;

if ::= IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY
;
boolean_statement ::= 
    BOOLEAN_OPERATOR | 
    IDENTIFIER RELATIONAL_OPERATOR BOOLEAN_OPERATOR |
    IDENTIFIER RELATIONAL_OPERATOR NUMBER |
    IDENTIFIER RELATIONAL_OPERATOR IDENTIFIER |
    IDENTIFIER RELATIONAL_OPERATOR QUOTES QUOTES |
    IDENTIFIER RELATIONAL_OPERATOR QUOTES IDENTIFIER QUOTES
;
if_else ::= IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY ELSE OPENING_KEY statement CLOSING_KEY
;
switch ::= 
    SWITCH OPENING_PARENT statement CLOSING_PARENT OPENING_KEY CASE IDENTIFIER ATRIBUTION_OPERATOR statement BREAK SEMICOLON DEFAULT | 
    SWITCH OPENING_PARENT statement CLOSING_PARENT OPENING_KEY CASE IDENTIFIER ATRIBUTION_OPERATOR statement BREAK SEMICOLON DEFAULT ATRIBUTION_OPERATOR statement BREAK SEMICOLON
;
while ::= WHILE OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY
;
do_while ::= DO OPENING_KEY statement CLOSING_KEY WHILE OPENING_PARENT boolean_statement CLOSING_PARENT SEMICOLON
;
for ::= FOR OPENING_PARENT for_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY
;
for_statement ::=
    DATA_TYPE IDENTIFIER EQUALS NUMBER SEMICOLON boolean_statement SEMICOLON for_declaration |
    IDENTIFIER EQUALS NUMBER SEMICOLON boolean_statement SEMICOLON for_declaration
;
for_declaration ::= 
    IDENTIFIER ATRIBUTION_OPERATOR NUMBER |
    IDENTIFIER INCREASE_OPERATOR | 
    INCREASE_OPERATOR IDENTIFIER
;
foreach ::= FOREACH OPENING_PARENT foreach_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY
;
foreach_statement ::=
    DATA_TYPE IDENTIFIER ATRIBUTION_OPERATOR STRING
;