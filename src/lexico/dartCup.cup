package lexico;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    public String message= " ";
        public Symbol getS(){
        return this.s;
    }

    public void unrecovered_syntax_error(Symbol s){
        s.left+=1;
        s.right+=1;
        this.message = "Error sintáctico en la línea " + s.left + ", columna " + s.right + " se encontró: < " + s.value + " >, mientras se esperaba otro simbolo. ";
        System.out.println(message); 
        System.out.println(recovery_message());
    }

    public String recovery_message(){
        return this.message;
    }

    public void remove_message(){
        this.message = " ";
    }
    
:};


// terminal keys
terminal SEMI,TIMES, UMINUS, LPAREN, RPAREN, DOT,COLON,LINE, DATA_TYPE, STRING, IF, ELSE, DO,COMMENT,WHITESPACE,IDENTIFIER,DECINTEGERLITERAL,
    EQ, SUM, SUBSTRACTION, MULTIPLICATION, DIVISION, LOGICAL_OPERATOR, RELATIONAL_OPERATOR,
    INCREASE_OPERATOR, BOOLEAN_OPERATOR, OPENING_PARENT, CLOSING_PARENT,
    OPENING_KEY, CLOSING_KEY, OPENING_SQUARE_BRACKET, CLOSING_SQUARE_BRACKET,ERROR, 
    ABSTRACT, BREAK, CATCH, CLASS, FINAL, CONST, FINALLY, FOREACH, GOTO, INTERFACE, NAMESPACE, 
    OUT, THROW, TRY, VOID, SYSTEM, WRITELINE, CONSOLE, WRITE, CONTEXTUAL_OPERATOR, NEW, EVAL_ARITMETICA, LINEBREAK, 
    POW, PLUS, MINUS, OPENCODE, CLOSECODE, SEMICOLON, STRINGLITERAL, POWPOW, EQEQ, PLUSEQ, PLUSPLUS, MINUSEQ, MINUSMINUS, 
    AND, OR, AS, ON, IS, IN, SET, FOR, VAR, GET, SHOW, SYNC, ENUM, TRUE, THIS, CASE, HIDE, NULL, MAIN, WITH, PART, ASYNC, AWAIT, SUPER, FALSE, MIXIN, YIELD, WHILE, PRINT,
    ASSERT, STATIC, SWITCH, EXPORT, RETURN, IMPORT, EXTENDS, RETHROW, TYPEDEF, LIBRARY, DEFAULT, DYNAMIC, FACTORY, EXTERNAL, CONTINUE, OPERATOR,
    DEFERRED, FUNCTION, EXTENSION, COVARIANT, IMPLEMENTS, OP_ARITMETICA, CLASS_NAME, RESID, INT, BOOL, FLOAT, DOUBLE, LESS, GREATER, LESSEQ, GREATEREQ, 
    DIFF, NOT, OPENING_BRACKET, CLOSING_BRACKET, COMMA, ELSE_IF;

terminal Integer NUMBER; // integer numbers

// non terminal keys
non terminal initialize, expr_list, icrements_decrements, assignation, type_case, case, switch_statement, chain, statement, declaration, for_declaration, if, if_else, else_if, else,chain_string, print_,string_Literal,
    while, do_while, for, boolean_statement, for_statement, foreach, foreach_statement, switch, log_aritmetica, return_type, print_function, operations, operations_basics,
    operations_parentesis, operations_parentesis_statement ;

non terminal Integer expr;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;

// start
start with initialize;

initialize ::= 
    IDENTIFIER MAIN OPENING_PARENT CLOSING_PARENT OPENING_KEY statement CLOSING_KEY | 
    IDENTIFIER return_type  STRING OPENING_PARENT CLOSING_PARENT OPENING_KEY statement CLOSING_KEY | 
    VOID MAIN OPENING_PARENT CLOSING_PARENT OPENING_KEY statement CLOSING_KEY |
    VOID MAIN OPENING_PARENT CLOSING_PARENT OPENING_KEY CLOSING_KEY 
;

// statements
statement ::= 
    statement declaration |
    declaration |
    statement do_while|
    do_while |
    statement assignation |
    assignation|
    statement if | 
    if |
    statement if_else |
    if_else |
    statement while |
    switch |
    statement switch |
    while |
    statement for |
    for |
    statement foreach |
    foreach |
    statement print_function|
    print_function|
    statement operations|
    operations

;

operations ::=
    DECINTEGERLITERAL operations_basics operations|
    IDENTIFIER operations_basics operations|
    operations_parentesis operations_basics operations|
    DECINTEGERLITERAL SEMICOLON|
    IDENTIFIER SEMICOLON|
    operations_parentesis SEMICOLON
;

operations_parentesis ::=
    OPENING_PARENT operations_parentesis_statement CLOSING_PARENT
    ;

operations_parentesis_statement ::=
    DECINTEGERLITERAL operations_basics operations_parentesis_statement|
    IDENTIFIER operations_basics operations_parentesis_statement|
    DECINTEGERLITERAL|
    IDENTIFIER|
    operations_parentesis
    ;

operations_basics ::=
    PLUS|
    MINUS|
    MULTIPLICATION|
    DIVISION
    ;

return_type ::=
    VOID |
    INT |
    STRING |
    BOOL |
    FLOAT;

log_aritmetica ::=
    OP_ARITMETICA AND OP_ARITMETICA |
    OP_ARITMETICA OR OP_ARITMETICA |
    OP_ARITMETICA AND log_aritmetica |
    OP_ARITMETICA OR log_aritmetica
;

chain ::=
    DECINTEGERLITERAL |
    DECINTEGERLITERAL COMMA chain
;

chain_string ::=
    STRINGLITERAL |
    STRINGLITERAL COMMA chain_string
;

declaration ::=
    DATA_TYPE IDENTIFIER SEMICOLON | 
    DATA_TYPE IDENTIFIER EQ IDENTIFIER SEMICOLON|
    DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON |
    DATA_TYPE IDENTIFIER EQ STRINGLITERAL SEMICOLON |
    DATA_TYPE IDENTIFIER EQ TRUE SEMICOLON |
    DATA_TYPE IDENTIFIER EQ FALSE SEMICOLON |
    DATA_TYPE IDENTIFIER EQ NULL SEMICOLON |
    DATA_TYPE IDENTIFIER DECINTEGERLITERAL SEMICOLON |
    DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL PLUS DECINTEGERLITERAL SEMICOLON |
    DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL POW DECINTEGERLITERAL SEMICOLON |
    DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL DIVISION DECINTEGERLITERAL SEMICOLON |
    DATA_TYPE PLUSPLUS IDENTIFIER SEMICOLON |
    DATA_TYPE IDENTIFIER EQ OPENING_BRACKET CLOSING_BRACKET SEMICOLON|
    DATA_TYPE IDENTIFIER EQ OPENING_BRACKET chain CLOSING_BRACKET SEMICOLON|
    DATA_TYPE IDENTIFIER EQ OPENING_BRACKET chain_string CLOSING_BRACKET SEMICOLON|
    DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL DOT DECINTEGERLITERAL SEMICOLON|
    STRING IDENTIFIER EQ STRINGLITERAL SEMICOLON |
    STRING IDENTIFIER EQ IDENTIFIER SEMICOLON |
    STRING IDENTIFIER SEMICOLON |
    BOOL IDENTIFIER EQ BOOLEAN_OPERATOR SEMICOLON |
    FINAL IDENTIFIER EQ NEW DATA_TYPE SEMICOLON |
    FINAL DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON |
    FINAL DATA_TYPE IDENTIFIER EQ SEMICOLON | 
    CONST DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON |
    CONST DATA_TYPE IDENTIFIER EQ SEMICOLON
;

assignation ::=
    IDENTIFIER EQ IDENTIFIER SEMICOLON |
    IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON |
    IDENTIFIER EQ STRINGLITERAL SEMICOLON |
    IDENTIFIER EQ TRUE SEMICOLON |
    IDENTIFIER EQ FALSE SEMICOLON |
    IDENTIFIER EQ NULL SEMICOLON |
    icrements_decrements SEMICOLON
    ;

icrements_decrements ::=
    PLUSPLUS IDENTIFIER |
    MINUSMINUS IDENTIFIER |
    IDENTIFIER PLUSPLUS |
    IDENTIFIER MINUSMINUS
    ;

string_Literal ::=
    STRINGLITERAL |
    IDENTIFIER |
    IDENTIFIER string_Literal
    ;

print_ ::=
    string_Literal|
    string_Literal PLUS print_|
    string_Literal PLUS
    ;

print_function ::= 
    PRINT OPENING_PARENT print_ CLOSING_PARENT SEMICOLON
    ;

class_declaration ::=
    CLASS IDENTIFIER OPENING_KEY statement CLOSING_KEY |
    CLASS IDENTIFIER OPENING_KEY declaration CLOSING_KEY |
    CLASS IDENTIFIER OPENING_KEY statement declaration CLOSING_KEY |
    CLASS IDENTIFIER OPENING_KEY declaration statement CLOSING_KEY
;

object_declaration ::=
    CLASS_NAME IDENTIFIER EQ NEW CLASS_NAME OPENING_PARENT CLOSING_PARENT |
    CLASS_NAME IDENTIFIER EQ NEW CLASS_NAME OPENING_PARENT declaration CLOSING_PARENT |
    CLASS_NAME IDENTIFIER EQ NEW CLASS_NAME OPENING_PARENT OPENING_KEY statement CLOSING_KEY CLOSING_PARENT |
    CLASS_NAME IDENTIFIER EQ NEW CLASS_NAME OPENING_PARENT OPENING_SQUARE_BRACKET CLOSING_SQUARE_BRACKET CLOSING_PARENT
    VAR IDENTIFIER EQ NEW CLASS_NAME OPENING_PARENT CLOSING_PARENT |
    VAR IDENTIFIER EQ NEW CLASS_NAME OPENING_PARENT declaration CLOSING_PARENT |
    VAR IDENTIFIER EQ NEW CLASS_NAME OPENING_PARENT OPENING_KEY statement CLOSING_KEY CLOSING_PARENT |
    VAR IDENTIFIER EQ NEW CLASS_NAME OPENING_PARENT OPENING_SQUARE_BRACKET CLOSING_SQUARE_BRACKET CLOSING_PARENT
;

if ::=
    IF OPENING_PARENT boolean_statement CLOSING_PARENT  statement COMMA|
    IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY|
    IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY CLOSING_KEY|
    IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY else
;

else ::=
    ELSE OPENING_KEY statement CLOSING_KEY |
    ELSE OPENING_KEY CLOSING_KEY
    ;

else_if ::=
    ELSE_IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY else_if|
    ELSE_IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY|
    ELSE_IF OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY else
    ;


boolean_statement ::= 
    BOOLEAN_OPERATOR |
    RELATIONAL_OPERATOR BOOLEAN_OPERATOR|
    BOOLEAN_OPERATOR RELATIONAL_OPERATOR BOOLEAN_OPERATOR | 
    IDENTIFIER RELATIONAL_OPERATOR BOOLEAN_OPERATOR |
    IDENTIFIER RELATIONAL_OPERATOR DECINTEGERLITERAL |
    IDENTIFIER RELATIONAL_OPERATOR IDENTIFIER |
    IDENTIFIER RELATIONAL_OPERATOR STRINGLITERAL|
    DECINTEGERLITERAL RELATIONAL_OPERATOR DECINTEGERLITERAL |
    STRINGLITERAL RELATIONAL_OPERATOR STRINGLITERAL
    ;

while ::= WHILE OPENING_PARENT boolean_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY
;

do_while ::= DO OPENING_KEY statement CLOSING_KEY WHILE OPENING_PARENT boolean_statement CLOSING_PARENT SEMICOLON
;

for ::= FOR for_statement OPENING_KEY statement CLOSING_KEY
;

for_statement ::=
    OPENING_PARENT DATA_TYPE IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON IDENTIFIER RELATIONAL_OPERATOR DECINTEGERLITERAL SEMICOLON for_declaration CLOSING_PARENT|
    OPENING_PARENT IDENTIFIER EQ DECINTEGERLITERAL SEMICOLON IDENTIFIER RELATIONAL_OPERATOR DECINTEGERLITERAL SEMICOLON for_declaration CLOSING_PARENT|
    OPENING_PARENT IDENTIFIER SEMICOLON IDENTIFIER RELATIONAL_OPERATOR DECINTEGERLITERAL SEMICOLON for_declaration CLOSING_PARENT|
    OPENING_PARENT IDENTIFIER SEMICOLON IDENTIFIER RELATIONAL_OPERATOR DECINTEGERLITERAL SEMICOLON CLOSING_PARENT

;

for_declaration ::= 
    IDENTIFIER EQ DECINTEGERLITERAL |
    icrements_decrements
;

foreach ::=
 FOR OPENING_PARENT foreach_statement CLOSING_PARENT OPENING_KEY statement CLOSING_KEY|
 FOR OPENING_PARENT foreach_statement CLOSING_PARENT OPENING_KEY CLOSING_KEY
;

foreach_statement ::=
    DATA_TYPE IDENTIFIER IN IDENTIFIER
;

switch ::= 
    SWITCH OPENING_PARENT switch_statement CLOSING_PARENT OPENING_KEY case CLOSING_KEY 
;

switch_statement ::=
    IDENTIFIER|
    DECINTEGERLITERAL|
    STRINGLITERAL
;

case ::=
    CASE type_case COLON statement|
    CASE type_case COLON statement BREAK SEMICOLON case |
    DEFAULT COLON statement BREAK SEMICOLON
;

type_case ::=
    IDENTIFIER |
    DECINTEGERLITERAL |
    STRINGLITERAL|
    TRUE|
    FALSE
;

expr_list ::=
    expr_list expr:e SEMI         {: System.out.println(e);:}|
    expr:e SEMI                   {: System.out.println(e);:}
;

expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;       :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;       :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;       :}
             | MINUS expr:e                 {: RESULT = -e;          :}
  	     %prec UMINUS
       | LPAREN expr:e RPAREN	         {: RESULT = e;           :}
       | NUMBER:n	                     {: RESULT = n;           :}
             ;


