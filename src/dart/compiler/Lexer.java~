// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: JFlexDart.jflex

/* JFlex example: partial Java language lexer specification */
import java_cup.runtime.*;

/**
 * Dart Lexer
 */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\46\0\1\1\3\0\1\2\1\3\1\0\1\4\17\0"+
    "\1\5\43\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\0\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\0\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\2\0\1\35\u0183\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\25\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\0\1\12\6\0\1\13\12\0"+
    "\1\14\1\0\1\15\1\16\4\0\1\17\21\0\1\20"+
    "\23\0\1\21\1\0\1\22\5\0\1\23\4\0\1\24"+
    "\10\0\1\25\1\0\1\26\11\0\1\27\10\0\1\30"+
    "\1\31\6\0\1\32\5\0\1\33\1\0\1\34\2\0"+
    "\1\35\3\0\1\36\1\37\1\0\1\40\1\0\1\41"+
    "\1\0\1\42\3\0\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\11\0\1\51\1\52\5\0\1\53\4\0\1\54"+
    "\1\0\1\55\1\0\1\56\1\57\1\0\1\60\5\0"+
    "\1\61\7\0\1\62\4\0\1\63\1\64\1\65\4\0"+
    "\1\66\1\0\1\67\1\70\2\0\1\71\1\72\3\0"+
    "\1\73\1\0\1\74\1\75\1\76\1\77\1\0\1\100"+
    "\1\0\1\101\1\102\2\0\1\103\1\104\1\105\1\0"+
    "\1\106\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\264\0\322"+
    "\0\360\0\u010e\0\u012c\0\u014a\0\u0168\0\u0186\0\u01a4\0\u01c2"+
    "\0\u01e0\0\u01fe\0\u021c\0\u023a\0\u0258\0\u0276\0\u0294\0\u02b2"+
    "\0\u02d0\0\u02ee\0\u030c\0\u032a\0\u0348\0\u0348\0\u0348\0\u0348"+
    "\0\u0348\0\u0366\0\u0384\0\u03a2\0\u03c0\0\u03de\0\u03fc\0\u041a"+
    "\0\u0438\0\u0348\0\u0456\0\u0474\0\u0492\0\u04b0\0\u04ce\0\u04ec"+
    "\0\u050a\0\u0528\0\u0546\0\u0564\0\u0348\0\u0582\0\u05a0\0\u0348"+
    "\0\u05be\0\u05dc\0\u05fa\0\u0618\0\u0348\0\u0636\0\u0654\0\u0672"+
    "\0\u0690\0\u06ae\0\u06cc\0\u06ea\0\u0708\0\u0726\0\u0744\0\u0762"+
    "\0\u0780\0\u079e\0\u07bc\0\u07da\0\u07f8\0\u0816\0\u0348\0\u0834"+
    "\0\u0852\0\u0870\0\u088e\0\u08ac\0\u08ca\0\u08e8\0\u0906\0\u0924"+
    "\0\u0942\0\u0960\0\u097e\0\u099c\0\u09ba\0\u09d8\0\u09f6\0\u0a14"+
    "\0\u0a32\0\u0a50\0\u0348\0\u0a6e\0\u0348\0\u0a8c\0\u0aaa\0\u0ac8"+
    "\0\u0ae6\0\u0b04\0\u0348\0\u0b22\0\u0b40\0\u0b5e\0\u0b7c\0\u0348"+
    "\0\u0b9a\0\u0bb8\0\u0bd6\0\u0bf4\0\u0c12\0\u0c30\0\u0c4e\0\u0c6c"+
    "\0\u0348\0\u0c8a\0\u0348\0\u0ca8\0\u0cc6\0\u0ce4\0\u0d02\0\u0d20"+
    "\0\u0d3e\0\u0d5c\0\u0d7a\0\u0d98\0\u0348\0\u0db6\0\u0dd4\0\u0df2"+
    "\0\u0e10\0\u0e2e\0\u0e4c\0\u0e6a\0\u0e88\0\u0348\0\u0348\0\u0ea6"+
    "\0\u0ec4\0\u0ee2\0\u0f00\0\u0f1e\0\u0f3c\0\u0348\0\u0f5a\0\u0f78"+
    "\0\u0f96\0\u0fb4\0\u0fd2\0\u0348\0\u0ff0\0\u0348\0\u100e\0\u102c"+
    "\0\u0348\0\u104a\0\u1068\0\u1086\0\u0348\0\u0348\0\u10a4\0\u0348"+
    "\0\u10c2\0\u0348\0\u10e0\0\u0348\0\u10fe\0\u111c\0\u113a\0\u0348"+
    "\0\u0348\0\u0348\0\u0348\0\u0348\0\u0348\0\u1158\0\u1176\0\u1194"+
    "\0\u11b2\0\u11d0\0\u11ee\0\u120c\0\u122a\0\u1248\0\u0348\0\u1266"+
    "\0\u1284\0\u12a2\0\u12c0\0\u12de\0\u12fc\0\u0348\0\u131a\0\u1338"+
    "\0\u1356\0\u1374\0\u0348\0\u1392\0\u0348\0\u13b0\0\u0348\0\u0348"+
    "\0\u13ce\0\u0348\0\u13ec\0\u140a\0\u1428\0\u1446\0\u1464\0\u0348"+
    "\0\u1482\0\u14a0\0\u14be\0\u14dc\0\u14fa\0\u1518\0\u1536\0\u0348"+
    "\0\u1554\0\u1572\0\u1590\0\u15ae\0\u0348\0\u0348\0\u0348\0\u15cc"+
    "\0\u15ea\0\u1608\0\u1626\0\u0348\0\u1644\0\u0348\0\u0348\0\u1662"+
    "\0\u1680\0\u0348\0\u0348\0\u169e\0\u16bc\0\u16da\0\u0348\0\u16f8"+
    "\0\u0348\0\u0348\0\u0348\0\u0348\0\u1716\0\u0348\0\u1734\0\u0348"+
    "\0\u0348\0\u1752\0\u1770\0\u0348\0\u0348\0\u0348\0\u178e\0\u0348"+
    "\0\u0348";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\0"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\0\1\31\1\32\1\0\1\33\1\34\1\0\1\3"+
    "\1\4\1\5\1\6\1\7\27\0\1\34\1\0\1\35"+
    "\36\0\1\36\36\0\1\37\36\0\1\40\36\0\1\41"+
    "\37\0\1\42\16\0\1\43\3\0\1\44\30\0\1\45"+
    "\16\0\1\46\11\0\1\47\2\0\1\50\24\0\1\51"+
    "\10\0\1\52\10\0\1\53\21\0\1\54\1\0\1\55"+
    "\10\0\1\56\10\0\1\57\7\0\1\60\4\0\1\61"+
    "\4\0\1\62\17\0\1\63\41\0\1\64\32\0\1\65"+
    "\5\0\1\66\1\67\3\0\1\70\25\0\1\71\35\0"+
    "\1\72\31\0\1\73\15\0\1\74\27\0\1\75\1\0"+
    "\1\76\17\0\1\77\41\0\1\100\35\0\1\101\2\0"+
    "\1\102\11\0\1\103\1\104\1\0\1\105\1\0\1\106"+
    "\16\0\1\107\7\0\1\110\6\0\1\111\7\0\1\112"+
    "\14\0\1\113\27\0\1\114\1\115\35\0\1\116\54\0"+
    "\1\117\64\0\1\120\35\0\1\121\5\0\1\122\7\0"+
    "\1\123\41\0\1\124\51\0\1\125\1\126\14\0\1\127"+
    "\51\0\1\130\6\0\1\131\17\0\1\132\44\0\1\133"+
    "\41\0\1\134\37\0\1\135\31\0\1\136\2\0\1\137"+
    "\16\0\1\140\7\0\1\141\37\0\1\142\40\0\1\143"+
    "\32\0\1\144\42\0\1\145\17\0\1\146\50\0\1\147"+
    "\40\0\1\150\15\0\1\151\61\0\1\152\34\0\1\153"+
    "\23\0\1\154\27\0\1\155\50\0\1\156\37\0\1\157"+
    "\35\0\1\160\31\0\1\161\20\0\1\162\53\0\1\163"+
    "\27\0\1\164\41\0\1\165\31\0\1\166\6\0\1\167"+
    "\40\0\1\170\3\0\1\171\25\0\1\172\36\0\1\173"+
    "\26\0\1\174\35\0\1\175\46\0\1\176\20\0\1\177"+
    "\52\0\1\200\20\0\1\201\45\0\1\202\31\0\1\203"+
    "\25\0\1\204\41\0\1\205\33\0\1\206\53\0\1\207"+
    "\35\0\1\210\1\211\14\0\1\212\35\0\1\213\3\0"+
    "\1\214\31\0\1\215\41\0\1\216\44\0\1\217\37\0"+
    "\1\220\24\0\1\221\52\0\1\222\34\0\1\223\15\0"+
    "\1\224\37\0\1\225\37\0\1\226\43\0\1\227\2\0"+
    "\1\230\24\0\1\231\50\0\1\232\26\0\1\233\37\0"+
    "\1\234\42\0\1\235\37\0\1\236\23\0\1\237\12\0"+
    "\1\240\37\0\1\241\32\0\1\242\20\0\1\243\52\0"+
    "\1\244\16\0\1\245\53\0\1\246\32\0\1\247\24\0"+
    "\1\250\35\0\1\251\34\0\1\252\44\0\1\253\32\0"+
    "\1\254\40\0\1\255\42\0\1\256\35\0\1\257\20\0"+
    "\1\260\54\0\1\261\25\0\1\262\33\0\1\263\46\0"+
    "\1\264\36\0\1\265\24\0\1\266\44\0\1\267\40\0"+
    "\1\270\32\0\1\271\31\0\1\272\41\0\1\273\32\0"+
    "\1\274\2\0\1\275\33\0\1\276\24\0\1\277\43\0"+
    "\1\300\44\0\1\301\20\0\1\302\50\0\1\303\35\0"+
    "\1\304\16\0\1\305\51\0\1\306\21\0\1\307\54\0"+
    "\1\310\35\0\1\311\26\0\1\312\44\0\1\313\20\0"+
    "\1\314\57\0\1\315\14\0\1\316\36\0\1\317\34\0"+
    "\1\320\32\0\1\321\56\0\1\322\30\0\1\323\31\0"+
    "\1\324\37\0\1\325\42\0\1\326\26\0\1\327\46\0"+
    "\1\330\17\0\1\331\14\0\1\332\31\0\1\333\40\0"+
    "\1\334\30\0\1\335\33\0\1\336\40\0\1\337\43\0"+
    "\1\340\21\0\1\341\47\0\1\342\37\0\1\343\31\0"+
    "\1\344\34\0\1\345\23\0\1\346\42\0\1\347\32\0"+
    "\1\350\33\0\1\351\55\0\1\352\13\0\1\353\56\0"+
    "\1\354\20\0\1\355\33\0\1\356\53\0\1\357\25\0"+
    "\1\360\25\0\1\361\63\0\1\362\35\0\1\363\24\0"+
    "\1\364\24\0\1\365\31\0\1\366\63\0\1\367\24\0"+
    "\1\370\44\0\1\371\16\0\1\372\51\0\1\373\20\0"+
    "\1\374\45\0\1\375\24\0\1\376\47\0\1\377\32\0"+
    "\1\u0100\37\0\1\u0101\35\0\1\u0102\23\0\1\u0103\52\0"+
    "\1\u0104\37\0\1\u0105\30\0\1\u0106\42\0\1\u0107\20\0"+
    "\1\u0108\51\0\1\u0109\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6060];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\4\1\25\0\5\11\1\0\1\1\6\0\1\11"+
    "\12\0\1\11\1\0\1\1\1\11\4\0\1\11\21\0"+
    "\1\11\23\0\1\11\1\0\1\11\5\0\1\11\4\0"+
    "\1\11\10\0\1\11\1\0\1\11\11\0\1\11\10\0"+
    "\2\11\6\0\1\11\5\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\3\0\6\11\11\0\1\11\1\1\5\0\1\11"+
    "\4\0\1\11\1\0\1\11\1\0\2\11\1\0\1\11"+
    "\5\0\1\11\7\0\1\11\4\0\3\11\4\0\1\11"+
    "\1\0\2\11\2\0\2\11\3\0\1\11\1\0\4\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(DartOperators.POW);
            }
            // fall through
          case 72: break;
          case 2:
            { return symbol(DartOperators.PLUS);
            }
            // fall through
          case 73: break;
          case 3:
            { return symbol(DartOperators.MINUS);
            }
            // fall through
          case 74: break;
          case 4:
            { return symbol(DartOperators.EQ);
            }
            // fall through
          case 75: break;
          case 5:
            { return symbol(DartOperators.AND);
            }
            // fall through
          case 76: break;
          case 6:
            { return symbol(DartOperators.POWPOW);
            }
            // fall through
          case 77: break;
          case 7:
            { return symbol(DartOperators.PLUSPLUS);
            }
            // fall through
          case 78: break;
          case 8:
            { return symbol(DartOperators.MINUSMINUS);
            }
            // fall through
          case 79: break;
          case 9:
            { return symbol(DartOperators.EQEQ);
            }
            // fall through
          case 80: break;
          case 10:
            { return symbol(DartBuiltInWords.AS);
            }
            // fall through
          case 81: break;
          case 11:
            { return symbol(DartReservedWords.DO);
            }
            // fall through
          case 82: break;
          case 12:
            { return symbol(DartReservedWords.IF);
            }
            // fall through
          case 83: break;
          case 13:
            { return symbol(DartReservedWords.IN);
            }
            // fall through
          case 84: break;
          case 14:
            { return symbol(DartReservedWords.IS);
            }
            // fall through
          case 85: break;
          case 15:
            { return symbol(DartReservedWords.ON);
            }
            // fall through
          case 86: break;
          case 16:
            { return symbol(DartOperators.OR);
            }
            // fall through
          case 87: break;
          case 17:
            { return symbol(DartReservedWords.FOR);
            }
            // fall through
          case 88: break;
          case 18:
            { return symbol(DartBuiltInWords.GET);
            }
            // fall through
          case 89: break;
          case 19:
            { return symbol(DartReservedWords.NEW);
            }
            // fall through
          case 90: break;
          case 20:
            { return symbol(DartBuiltInWords.SET);
            }
            // fall through
          case 91: break;
          case 21:
            { return symbol(DartReservedWords.TRY);
            }
            // fall through
          case 92: break;
          case 22:
            { return symbol(DartReservedWords.VAR);
            }
            // fall through
          case 93: break;
          case 23:
            { return symbol(DartReservedWords.CASE);
            }
            // fall through
          case 94: break;
          case 24:
            { return symbol(DartReservedWords.ELSE);
            }
            // fall through
          case 95: break;
          case 25:
            { return symbol(DartReservedWords.ENUM);
            }
            // fall through
          case 96: break;
          case 26:
            { return symbol(DartReservedWords.HIDE);
            }
            // fall through
          case 97: break;
          case 27:
            { return symbol(DartReservedWords.NULL);
            }
            // fall through
          case 98: break;
          case 28:
            { return symbol(DartBuiltInWords.PART);
            }
            // fall through
          case 99: break;
          case 29:
            { return symbol(DartReservedWords.SHOW);
            }
            // fall through
          case 100: break;
          case 30:
            { return symbol(DartReservedWords.SYNC);
            }
            // fall through
          case 101: break;
          case 31:
            { return symbol(DartReservedWords.THIS);
            }
            // fall through
          case 102: break;
          case 32:
            { return symbol(DartReservedWords.TRUE);
            }
            // fall through
          case 103: break;
          case 33:
            { return symbol(DartReservedWords.VOID);
            }
            // fall through
          case 104: break;
          case 34:
            { return symbol(DartReservedWords.WITH);
            }
            // fall through
          case 105: break;
          case 35:
            { return symbol(DartReservedWords.ASYNC);
            }
            // fall through
          case 106: break;
          case 36:
            { return symbol(DartReservedWords.AWAIT);
            }
            // fall through
          case 107: break;
          case 37:
            { return symbol(DartReservedWords.BREAK);
            }
            // fall through
          case 108: break;
          case 38:
            { return symbol(DartReservedWords.CATCH);
            }
            // fall through
          case 109: break;
          case 39:
            { return symbol(DartReservedWords.CLASS);
            }
            // fall through
          case 110: break;
          case 40:
            { return symbol(DartReservedWords.CONST);
            }
            // fall through
          case 111: break;
          case 41:
            { return symbol(DartReservedWords.FALSE);
            }
            // fall through
          case 112: break;
          case 42:
            { return symbol(DartReservedWords.FINAL);
            }
            // fall through
          case 113: break;
          case 43:
            { return symbol(DartBuiltInWords.MIXIN);
            }
            // fall through
          case 114: break;
          case 44:
            { return symbol(DartReservedWords.SUPER);
            }
            // fall through
          case 115: break;
          case 45:
            { return symbol(DartReservedWords.THROW);
            }
            // fall through
          case 116: break;
          case 46:
            { return symbol(DartReservedWords.WHILE);
            }
            // fall through
          case 117: break;
          case 47:
            { return symbol(DartReservedWords.YIELD);
            }
            // fall through
          case 118: break;
          case 48:
            { return symbol(DartReservedWords.ASSERT);
            }
            // fall through
          case 119: break;
          case 49:
            { return symbol(DartBuiltInWords.EXPORT);
            }
            // fall through
          case 120: break;
          case 50:
            { return symbol(DartBuiltInWords.IMPORT);
            }
            // fall through
          case 121: break;
          case 51:
            { return symbol(DartReservedWords.RETURN);
            }
            // fall through
          case 122: break;
          case 52:
            { return symbol(DartBuiltInWords.STATIC);
            }
            // fall through
          case 123: break;
          case 53:
            { return symbol(DartReservedWords.SWITCH);
            }
            // fall through
          case 124: break;
          case 54:
            { return symbol(DartReservedWords.DEFAULT);
            }
            // fall through
          case 125: break;
          case 55:
            { return symbol(DartBuiltInWords.DYNAMIC);
            }
            // fall through
          case 126: break;
          case 56:
            { return symbol(DartReservedWords.EXTENDS);
            }
            // fall through
          case 127: break;
          case 57:
            { return symbol(DartBuiltInWords.FACTORY);
            }
            // fall through
          case 128: break;
          case 58:
            { return symbol(DartReservedWords.FINALLY);
            }
            // fall through
          case 129: break;
          case 59:
            { return symbol(DartBuiltInWords.LIBRARY);
            }
            // fall through
          case 130: break;
          case 60:
            { return symbol(DartReservedWords.RETHROW);
            }
            // fall through
          case 131: break;
          case 61:
            { return symbol(DartBuiltInWords.TYPEDEF);
            }
            // fall through
          case 132: break;
          case 62:
            { return symbol(DartBuiltInWords.ABSTRACT);
            }
            // fall through
          case 133: break;
          case 63:
            { return symbol(DartReservedWords.CONTINUE);
            }
            // fall through
          case 134: break;
          case 64:
            { return symbol(DartBuiltInWords.DEFERRED);
            }
            // fall through
          case 135: break;
          case 65:
            { return symbol(DartBuiltInWords.EXTERNAL);
            }
            // fall through
          case 136: break;
          case 66:
            { return symbol(DartBuiltInWords.FUNCTION);
            }
            // fall through
          case 137: break;
          case 67:
            { return symbol(DartBuiltInWords.OPERATOR);
            }
            // fall through
          case 138: break;
          case 68:
            { return symbol(DartBuiltInWords.COVARIANT);
            }
            // fall through
          case 139: break;
          case 69:
            { return symbol(DartBuiltInWords.EXTENSION);
            }
            // fall through
          case 140: break;
          case 70:
            { return symbol(DartBuiltInWords.INTERFACE);
            }
            // fall through
          case 141: break;
          case 71:
            { return symbol(DartBuiltInWords.IMPLEMENTS);
            }
            // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
