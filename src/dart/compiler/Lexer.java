// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: JFlexDart.jflex

/* JFlex example: partial Java language lexer specification */
import java_cup.runtime.*;
import dart.compiler.DartReservedWords;
import dart.compiler.DartOperators;
import dart.compiler.DartBuiltInWords;
import java_cup.sym;
/**
 * Dart Lexer
 */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000"+
    "\1\u5100\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00\4\u0100\1\u5500"+
    "\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00"+
    "\1\u5900\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\42\u1f00"+
    "\1\u0100\1\u5e00\1\u5f00\11\u1f00\1\u6000\24\u1f00\1\u6100\1\u6200"+
    "\1\u1f00\1\u6300\1\u6400\1\u6500\1\u6600\2\u1f00\1\u6700\5\u1f00"+
    "\1\u6800\1\u6900\1\u6a00\5\u1f00\1\u6b00\1\u6c00\2\u1f00\1\u6d00"+
    "\1\u1f00\1\u6e00\14\u1f00\1\u6f00\4\u1f00\246\u0100\1\u7000\20\u0100"+
    "\1\u7100\1\u7200\25\u0100\1\u7300\34\u0100\1\u7400\14\u1f00\2\u0100"+
    "\1\u7500\5\u1f00\23\u0100\1\u7600\u0aec\u1f00\1\u7700\1\u7800\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\2\0\1\1\24\0\1\2\2\0\1\3"+
    "\1\4\3\0\1\5\1\6\1\0\1\7\17\0\1\10"+
    "\36\0\1\11\4\0\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\0\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\0\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\2\0\1\41\u7883\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30976];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\25\1\1\7\1\10\1\2\1\7\1\3\1\4\1\5"+
    "\1\6\1\11\1\7\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\0\1\21\6\0\1\22\12\0\1\23"+
    "\1\0\1\24\1\25\4\0\1\26\21\0\1\27\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\30\1\31"+
    "\1\32\1\33\1\27\23\0\1\34\1\0\1\35\5\0"+
    "\1\36\4\0\1\37\10\0\1\40\1\0\1\41\11\0"+
    "\1\42\10\0\1\43\1\44\6\0\1\45\5\0\1\46"+
    "\1\0\1\47\2\0\1\50\3\0\1\51\1\52\1\0"+
    "\1\53\1\0\1\54\1\0\1\55\3\0\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\11\0\1\64\1\65\5\0"+
    "\1\66\4\0\1\67\1\0\1\70\1\0\1\71\1\72"+
    "\1\0\1\73\5\0\1\74\7\0\1\75\4\0\1\76"+
    "\1\77\1\100\4\0\1\101\1\0\1\102\1\103\2\0"+
    "\1\104\1\105\3\0\1\106\1\0\1\107\1\110\1\111"+
    "\1\112\1\0\1\113\1\0\1\114\1\115\2\0\1\116"+
    "\1\117\1\120\1\0\1\121\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\104\0\146\0\210\0\252\0\314"+
    "\0\356\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc"+
    "\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca\0\u02ec"+
    "\0\u030e\0\u0330\0\u0352\0\u0374\0\u0396\0\u03b8\0\u03da\0\104"+
    "\0\u03da\0\u03fc\0\u041e\0\u0440\0\u0462\0\u0484\0\u04a6\0\u04c8"+
    "\0\104\0\104\0\104\0\104\0\104\0\104\0\104\0\u04ea"+
    "\0\u050c\0\u052e\0\u0550\0\u0572\0\u0594\0\u05b6\0\u05d8\0\104"+
    "\0\u05fa\0\u061c\0\u063e\0\u0660\0\u0682\0\u06a4\0\u06c6\0\u06e8"+
    "\0\u070a\0\u072c\0\104\0\u074e\0\u0770\0\104\0\u0792\0\u07b4"+
    "\0\u07d6\0\u07f8\0\104\0\u081a\0\u083c\0\u085e\0\u0880\0\u08a2"+
    "\0\u08c4\0\u08e6\0\u0908\0\u092a\0\u094c\0\u096e\0\u0990\0\u09b2"+
    "\0\u09d4\0\u09f6\0\u0a18\0\u0a3a\0\104\0\u03da\0\u03da\0\u03da"+
    "\0\u03da\0\u03da\0\u03da\0\u03da\0\104\0\104\0\104\0\104"+
    "\0\u03da\0\u0a5c\0\u0a7e\0\u0aa0\0\u0ac2\0\u0ae4\0\u0b06\0\u0b28"+
    "\0\u0b4a\0\u0b6c\0\u0b8e\0\u0bb0\0\u0bd2\0\u0bf4\0\u0c16\0\u0c38"+
    "\0\u0c5a\0\u0c7c\0\u0c9e\0\u0cc0\0\104\0\u0ce2\0\104\0\u0d04"+
    "\0\u0d26\0\u0d48\0\u0d6a\0\u0d8c\0\104\0\u0dae\0\u0dd0\0\u0df2"+
    "\0\u0e14\0\104\0\u0e36\0\u0e58\0\u0e7a\0\u0e9c\0\u0ebe\0\u0ee0"+
    "\0\u0f02\0\u0f24\0\104\0\u0f46\0\104\0\u0f68\0\u0f8a\0\u0fac"+
    "\0\u0fce\0\u0ff0\0\u1012\0\u1034\0\u1056\0\u1078\0\104\0\u109a"+
    "\0\u10bc\0\u10de\0\u1100\0\u1122\0\u1144\0\u1166\0\u1188\0\104"+
    "\0\104\0\u11aa\0\u11cc\0\u11ee\0\u1210\0\u1232\0\u1254\0\104"+
    "\0\u1276\0\u1298\0\u12ba\0\u12dc\0\u12fe\0\104\0\u1320\0\104"+
    "\0\u1342\0\u1364\0\104\0\u1386\0\u13a8\0\u13ca\0\104\0\104"+
    "\0\u13ec\0\104\0\u140e\0\104\0\u1430\0\104\0\u1452\0\u1474"+
    "\0\u1496\0\104\0\104\0\104\0\104\0\104\0\104\0\u14b8"+
    "\0\u14da\0\u14fc\0\u151e\0\u1540\0\u1562\0\u1584\0\u15a6\0\u15c8"+
    "\0\104\0\u15ea\0\u160c\0\u162e\0\u1650\0\u1672\0\u1694\0\104"+
    "\0\u16b6\0\u16d8\0\u16fa\0\u171c\0\104\0\u173e\0\104\0\u1760"+
    "\0\104\0\104\0\u1782\0\104\0\u17a4\0\u17c6\0\u17e8\0\u180a"+
    "\0\u182c\0\104\0\u184e\0\u1870\0\u1892\0\u18b4\0\u18d6\0\u18f8"+
    "\0\u191a\0\104\0\u193c\0\u195e\0\u1980\0\u19a2\0\104\0\104"+
    "\0\104\0\u19c4\0\u19e6\0\u1a08\0\u1a2a\0\104\0\u1a4c\0\104"+
    "\0\104\0\u1a6e\0\u1a90\0\104\0\104\0\u1ab2\0\u1ad4\0\u1af6"+
    "\0\104\0\u1b18\0\104\0\104\0\104\0\104\0\u1b3a\0\104"+
    "\0\u1b5c\0\104\0\104\0\u1b7e\0\u1ba0\0\104\0\104\0\104"+
    "\0\u1bc2\0\104\0\104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\3\1\4\1\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\3\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\3\1\33\1\34\1\3\1\35\1\36"+
    "\1\37\1\3\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\27\37\1\50\46\0\1\51\42\0\1\52"+
    "\42\0\1\53\1\0\1\54\40\0\1\55\1\56\41\0"+
    "\1\57\44\0\1\60\16\0\1\61\3\0\1\62\34\0"+
    "\1\63\22\0\1\64\11\0\1\65\2\0\1\66\30\0"+
    "\1\67\10\0\1\70\10\0\1\71\25\0\1\72\1\0"+
    "\1\73\10\0\1\74\14\0\1\75\7\0\1\76\4\0"+
    "\1\77\4\0\1\100\23\0\1\101\45\0\1\102\36\0"+
    "\1\103\5\0\1\104\1\105\3\0\1\106\31\0\1\107"+
    "\41\0\1\110\35\0\1\111\15\0\1\112\33\0\1\113"+
    "\1\0\1\114\23\0\1\115\45\0\1\116\41\0\1\117"+
    "\2\0\1\120\11\0\1\121\1\122\1\0\1\123\1\0"+
    "\1\124\22\0\1\125\7\0\1\126\6\0\1\127\13\0"+
    "\1\130\14\0\1\131\33\0\1\132\1\133\41\0\1\134"+
    "\60\0\1\135\1\37\2\0\6\37\1\0\31\37\2\0"+
    "\1\37\1\136\4\37\1\0\31\37\2\0\2\37\1\137"+
    "\3\37\1\0\31\37\2\0\3\37\1\140\1\37\1\141"+
    "\1\0\31\37\2\0\4\37\1\142\1\143\1\0\31\37"+
    "\2\0\5\37\1\144\1\0\30\37\2\0\1\145\23\0"+
    "\1\146\2\0\1\147\1\0\1\150\6\0\1\37\2\0"+
    "\6\37\1\0\27\37\1\151\32\0\1\152\41\0\1\153"+
    "\5\0\1\154\13\0\1\155\45\0\1\156\55\0\1\157"+
    "\1\160\20\0\1\161\55\0\1\162\6\0\1\163\23\0"+
    "\1\164\50\0\1\165\45\0\1\166\43\0\1\167\35\0"+
    "\1\170\2\0\1\171\22\0\1\172\7\0\1\173\43\0"+
    "\1\174\44\0\1\175\36\0\1\176\46\0\1\177\23\0"+
    "\1\200\54\0\1\201\44\0\1\202\21\0\1\203\65\0"+
    "\1\204\40\0\1\205\27\0\1\206\33\0\1\207\54\0"+
    "\1\210\43\0\1\211\41\0\1\212\35\0\1\213\24\0"+
    "\1\214\57\0\1\215\33\0\1\216\45\0\1\217\35\0"+
    "\1\220\6\0\1\221\44\0\1\222\3\0\1\223\31\0"+
    "\1\224\42\0\1\225\32\0\1\226\41\0\1\227\52\0"+
    "\1\230\24\0\1\231\56\0\1\232\24\0\1\233\51\0"+
    "\1\234\35\0\1\235\31\0\1\236\45\0\1\237\37\0"+
    "\1\240\57\0\1\241\41\0\1\242\1\243\20\0\1\244"+
    "\41\0\1\245\3\0\1\246\35\0\1\247\45\0\1\250"+
    "\50\0\1\251\43\0\1\252\30\0\1\253\56\0\1\254"+
    "\40\0\1\255\21\0\1\256\43\0\1\257\43\0\1\260"+
    "\47\0\1\261\2\0\1\262\30\0\1\263\54\0\1\264"+
    "\32\0\1\265\43\0\1\266\46\0\1\267\43\0\1\270"+
    "\27\0\1\271\12\0\1\272\43\0\1\273\36\0\1\274"+
    "\24\0\1\275\56\0\1\276\22\0\1\277\57\0\1\300"+
    "\36\0\1\301\30\0\1\302\41\0\1\303\40\0\1\304"+
    "\50\0\1\305\36\0\1\306\44\0\1\307\46\0\1\310"+
    "\41\0\1\311\24\0\1\312\60\0\1\313\31\0\1\314"+
    "\37\0\1\315\52\0\1\316\42\0\1\317\30\0\1\320"+
    "\50\0\1\321\44\0\1\322\36\0\1\323\35\0\1\324"+
    "\45\0\1\325\36\0\1\326\2\0\1\327\37\0\1\330"+
    "\30\0\1\331\47\0\1\332\50\0\1\333\24\0\1\334"+
    "\54\0\1\335\41\0\1\336\22\0\1\337\55\0\1\340"+
    "\25\0\1\341\60\0\1\342\41\0\1\343\32\0\1\344"+
    "\50\0\1\345\24\0\1\346\63\0\1\347\20\0\1\350"+
    "\42\0\1\351\40\0\1\352\36\0\1\353\62\0\1\354"+
    "\34\0\1\355\35\0\1\356\43\0\1\357\46\0\1\360"+
    "\32\0\1\361\52\0\1\362\23\0\1\363\14\0\1\364"+
    "\35\0\1\365\44\0\1\366\34\0\1\367\37\0\1\370"+
    "\44\0\1\371\47\0\1\372\25\0\1\373\53\0\1\374"+
    "\43\0\1\375\35\0\1\376\40\0\1\377\27\0\1\u0100"+
    "\46\0\1\u0101\36\0\1\u0102\37\0\1\u0103\61\0\1\u0104"+
    "\17\0\1\u0105\62\0\1\u0106\24\0\1\u0107\37\0\1\u0108"+
    "\57\0\1\u0109\31\0\1\u010a\31\0\1\u010b\67\0\1\u010c"+
    "\41\0\1\u010d\30\0\1\u010e\30\0\1\u010f\35\0\1\u0110"+
    "\67\0\1\u0111\30\0\1\u0112\50\0\1\u0113\22\0\1\u0114"+
    "\55\0\1\u0115\24\0\1\u0116\51\0\1\u0117\30\0\1\u0118"+
    "\53\0\1\u0119\36\0\1\u011a\43\0\1\u011b\41\0\1\u011c"+
    "\27\0\1\u011d\56\0\1\u011e\43\0\1\u011f\34\0\1\u0120"+
    "\46\0\1\u0121\24\0\1\u0122\55\0\1\u0123\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7140];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\33\1\1\11\10\1\7\11\1\0\1\1"+
    "\6\0\1\11\12\0\1\11\1\0\1\1\1\11\4\0"+
    "\1\11\21\0\1\11\7\1\4\11\1\1\23\0\1\11"+
    "\1\0\1\11\5\0\1\11\4\0\1\11\10\0\1\11"+
    "\1\0\1\11\11\0\1\11\10\0\2\11\6\0\1\11"+
    "\5\0\1\11\1\0\1\11\2\0\1\11\3\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\3\0\6\11"+
    "\11\0\1\11\1\1\5\0\1\11\4\0\1\11\1\0"+
    "\1\11\1\0\2\11\1\0\1\11\5\0\1\11\7\0"+
    "\1\11\4\0\3\11\4\0\1\11\1\0\2\11\2\0"+
    "\2\11\3\0\1\11\1\0\4\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Illegal character <"+
                                                    yytext()+">");
            }
            // fall through
          case 83: break;
          case 2:
            { return symbol(DartOperators.RESID.value);
            }
            // fall through
          case 84: break;
          case 3:
            { return symbol(DartOperators.POW.value);
            }
            // fall through
          case 85: break;
          case 4:
            { return symbol(DartOperators.PLUS.value);
            }
            // fall through
          case 86: break;
          case 5:
            { return symbol(DartOperators.MINUS.value);
            }
            // fall through
          case 87: break;
          case 6:
            { return symbol(DartOperators.EQ.value);
            }
            // fall through
          case 88: break;
          case 7:
            { string.append( yytext() );
            }
            // fall through
          case 89: break;
          case 8:
            { yybegin(YYINITIAL); 
                                   return symbol(DartOperators.STRINGLITERAL.value, 
                                   string.toString());
            }
            // fall through
          case 90: break;
          case 9:
            { string.append('\\');
            }
            // fall through
          case 91: break;
          case 10:
            { return symbol(DartOperators.AND.value);
            }
            // fall through
          case 92: break;
          case 11:
            { return symbol(DartOperators.POWPOW.value);
            }
            // fall through
          case 93: break;
          case 12:
            { return symbol(DartOperators.PLUSPLUS.value);
            }
            // fall through
          case 94: break;
          case 13:
            { return symbol(DartOperators.PLUSEQ.value);
            }
            // fall through
          case 95: break;
          case 14:
            { return symbol(DartOperators.MINUSMINUS.value);
            }
            // fall through
          case 96: break;
          case 15:
            { return symbol(DartOperators.MINUSEQ.value);
            }
            // fall through
          case 97: break;
          case 16:
            { return symbol(DartOperators.EQEQ.value);
            }
            // fall through
          case 98: break;
          case 17:
            { return symbol(DartBuiltInWords.AS.value);
            }
            // fall through
          case 99: break;
          case 18:
            { return symbol(DartReservedWords.DO.value);
            }
            // fall through
          case 100: break;
          case 19:
            { return symbol(DartReservedWords.IF.value);
            }
            // fall through
          case 101: break;
          case 20:
            { return symbol(DartReservedWords.IN.value);
            }
            // fall through
          case 102: break;
          case 21:
            { return symbol(DartReservedWords.IS.value);
            }
            // fall through
          case 103: break;
          case 22:
            { return symbol(DartReservedWords.ON.value);
            }
            // fall through
          case 104: break;
          case 23:
            { return symbol(DartOperators.OR.value);
            }
            // fall through
          case 105: break;
          case 24:
            { string.append('\"');
            }
            // fall through
          case 106: break;
          case 25:
            { string.append('\n');
            }
            // fall through
          case 107: break;
          case 26:
            { string.append('\r');
            }
            // fall through
          case 108: break;
          case 27:
            { string.append('\t');
            }
            // fall through
          case 109: break;
          case 28:
            { return symbol(DartReservedWords.FOR.value);
            }
            // fall through
          case 110: break;
          case 29:
            { return symbol(DartBuiltInWords.GET.value);
            }
            // fall through
          case 111: break;
          case 30:
            { return symbol(DartReservedWords.NEW.value);
            }
            // fall through
          case 112: break;
          case 31:
            { return symbol(DartBuiltInWords.SET.value);
            }
            // fall through
          case 113: break;
          case 32:
            { return symbol(DartReservedWords.TRY.value);
            }
            // fall through
          case 114: break;
          case 33:
            { return symbol(DartReservedWords.VAR.value);
            }
            // fall through
          case 115: break;
          case 34:
            { return symbol(DartReservedWords.CASE.value);
            }
            // fall through
          case 116: break;
          case 35:
            { return symbol(DartReservedWords.ELSE.value);
            }
            // fall through
          case 117: break;
          case 36:
            { return symbol(DartReservedWords.ENUM.value);
            }
            // fall through
          case 118: break;
          case 37:
            { return symbol(DartReservedWords.HIDE.value);
            }
            // fall through
          case 119: break;
          case 38:
            { return symbol(DartReservedWords.NULL.value);
            }
            // fall through
          case 120: break;
          case 39:
            { return symbol(DartBuiltInWords.PART.value);
            }
            // fall through
          case 121: break;
          case 40:
            { return symbol(DartReservedWords.SHOW.value);
            }
            // fall through
          case 122: break;
          case 41:
            { return symbol(DartReservedWords.SYNC.value);
            }
            // fall through
          case 123: break;
          case 42:
            { return symbol(DartReservedWords.THIS.value);
            }
            // fall through
          case 124: break;
          case 43:
            { return symbol(DartReservedWords.TRUE.value);
            }
            // fall through
          case 125: break;
          case 44:
            { return symbol(DartReservedWords.VOID.value);
            }
            // fall through
          case 126: break;
          case 45:
            { return symbol(DartReservedWords.WITH.value);
            }
            // fall through
          case 127: break;
          case 46:
            { return symbol(DartReservedWords.ASYNC.value);
            }
            // fall through
          case 128: break;
          case 47:
            { return symbol(DartReservedWords.AWAIT.value);
            }
            // fall through
          case 129: break;
          case 48:
            { return symbol(DartReservedWords.BREAK.value);
            }
            // fall through
          case 130: break;
          case 49:
            { return symbol(DartReservedWords.CATCH.value);
            }
            // fall through
          case 131: break;
          case 50:
            { return symbol(DartReservedWords.CLASS.value);
            }
            // fall through
          case 132: break;
          case 51:
            { return symbol(DartReservedWords.CONST.value);
            }
            // fall through
          case 133: break;
          case 52:
            { return symbol(DartReservedWords.FALSE.value);
            }
            // fall through
          case 134: break;
          case 53:
            { return symbol(DartReservedWords.FINAL.value);
            }
            // fall through
          case 135: break;
          case 54:
            { return symbol(DartBuiltInWords.MIXIN.value);
            }
            // fall through
          case 136: break;
          case 55:
            { return symbol(DartReservedWords.SUPER.value);
            }
            // fall through
          case 137: break;
          case 56:
            { return symbol(DartReservedWords.THROW.value);
            }
            // fall through
          case 138: break;
          case 57:
            { return symbol(DartReservedWords.WHILE.value);
            }
            // fall through
          case 139: break;
          case 58:
            { return symbol(DartReservedWords.YIELD.value);
            }
            // fall through
          case 140: break;
          case 59:
            { return symbol(DartReservedWords.ASSERT.value);
            }
            // fall through
          case 141: break;
          case 60:
            { return symbol(DartBuiltInWords.EXPORT.value);
            }
            // fall through
          case 142: break;
          case 61:
            { return symbol(DartBuiltInWords.IMPORT.value);
            }
            // fall through
          case 143: break;
          case 62:
            { return symbol(DartReservedWords.RETURN.value);
            }
            // fall through
          case 144: break;
          case 63:
            { return symbol(DartBuiltInWords.STATIC.value);
            }
            // fall through
          case 145: break;
          case 64:
            { return symbol(DartReservedWords.SWITCH.value);
            }
            // fall through
          case 146: break;
          case 65:
            { return symbol(DartReservedWords.DEFAULT.value);
            }
            // fall through
          case 147: break;
          case 66:
            { return symbol(DartBuiltInWords.DYNAMIC.value);
            }
            // fall through
          case 148: break;
          case 67:
            { return symbol(DartReservedWords.EXTENDS.value);
            }
            // fall through
          case 149: break;
          case 68:
            { return symbol(DartBuiltInWords.FACTORY.value);
            }
            // fall through
          case 150: break;
          case 69:
            { return symbol(DartReservedWords.FINALLY.value);
            }
            // fall through
          case 151: break;
          case 70:
            { return symbol(DartBuiltInWords.LIBRARY.value);
            }
            // fall through
          case 152: break;
          case 71:
            { return symbol(DartReservedWords.RETHROW.value);
            }
            // fall through
          case 153: break;
          case 72:
            { return symbol(DartBuiltInWords.TYPEDEF.value);
            }
            // fall through
          case 154: break;
          case 73:
            { return symbol(DartBuiltInWords.ABSTRACT.value);
            }
            // fall through
          case 155: break;
          case 74:
            { return symbol(DartReservedWords.CONTINUE.value);
            }
            // fall through
          case 156: break;
          case 75:
            { return symbol(DartBuiltInWords.DEFERRED.value);
            }
            // fall through
          case 157: break;
          case 76:
            { return symbol(DartBuiltInWords.EXTERNAL.value);
            }
            // fall through
          case 158: break;
          case 77:
            { return symbol(DartBuiltInWords.FUNCTION.value);
            }
            // fall through
          case 159: break;
          case 78:
            { return symbol(DartBuiltInWords.OPERATOR.value);
            }
            // fall through
          case 160: break;
          case 79:
            { return symbol(DartBuiltInWords.COVARIANT.value);
            }
            // fall through
          case 161: break;
          case 80:
            { return symbol(DartBuiltInWords.EXTENSION.value);
            }
            // fall through
          case 162: break;
          case 81:
            { return symbol(DartBuiltInWords.INTERFACE.value);
            }
            // fall through
          case 163: break;
          case 82:
            { return symbol(DartBuiltInWords.IMPLEMENTS.value);
            }
            // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
